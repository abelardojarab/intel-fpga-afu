// (C) 2001-2018 Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files from any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License Subscription 
// Agreement, Intel FPGA IP License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Intel and sold by 
// Intel or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Copyright 2014 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////


`timescale 1ps/1ps

// DESCRIPTION
// Dual clock FIFO. 16 bits wide. 4 addr lines.
// Generated by one of Gregg's toys.   Share And Enjoy.

module alt_e100s10_dcfifo16a4r2w1 #(
    parameter SIM_CLK_JITTER = 1'b0,
    parameter SIM_EMULATE = 1'b0
) (
    input din_clk,
    input din_sclr,
    input din_wreq,
    input [15:0] din,
    output [3:0] din_wusedw,

    input dout_clk,
    input dout_sclr,
    input dout_rreq,
    output [15:0] dout,
    output [3:0] dout_rusedw
);

///////////////////////////////
// write pointer

reg din_sclr_r = 1'b0 /* synthesis preserve_syn_only */;
always @(posedge din_clk) begin
    din_sclr_r <= din_sclr;
end

wire [3:0] din_wptr;
alt_e100s10_cnt4ic ct0 (
    .clk(din_clk),
    .inc(din_wreq),
    .sclr(din_sclr_r),
    .dout(din_wptr)
);
defparam ct0 .SIM_EMULATE = SIM_EMULATE;

///////////////////////////////
// read pointer

reg dout_sclr_r = 1'b0 /* synthesis preserve_syn_only */;
always @(posedge dout_clk) begin
    dout_sclr_r <= dout_sclr;
end

wire [3:0] dout_rptr;
alt_e100s10_cnt4ic ct1 (
    .clk(dout_clk),
    .inc(dout_rreq),
    .sclr(dout_sclr_r),
    .dout(dout_rptr)
);
defparam ct1 .SIM_EMULATE = SIM_EMULATE;

///////////////////////////////
// storage

wire [15:0] dout_w;
alt_e100s10_mlab16a4r1w1 m0 (
    .rclk(dout_clk),
    .wclk(din_clk),
    .waddr(din_wptr),
    .din(din),
    .raddr(dout_rptr),
    .dout(dout_w)
);
defparam m0 .SIM_EMULATE = SIM_EMULATE;

///////////////////////////////////
// pointer cross domain exchange

wire [3:0] dout_xwptr;
wire [3:0] din_xrptr;

alt_e100s10_gpx4 gx0 (
    .din_clk(din_clk),
    .din(din_wptr),
    .dout_clk(dout_clk),
    .dout(dout_xwptr)
);
defparam gx0 .SIM_CLK_JITTER = SIM_CLK_JITTER;
defparam gx0 .SIM_EMULATE = SIM_EMULATE;

alt_e100s10_gpx4 gx1 (
    .din_clk(dout_clk),
    .din(dout_rptr),
    .dout_clk(din_clk),
    .dout(din_xrptr)
);
defparam gx1 .SIM_CLK_JITTER = SIM_CLK_JITTER;
defparam gx1 .SIM_EMULATE = SIM_EMULATE;

///////////////////////////////////
// compute used words

reg [3:0] rusedw = 4'b0;
reg [3:0] wusedw = 4'b0;

always @(posedge dout_clk) begin
    rusedw <= dout_xwptr - dout_rptr;
end

always @(posedge din_clk) begin
    wusedw <= din_wptr - din_xrptr;
end

assign din_wusedw = wusedw;
assign dout_rusedw = rusedw;

///////////////////////////////
// output registers

reg [15:0] dout_r = 16'b0;
reg rdena_0 = 1'b0 /* synthesis preserve_syn_only */;
always @(posedge dout_clk) begin
    rdena_0 <= dout_rreq;
    if (rdena_0) dout_r[15:0] <= dout_w[15:0];
end

assign dout = dout_r;

endmodule

