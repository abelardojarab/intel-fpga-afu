// ex_100g.v

// Generated using ACDS version 18.0.1 261

`timescale 1 ps / 1 ps
module ex_100g (
		output wire         clk_rxmac,             // avalon_st_rx.clk_rxmac
		output wire [5:0]   l8_rx_error,           //             .l8_rx_error
		output wire         l8_rx_valid,           //             .l8_rx_valid
		output wire         l8_rx_startofpacket,   //             .l8_rx_startofpacket
		output wire         l8_rx_endofpacket,     //             .l8_rx_endofpacket
		output wire [5:0]   l8_rx_empty,           //             .l8_rx_empty
		output wire [511:0] l8_rx_data,            //             .l8_rx_data
		output wire         clk_txmac,             // avalon_st_tx.clk_txmac
		input  wire         l8_tx_startofpacket,   //             .l8_tx_startofpacket
		input  wire         l8_tx_endofpacket,     //             .l8_tx_endofpacket
		input  wire         l8_tx_valid,           //             .l8_tx_valid
		output wire         l8_tx_ready,           //             .l8_tx_ready
		input  wire         l8_tx_error,           //             .l8_tx_error
		input  wire [5:0]   l8_tx_empty,           //             .l8_tx_empty
		input  wire [511:0] l8_tx_data,            //             .l8_tx_data
		output wire         tx_lanes_stable,       //        other.tx_lanes_stable
		output wire         rx_pcs_ready,          //             .rx_pcs_ready
		output wire         rx_block_lock,         //             .rx_block_lock
		output wire         rx_am_lock,            //             .rx_am_lock
		input  wire         clk_ref,               //             .clk_ref
		input  wire         csr_rst_n,             //             .csr_rst_n
		input  wire         tx_rst_n,              //             .tx_rst_n
		input  wire         rx_rst_n,              //             .rx_rst_n
		input  wire [1:0]   tx_serial_clk,         //             .tx_serial_clk
		input  wire [1:0]   tx_pll_locked,         //             .tx_pll_locked
		input  wire         reconfig_clk,          //     reconfig.reconfig_clk
		input  wire         reconfig_reset,        //             .reconfig_reset
		input  wire         reconfig_write,        //             .reconfig_write
		input  wire         reconfig_read,         //             .reconfig_read
		input  wire [12:0]  reconfig_address,      //             .reconfig_address
		input  wire [31:0]  reconfig_writedata,    //             .reconfig_writedata
		output wire [31:0]  reconfig_readdata,     //             .reconfig_readdata
		output wire         reconfig_waitrequest,  //             .reconfig_waitrequest
		output wire [3:0]   tx_serial,             // serial_lanes.tx_serial
		input  wire [3:0]   rx_serial,             //             .rx_serial
		output wire         l8_txstatus_valid,     //        stats.l8_txstatus_valid
		output wire [39:0]  l8_txstatus_data,      //             .l8_txstatus_data
		output wire [6:0]   l8_txstatus_error,     //             .l8_txstatus_error
		output wire         l8_rxstatus_valid,     //             .l8_rxstatus_valid
		output wire [39:0]  l8_rxstatus_data,      //             .l8_rxstatus_data
		input  wire         clk_status,            //       status.clk_status
		input  wire         status_write,          //             .status_write
		input  wire         status_read,           //             .status_read
		input  wire [15:0]  status_addr,           //             .status_addr
		input  wire [31:0]  status_writedata,      //             .status_writedata
		output wire [31:0]  status_readdata,       //             .status_readdata
		output wire         status_readdata_valid, //             .status_readdata_valid
		output wire         status_waitrequest     //             .status_waitrequest
	);

	ex_100g_alt_e100s10_180_sqg2ueq #(
		.ENABLE_ANLT               (0),
		.SYNTH_LT                  (1),
		.TRNWTWIDTH                (7),
		.CL72_PRBS                 (0),
		.USE_DEBUG_CPU             (0),
		.SYNOPT_AVALON             (1),
		.SYNOPT_C4_RSFEC           (0),
		.RX_PLL_TYPE               ("IOPLL"),
		.TX_PLL_TYPE               ("FPLL"),
		.TX_PLL_LOCAT              (0),
		.PHY_REFCLK                (1),
		.EXT_TX_PLL                (0),
		.SYNOPT_FLOW_CONTROL       (0),
		.SYNOPT_NUMPRIORITY        (1),
		.SYNOPT_AVG_IPG            (12),
		.SYNOPT_PTP                (0),
		.PTP_FP_WIDTH              (1),
		.SYNOPT_LINK_FAULT         (0),
		.SYNOPT_TXCRC_INS          (1),
		.SYNOPT_MAC_DIC            (1),
		.SYNOPT_PREAMBLE_PASS      (0),
		.SYNOPT_ALIGN_FCSEOP       (1),
		.SYNOPT_MAC_STATS_COUNTERS (1),
		.SYNOPT_STRICT_SOP         (0),
		.TARGET_CHIP               (5),
		.STATUS_CLK_KHZ            (100000),
		.SYNTH_AN                  (1),
		.CAPABLE_RSFEC             (1),
		.LINK_TIMER_KR             (504),
		.VMAXRULE                  (30),
		.VMINRULE                  (6),
		.VODMINRULE                (14),
		.VPOSTRULE                 (25),
		.VPRERULE                  (16),
		.PREMAINVAL                (30),
		.PREPOSTVAL                (0),
		.PREPREVAL                 (0),
		.INITMAINVAL               (25),
		.INITPOSTVAL               (13),
		.INITPREVAL                (3),
		.AN_CHAN                   (1),
		.AN_PAUSE                  (3),
		.AN_TECH                   (256),
		.E25_TECH                  (0)
	) ex_100g_inst (
		.clk_status            (clk_status),            //   input,    width = 1,       status.clk_status
		.status_write          (status_write),          //   input,    width = 1,             .status_write
		.status_read           (status_read),           //   input,    width = 1,             .status_read
		.status_addr           (status_addr),           //   input,   width = 16,             .status_addr
		.status_writedata      (status_writedata),      //   input,   width = 32,             .status_writedata
		.status_readdata       (status_readdata),       //  output,   width = 32,             .status_readdata
		.status_readdata_valid (status_readdata_valid), //  output,    width = 1,             .status_readdata_valid
		.status_waitrequest    (status_waitrequest),    //  output,    width = 1,             .status_waitrequest
		.clk_txmac             (clk_txmac),             //  output,    width = 1, avalon_st_tx.clk_txmac
		.l8_tx_startofpacket   (l8_tx_startofpacket),   //   input,    width = 1,             .l8_tx_startofpacket
		.l8_tx_endofpacket     (l8_tx_endofpacket),     //   input,    width = 1,             .l8_tx_endofpacket
		.l8_tx_valid           (l8_tx_valid),           //   input,    width = 1,             .l8_tx_valid
		.l8_tx_ready           (l8_tx_ready),           //  output,    width = 1,             .l8_tx_ready
		.l8_tx_error           (l8_tx_error),           //   input,    width = 1,             .l8_tx_error
		.l8_tx_empty           (l8_tx_empty),           //   input,    width = 6,             .l8_tx_empty
		.l8_tx_data            (l8_tx_data),            //   input,  width = 512,             .l8_tx_data
		.clk_rxmac             (clk_rxmac),             //  output,    width = 1, avalon_st_rx.clk_rxmac
		.l8_rx_error           (l8_rx_error),           //  output,    width = 6,             .l8_rx_error
		.l8_rx_valid           (l8_rx_valid),           //  output,    width = 1,             .l8_rx_valid
		.l8_rx_startofpacket   (l8_rx_startofpacket),   //  output,    width = 1,             .l8_rx_startofpacket
		.l8_rx_endofpacket     (l8_rx_endofpacket),     //  output,    width = 1,             .l8_rx_endofpacket
		.l8_rx_empty           (l8_rx_empty),           //  output,    width = 6,             .l8_rx_empty
		.l8_rx_data            (l8_rx_data),            //  output,  width = 512,             .l8_rx_data
		.tx_serial             (tx_serial),             //  output,    width = 4, serial_lanes.tx_serial
		.rx_serial             (rx_serial),             //   input,    width = 4,             .rx_serial
		.reconfig_clk          (reconfig_clk),          //   input,    width = 1,     reconfig.reconfig_clk
		.reconfig_reset        (reconfig_reset),        //   input,    width = 1,             .reconfig_reset
		.reconfig_write        (reconfig_write),        //   input,    width = 1,             .reconfig_write
		.reconfig_read         (reconfig_read),         //   input,    width = 1,             .reconfig_read
		.reconfig_address      (reconfig_address),      //   input,   width = 13,             .reconfig_address
		.reconfig_writedata    (reconfig_writedata),    //   input,   width = 32,             .reconfig_writedata
		.reconfig_readdata     (reconfig_readdata),     //  output,   width = 32,             .reconfig_readdata
		.reconfig_waitrequest  (reconfig_waitrequest),  //  output,    width = 1,             .reconfig_waitrequest
		.tx_lanes_stable       (tx_lanes_stable),       //  output,    width = 1,        other.tx_lanes_stable
		.rx_pcs_ready          (rx_pcs_ready),          //  output,    width = 1,             .rx_pcs_ready
		.rx_block_lock         (rx_block_lock),         //  output,    width = 1,             .rx_block_lock
		.rx_am_lock            (rx_am_lock),            //  output,    width = 1,             .rx_am_lock
		.clk_ref               (clk_ref),               //   input,    width = 1,             .clk_ref
		.csr_rst_n             (csr_rst_n),             //   input,    width = 1,             .csr_rst_n
		.tx_rst_n              (tx_rst_n),              //   input,    width = 1,             .tx_rst_n
		.rx_rst_n              (rx_rst_n),              //   input,    width = 1,             .rx_rst_n
		.tx_serial_clk         (tx_serial_clk),         //   input,    width = 2,             .tx_serial_clk
		.tx_pll_locked         (tx_pll_locked),         //   input,    width = 2,             .tx_pll_locked
		.l8_txstatus_valid     (l8_txstatus_valid),     //  output,    width = 1,        stats.l8_txstatus_valid
		.l8_txstatus_data      (l8_txstatus_data),      //  output,   width = 40,             .l8_txstatus_data
		.l8_txstatus_error     (l8_txstatus_error),     //  output,    width = 7,             .l8_txstatus_error
		.l8_rxstatus_valid     (l8_rxstatus_valid),     //  output,    width = 1,             .l8_rxstatus_valid
		.l8_rxstatus_data      (l8_rxstatus_data),      //  output,   width = 40,             .l8_rxstatus_data
		.remote_fault_status   (),                      // (terminated),                            
		.local_fault_status    (),                      // (terminated),                            
		.pause_insert_tx0      (1'b0),                  // (terminated),                            
		.pause_insert_tx1      (1'b0),                  // (terminated),                            
		.pause_receive_rx      ()                       // (terminated),                            
	);

endmodule
