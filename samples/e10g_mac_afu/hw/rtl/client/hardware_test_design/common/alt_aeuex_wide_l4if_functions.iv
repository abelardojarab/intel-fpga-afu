// (C) 2001-2018 Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files from any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License Subscription 
// Agreement, Intel FPGA IP License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Intel and sold by 
// Intel or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


//----------------------------------------------------------------------------
function [127:0] alt_aeuex_wide_little_endian2avalon_128;
input [127:0] a;

begin
    alt_aeuex_wide_little_endian2avalon_128 = {a[  7: 0],  a[ 15:  8], a[ 23: 16], a[ 31: 24],
                                a[ 39: 32], a[ 47: 40], a[ 55: 48], a[ 63: 56],
                                a[ 71: 64], a[ 79: 72], a[ 87: 80], a[ 95: 88],
                                a[103: 96], a[111:104], a[119:112], a[127:120]
                               };
end
endfunction // if
//----------------------------------------------------------------------------
function [255:0] alt_aeuex_wide_little_endian2avalon_256;
input [255:0] a;

begin
    alt_aeuex_wide_little_endian2avalon_256 
                         = {a[  7: 0],  a[ 15:  8], a[ 23: 16], a[ 31: 24],
                            a[ 39: 32], a[ 47: 40], a[ 55: 48], a[ 63: 56],
                            a[ 71: 64], a[ 79: 72], a[ 87: 80], a[ 95: 88],
                            a[103: 96], a[111:104], a[119:112], a[127:120],
                            a[135:128], a[143:136], a[151:144], a[159:152],
                            a[167:160], a[175:168], a[183:176], a[191:184],
                            a[199:192], a[207:200], a[215:208], a[223:216],
                            a[231:224], a[239:232], a[247:240], a[255:248]};
end
endfunction
//----------------------------------------------------------------------------
function [1:0] alt_aeuex_wide_swap2;
input [1:0] a;

begin
    alt_aeuex_wide_swap2  = {a[0], a[1]};
end
endfunction
//----------------------------------------------------------------------------
function [15:0] alt_aeuex_wide_swap16;
input [15:0] a;

begin
    alt_aeuex_wide_swap16 = {a[ 0], a[ 1], a[ 2], a[ 3], a[ 4], a[ 5], a[ 6], a[ 7],
              a[ 8], a[ 9], a[10], a[11], a[12], a[13], a[14], a[15]};
end
endfunction
//----------------------------------------------------------------------------
function [15:0] alt_aeuex_wide_decode4to16;
input [3:0] select;

reg   [3:0] select;

begin
    case (select)
         0:      alt_aeuex_wide_decode4to16 = 16'b0000000000000001;
         1:      alt_aeuex_wide_decode4to16 = 16'b0000000000000010;
         2:      alt_aeuex_wide_decode4to16 = 16'b0000000000000100;
         3:      alt_aeuex_wide_decode4to16 = 16'b0000000000001000;
         4:      alt_aeuex_wide_decode4to16 = 16'b0000000000010000;
         5:      alt_aeuex_wide_decode4to16 = 16'b0000000000100000;
         6:      alt_aeuex_wide_decode4to16 = 16'b0000000001000000;
         7:      alt_aeuex_wide_decode4to16 = 16'b0000000010000000;
         8:      alt_aeuex_wide_decode4to16 = 16'b0000000100000000;
         9:      alt_aeuex_wide_decode4to16 = 16'b0000001000000000;
        10:      alt_aeuex_wide_decode4to16 = 16'b0000010000000000;
        11:      alt_aeuex_wide_decode4to16 = 16'b0000100000000000;
        12:      alt_aeuex_wide_decode4to16 = 16'b0001000000000000;
        13:      alt_aeuex_wide_decode4to16 = 16'b0010000000000000;
        14:      alt_aeuex_wide_decode4to16 = 16'b0100000000000000;
        15:      alt_aeuex_wide_decode4to16 = 16'b1000000000000000;
    endcase // case (select)
end
endfunction
//----------------------------------------------------------------------------
function [3:0] alt_aeuex_wide_encode16to4;
input [15:0] in;

reg    [3:0] out;
integer      j;

begin
    out = 0;
    for (j = 0; j < 16; j = j + 1) begin
        if (in[j])   out = out | j[4:0];
    end
    alt_aeuex_wide_encode16to4 = out;
end
endfunction
//----------------------------------------------------------------------------
function  alt_aeuex_wide_encode2to1;
input [1:0] in;

reg         out;
integer     i;

begin
    out = 0;
    for (i = 0; i < 2; i = i + 1) begin
        if (in[i])   out = out | i;
    end
    alt_aeuex_wide_encode2to1 = out;
end
endfunction
//----------------------------------------------------------------------------
function [4:0] alt_aeuex_wide_encode32to5;
input [31:0] in;

reg    [4:0] out;
integer     j;

begin
    out = 0;
    for (j = 0; j < 32; j = j + 1) begin
        if (in[j])   out = out | j[4:0];
    end
    alt_aeuex_wide_encode32to5 = out;
end
endfunction
//----------------------------------------------------------------------------
function [31:0] alt_aeuex_wide_decode5to32;
input [4:0] select;

reg   [4:0] select;

begin
    case (select)
         0:      alt_aeuex_wide_decode5to32 = 32'h0000_0001;
         1:      alt_aeuex_wide_decode5to32 = 32'h0000_0002;
         2:      alt_aeuex_wide_decode5to32 = 32'h0000_0004;
         3:      alt_aeuex_wide_decode5to32 = 32'h0000_0008;
         4:      alt_aeuex_wide_decode5to32 = 32'h0000_0010;
         5:      alt_aeuex_wide_decode5to32 = 32'h0000_0020;
         6:      alt_aeuex_wide_decode5to32 = 32'h0000_0040;
         7:      alt_aeuex_wide_decode5to32 = 32'h0000_0080;
         8:      alt_aeuex_wide_decode5to32 = 32'h0000_0100;
         9:      alt_aeuex_wide_decode5to32 = 32'h0000_0200;
        10:      alt_aeuex_wide_decode5to32 = 32'h0000_0400;
        11:      alt_aeuex_wide_decode5to32 = 32'h0000_0800;
        12:      alt_aeuex_wide_decode5to32 = 32'h0000_1000;
        13:      alt_aeuex_wide_decode5to32 = 32'h0000_2000;
        14:      alt_aeuex_wide_decode5to32 = 32'h0000_4000;
        15:      alt_aeuex_wide_decode5to32 = 32'h0000_8000;
        16:      alt_aeuex_wide_decode5to32 = 32'h0001_0000;
        17:      alt_aeuex_wide_decode5to32 = 32'h0002_0000;
        18:      alt_aeuex_wide_decode5to32 = 32'h0004_0000;
        19:      alt_aeuex_wide_decode5to32 = 32'h0008_0000;
        20:      alt_aeuex_wide_decode5to32 = 32'h0010_0000;
        21:      alt_aeuex_wide_decode5to32 = 32'h0020_0000;
        22:      alt_aeuex_wide_decode5to32 = 32'h0040_0000;
        23:      alt_aeuex_wide_decode5to32 = 32'h0080_0000;
        24:      alt_aeuex_wide_decode5to32 = 32'h0100_0000;
        25:      alt_aeuex_wide_decode5to32 = 32'h0200_0000;
        26:      alt_aeuex_wide_decode5to32 = 32'h0400_0000;
        27:      alt_aeuex_wide_decode5to32 = 32'h0800_0000;
        28:      alt_aeuex_wide_decode5to32 = 32'h1000_0000;
        29:      alt_aeuex_wide_decode5to32 = 32'h2000_0000;
        30:      alt_aeuex_wide_decode5to32 = 32'h4000_0000;
        31:      alt_aeuex_wide_decode5to32 = 32'h8000_0000;
    endcase // case (select)
end

endfunction
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
function [2:0] alt_aeuex_wide_encode8to3;
input [7:0] in;

reg   [2:0] out;
integer     i;

begin
    out = 0;
    for (i = 0; i < 8; i = i + 1) begin
        if (in[i])   out = out | i;
    end
    alt_aeuex_wide_encode8to3 = out;
end
endfunction
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// alt_aeuex_wide_crc32
//
// Polynomial is:
//  32    26    23    22    16    12    11    10    8    7    5    4    2
// x   + x   + x   + x   + x   + x   + x   + x   + x  + x  + x  + x  + x  +x+1
//
// Return r, where: p = x*q + r
//
`define Polynomial 33'h104C11DB7
//`define Pwidth     32
`define Pwidth     8
`define Qwidth     32

function [(`Qwidth-1):0] alt_aeuex_wide_crc32;
input [(`Pwidth - 1):0]  p;
input [(`Qwidth - 1):0]  ini;

reg   [(`Pwidth - 1):0]  p;
reg   [(`Qwidth - 1):0]  ini;

reg   [32:0]             poly;
reg   [(`Qwidth - 1):0]  r;
integer                  j;

begin
    r    = ini;       // Preset shift register
    poly = `Polynomial;

    for (j = 0; j < `Pwidth; j = j + 1) begin
        if (r[`Qwidth - 1]) begin
            r[(`Qwidth - 1) : 1]  = r[(`Qwidth - 2) : 0];
            r[0]                  = p[(`Pwidth - 1) - j];
            r                     = r ^ poly[(`Qwidth - 1): 0];
        end else begin
            r[(`Qwidth - 1) : 1]  = r[(`Qwidth - 2) : 0];
            r[0]                  = p[(`Pwidth - 1) - j];
        end
    end
    alt_aeuex_wide_crc32 = r;

//  $display("alt_aeuex_wide_crc32(%x, %x) = %x", p, ini, r);
end
endfunction
//----------------------------------------------------------------------------
// out = alt_aeuex_wide_network_order_48swap(in)
function [47:0] alt_aeuex_wide_network_order_48swap;
input   [47:0]  in;

integer width;
integer i;
begin
    width = 48;
    for (i = 0; i < width; i = i + 8) begin
        alt_aeuex_wide_network_order_48swap[i +: 8] = in[(width - 8 - i) +: 8];
    end
end
endfunction
//----------------------------------------------------------------------------
// out = alt_aeuex_wide_network_order_16swap(in)
function [15:0] alt_aeuex_wide_network_order_16swap;
input   [15:0]  in;

integer width;
integer i;
begin
    width = 16;
    for (i = 0; i < width; i = i + 8) begin
        alt_aeuex_wide_network_order_16swap[i +: 8] = in[(width - 8 - i) +: 8];
    end
end
endfunction

