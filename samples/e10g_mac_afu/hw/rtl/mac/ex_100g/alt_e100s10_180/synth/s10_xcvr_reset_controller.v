// s10_xcvr_reset_controller.v

// Generated using ACDS version 18.0.1 261

`timescale 1 ps / 1 ps
module s10_xcvr_reset_controller #(
		parameter CHANNELS           = 4,
		parameter PLLS               = 1,
		parameter SYS_CLK_IN_MHZ     = 100,
		parameter REDUCED_SIM_TIME   = 1,
		parameter ENABLE_DIGITAL_SEQ = 0,
		parameter TX_PLL_ENABLE      = 0,
		parameter T_PLL_POWERDOWN    = 1000,
		parameter TX_ENABLE          = 1,
		parameter TX_PER_CHANNEL     = 0,
		parameter TX_MANUAL_RESET    = 0,
		parameter T_TX_ANALOGRESET   = 0,
		parameter T_TX_DIGITALRESET  = 20,
		parameter T_PLL_LOCK_HYST    = 0,
		parameter EN_PLL_CAL_BUSY    = 0,
		parameter RX_ENABLE          = 1,
		parameter RX_PER_CHANNEL     = 0,
		parameter RX_MANUAL_RESET    = 0,
		parameter T_RX_ANALOGRESET   = 40,
		parameter T_RX_DIGITALRESET  = 5000
	) (
		input  wire                clock,                //                clock.clk
		input  wire                reset,                //                reset.reset
		output wire [CHANNELS-1:0] tx_analogreset,       //       tx_analogreset.tx_analogreset
		output wire [CHANNELS-1:0] tx_digitalreset,      //      tx_digitalreset.tx_digitalreset
		output wire [CHANNELS-1:0] tx_ready,             //             tx_ready.tx_ready
		input  wire [PLLS-1:0]     pll_locked,           //           pll_locked.pll_locked
		input  wire [0:0]          pll_select,           //           pll_select.pll_select
		input  wire [CHANNELS-1:0] tx_cal_busy,          //          tx_cal_busy.tx_cal_busy
		input  wire [CHANNELS-1:0] tx_analogreset_stat,  //  tx_analogreset_stat.tx_analogreset_stat
		input  wire [CHANNELS-1:0] tx_digitalreset_stat, // tx_digitalreset_stat.tx_digitalreset_stat
		output wire [CHANNELS-1:0] rx_analogreset,       //       rx_analogreset.rx_analogreset
		output wire [CHANNELS-1:0] rx_digitalreset,      //      rx_digitalreset.rx_digitalreset
		output wire [CHANNELS-1:0] rx_ready,             //             rx_ready.rx_ready
		input  wire [CHANNELS-1:0] rx_is_lockedtodata,   //   rx_is_lockedtodata.rx_is_lockedtodata
		input  wire [CHANNELS-1:0] rx_cal_busy,          //          rx_cal_busy.rx_cal_busy
		input  wire [CHANNELS-1:0] rx_analogreset_stat,  //  rx_analogreset_stat.rx_analogreset_stat
		input  wire [CHANNELS-1:0] rx_digitalreset_stat  // rx_digitalreset_stat.rx_digitalreset_stat
	);

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (CHANNELS != 4)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					channels_check ( .error(1'b1) );
		end
		if (PLLS != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					plls_check ( .error(1'b1) );
		end
		if (SYS_CLK_IN_MHZ != 100)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					sys_clk_in_mhz_check ( .error(1'b1) );
		end
		if (REDUCED_SIM_TIME != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					reduced_sim_time_check ( .error(1'b1) );
		end
		if (ENABLE_DIGITAL_SEQ != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					enable_digital_seq_check ( .error(1'b1) );
		end
		if (TX_PLL_ENABLE != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_pll_enable_check ( .error(1'b1) );
		end
		if (T_PLL_POWERDOWN != 1000)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					t_pll_powerdown_check ( .error(1'b1) );
		end
		if (TX_ENABLE != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_enable_check ( .error(1'b1) );
		end
		if (TX_PER_CHANNEL != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_per_channel_check ( .error(1'b1) );
		end
		if (TX_MANUAL_RESET != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_manual_reset_check ( .error(1'b1) );
		end
		if (T_TX_ANALOGRESET != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					t_tx_analogreset_check ( .error(1'b1) );
		end
		if (T_TX_DIGITALRESET != 20)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					t_tx_digitalreset_check ( .error(1'b1) );
		end
		if (T_PLL_LOCK_HYST != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					t_pll_lock_hyst_check ( .error(1'b1) );
		end
		if (EN_PLL_CAL_BUSY != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					en_pll_cal_busy_check ( .error(1'b1) );
		end
		if (RX_ENABLE != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_enable_check ( .error(1'b1) );
		end
		if (RX_PER_CHANNEL != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_per_channel_check ( .error(1'b1) );
		end
		if (RX_MANUAL_RESET != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_manual_reset_check ( .error(1'b1) );
		end
		if (T_RX_ANALOGRESET != 40)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					t_rx_analogreset_check ( .error(1'b1) );
		end
		if (T_RX_DIGITALRESET != 5000)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					t_rx_digitalreset_check ( .error(1'b1) );
		end
	endgenerate

	altera_xcvr_reset_control_s10 #(
		.CHANNELS           (4),
		.PLLS               (1),
		.SYS_CLK_IN_MHZ     (100),
		.REDUCED_SIM_TIME   (1),
		.ENABLE_DIGITAL_SEQ (0),
		.TX_PLL_ENABLE      (0),
		.T_PLL_POWERDOWN    (1000),
		.TX_ENABLE          (1),
		.TX_PER_CHANNEL     (0),
		.TX_MANUAL_RESET    (0),
		.T_TX_ANALOGRESET   (0),
		.T_TX_DIGITALRESET  (20),
		.T_PLL_LOCK_HYST    (0),
		.EN_PLL_CAL_BUSY    (0),
		.RX_ENABLE          (1),
		.RX_PER_CHANNEL     (0),
		.RX_MANUAL_RESET    (0),
		.T_RX_ANALOGRESET   (40),
		.T_RX_DIGITALRESET  (5000)
	) s10_xcvr_reset_controller (
		.clock                (clock),                //   input,  width = 1,                clock.clk
		.reset                (reset),                //   input,  width = 1,                reset.reset
		.tx_analogreset       (tx_analogreset),       //  output,  width = 4,       tx_analogreset.tx_analogreset
		.tx_digitalreset      (tx_digitalreset),      //  output,  width = 4,      tx_digitalreset.tx_digitalreset
		.tx_ready             (tx_ready),             //  output,  width = 4,             tx_ready.tx_ready
		.pll_locked           (pll_locked),           //   input,  width = 1,           pll_locked.pll_locked
		.pll_select           (pll_select),           //   input,  width = 1,           pll_select.pll_select
		.tx_cal_busy          (tx_cal_busy),          //   input,  width = 4,          tx_cal_busy.tx_cal_busy
		.tx_analogreset_stat  (tx_analogreset_stat),  //   input,  width = 4,  tx_analogreset_stat.tx_analogreset_stat
		.tx_digitalreset_stat (tx_digitalreset_stat), //   input,  width = 4, tx_digitalreset_stat.tx_digitalreset_stat
		.rx_analogreset       (rx_analogreset),       //  output,  width = 4,       rx_analogreset.rx_analogreset
		.rx_digitalreset      (rx_digitalreset),      //  output,  width = 4,      rx_digitalreset.rx_digitalreset
		.rx_ready             (rx_ready),             //  output,  width = 4,             rx_ready.rx_ready
		.rx_is_lockedtodata   (rx_is_lockedtodata),   //   input,  width = 4,   rx_is_lockedtodata.rx_is_lockedtodata
		.rx_cal_busy          (rx_cal_busy),          //   input,  width = 4,          rx_cal_busy.rx_cal_busy
		.rx_analogreset_stat  (rx_analogreset_stat),  //   input,  width = 4,  rx_analogreset_stat.rx_analogreset_stat
		.rx_digitalreset_stat (rx_digitalreset_stat), //   input,  width = 4, rx_digitalreset_stat.rx_digitalreset_stat
		.pll_powerdown        (),                     // (terminated),                                  
		.pll_cal_busy         (1'b0),                 // (terminated),                                  
		.tx_digitalreset_or   (4'b0000),              // (terminated),                                  
		.rx_digitalreset_or   (4'b0000)               // (terminated),                                  
	);

endmodule
