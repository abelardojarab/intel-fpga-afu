// address_decode_altera_mm_interconnect_170_o4jemda.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 290

`timescale 1 ps / 1 ps
module address_decode_altera_mm_interconnect_170_o4jemda (
		input  wire        clk_csr_clk_clk,                                                    //                                            clk_csr_clk.clk
		output wire [13:0] eth_gen_mon_avalon_universal_slave_0_address,                       //                   eth_gen_mon_avalon_universal_slave_0.address
		output wire        eth_gen_mon_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        eth_gen_mon_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] eth_gen_mon_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] eth_gen_mon_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  eth_gen_mon_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        eth_gen_mon_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        eth_gen_mon_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        eth_gen_mon_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        eth_gen_mon_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		input  wire [31:0] merlin_master_translator_0_avalon_universal_master_0_address,       //   merlin_master_translator_0_avalon_universal_master_0.address
		output wire        merlin_master_translator_0_avalon_universal_master_0_waitrequest,   //                                                       .waitrequest
		input  wire [9:0]  merlin_master_translator_0_avalon_universal_master_0_burstcount,    //                                                       .burstcount
		input  wire [3:0]  merlin_master_translator_0_avalon_universal_master_0_byteenable,    //                                                       .byteenable
		input  wire        merlin_master_translator_0_avalon_universal_master_0_read,          //                                                       .read
		output wire [31:0] merlin_master_translator_0_avalon_universal_master_0_readdata,      //                                                       .readdata
		output wire        merlin_master_translator_0_avalon_universal_master_0_readdatavalid, //                                                       .readdatavalid
		input  wire        merlin_master_translator_0_avalon_universal_master_0_write,         //                                                       .write
		input  wire [31:0] merlin_master_translator_0_avalon_universal_master_0_writedata,     //                                                       .writedata
		input  wire        merlin_master_translator_0_avalon_universal_master_0_lock,          //                                                       .lock
		input  wire        merlin_master_translator_0_avalon_universal_master_0_debugaccess,   //                                                       .debugaccess
		input  wire        merlin_master_translator_0_reset_reset_bridge_in_reset_reset,       // merlin_master_translator_0_reset_reset_bridge_in_reset.reset
		output wire [14:0] mm_to_mac_avalon_universal_slave_0_address,                         //                     mm_to_mac_avalon_universal_slave_0.address
		output wire        mm_to_mac_avalon_universal_slave_0_write,                           //                                                       .write
		output wire        mm_to_mac_avalon_universal_slave_0_read,                            //                                                       .read
		input  wire [31:0] mm_to_mac_avalon_universal_slave_0_readdata,                        //                                                       .readdata
		output wire [31:0] mm_to_mac_avalon_universal_slave_0_writedata,                       //                                                       .writedata
		output wire [3:0]  mm_to_mac_avalon_universal_slave_0_burstcount,                      //                                                       .burstcount
		output wire [3:0]  mm_to_mac_avalon_universal_slave_0_byteenable,                      //                                                       .byteenable
		input  wire        mm_to_mac_avalon_universal_slave_0_readdatavalid,                   //                                                       .readdatavalid
		input  wire        mm_to_mac_avalon_universal_slave_0_waitrequest,                     //                                                       .waitrequest
		output wire        mm_to_mac_avalon_universal_slave_0_lock,                            //                                                       .lock
		output wire        mm_to_mac_avalon_universal_slave_0_debugaccess,                     //                                                       .debugaccess
		output wire [11:0] mm_to_phy_avalon_universal_slave_0_address,                         //                     mm_to_phy_avalon_universal_slave_0.address
		output wire        mm_to_phy_avalon_universal_slave_0_write,                           //                                                       .write
		output wire        mm_to_phy_avalon_universal_slave_0_read,                            //                                                       .read
		input  wire [31:0] mm_to_phy_avalon_universal_slave_0_readdata,                        //                                                       .readdata
		output wire [31:0] mm_to_phy_avalon_universal_slave_0_writedata,                       //                                                       .writedata
		output wire [3:0]  mm_to_phy_avalon_universal_slave_0_burstcount,                      //                                                       .burstcount
		output wire [3:0]  mm_to_phy_avalon_universal_slave_0_byteenable,                      //                                                       .byteenable
		input  wire        mm_to_phy_avalon_universal_slave_0_readdatavalid,                   //                                                       .readdatavalid
		input  wire        mm_to_phy_avalon_universal_slave_0_waitrequest,                     //                                                       .waitrequest
		output wire        mm_to_phy_avalon_universal_slave_0_lock,                            //                                                       .lock
		output wire        mm_to_phy_avalon_universal_slave_0_debugaccess,                     //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_avalon_universal_slave_0_address,                        //                    rx_sc_fifo_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_avalon_universal_slave_0_write,                          //                                                       .write
		output wire        rx_sc_fifo_avalon_universal_slave_0_read,                           //                                                       .read
		input  wire [31:0] rx_sc_fifo_avalon_universal_slave_0_readdata,                       //                                                       .readdata
		output wire [31:0] rx_sc_fifo_avalon_universal_slave_0_writedata,                      //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_avalon_universal_slave_0_burstcount,                     //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_avalon_universal_slave_0_byteenable,                     //                                                       .byteenable
		input  wire        rx_sc_fifo_avalon_universal_slave_0_readdatavalid,                  //                                                       .readdatavalid
		input  wire        rx_sc_fifo_avalon_universal_slave_0_waitrequest,                    //                                                       .waitrequest
		output wire        rx_sc_fifo_avalon_universal_slave_0_lock,                           //                                                       .lock
		output wire        rx_sc_fifo_avalon_universal_slave_0_debugaccess,                    //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_avalon_universal_slave_0_address,                        //                    tx_sc_fifo_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_avalon_universal_slave_0_write,                          //                                                       .write
		output wire        tx_sc_fifo_avalon_universal_slave_0_read,                           //                                                       .read
		input  wire [31:0] tx_sc_fifo_avalon_universal_slave_0_readdata,                       //                                                       .readdata
		output wire [31:0] tx_sc_fifo_avalon_universal_slave_0_writedata,                      //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_avalon_universal_slave_0_burstcount,                     //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_avalon_universal_slave_0_byteenable,                     //                                                       .byteenable
		input  wire        tx_sc_fifo_avalon_universal_slave_0_readdatavalid,                  //                                                       .readdatavalid
		input  wire        tx_sc_fifo_avalon_universal_slave_0_waitrequest,                    //                                                       .waitrequest
		output wire        tx_sc_fifo_avalon_universal_slave_0_lock,                           //                                                       .lock
		output wire        tx_sc_fifo_avalon_universal_slave_0_debugaccess,                    //                                                       .debugaccess
		input  wire        tx_sc_fifo_reset_reset_bridge_in_reset_reset,                       //                 tx_sc_fifo_reset_reset_bridge_in_reset.reset
		input  wire        tx_xcvr_half_clk_clk_clk                                            //                                   tx_xcvr_half_clk_clk.clk
	);

	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest;   // merlin_master_translator_0_avalon_universal_master_0_agent:av_waitrequest -> merlin_master_translator_0_avalon_universal_master_0_translator:uav_waitrequest
	wire   [31:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdata;      // merlin_master_translator_0_avalon_universal_master_0_agent:av_readdata -> merlin_master_translator_0_avalon_universal_master_0_translator:uav_readdata
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess;   // merlin_master_translator_0_avalon_universal_master_0_translator:uav_debugaccess -> merlin_master_translator_0_avalon_universal_master_0_agent:av_debugaccess
	wire   [31:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_address;       // merlin_master_translator_0_avalon_universal_master_0_translator:uav_address -> merlin_master_translator_0_avalon_universal_master_0_agent:av_address
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_read;          // merlin_master_translator_0_avalon_universal_master_0_translator:uav_read -> merlin_master_translator_0_avalon_universal_master_0_agent:av_read
	wire    [3:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable;    // merlin_master_translator_0_avalon_universal_master_0_translator:uav_byteenable -> merlin_master_translator_0_avalon_universal_master_0_agent:av_byteenable
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid; // merlin_master_translator_0_avalon_universal_master_0_agent:av_readdatavalid -> merlin_master_translator_0_avalon_universal_master_0_translator:uav_readdatavalid
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_lock;          // merlin_master_translator_0_avalon_universal_master_0_translator:uav_lock -> merlin_master_translator_0_avalon_universal_master_0_agent:av_lock
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_write;         // merlin_master_translator_0_avalon_universal_master_0_translator:uav_write -> merlin_master_translator_0_avalon_universal_master_0_agent:av_write
	wire   [31:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_writedata;     // merlin_master_translator_0_avalon_universal_master_0_translator:uav_writedata -> merlin_master_translator_0_avalon_universal_master_0_agent:av_writedata
	wire    [9:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount;    // merlin_master_translator_0_avalon_universal_master_0_translator:uav_burstcount -> merlin_master_translator_0_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] mm_to_mac_avalon_universal_slave_0_agent_m0_readdata;                                                    // mm_to_mac_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_avalon_universal_slave_0_agent_m0_waitrequest;                                                 // mm_to_mac_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_avalon_universal_slave_0_agent_m0_debugaccess;                                                 // mm_to_mac_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_avalon_universal_slave_0_agent_m0_address;                                                     // mm_to_mac_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_avalon_universal_slave_0_agent_m0_byteenable;                                                  // mm_to_mac_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_avalon_universal_slave_0_agent_m0_read;                                                        // mm_to_mac_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_avalon_universal_slave_0_agent_m0_readdatavalid;                                               // mm_to_mac_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_avalon_universal_slave_0_agent_m0_lock;                                                        // mm_to_mac_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_avalon_universal_slave_0_agent_m0_writedata;                                                   // mm_to_mac_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_avalon_universal_slave_0_agent_m0_write;                                                       // mm_to_mac_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_avalon_universal_slave_0_agent_m0_burstcount;                                                  // mm_to_mac_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_avalon_universal_slave_0_agent_rf_source_valid;                                                // mm_to_mac_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [113:0] mm_to_mac_avalon_universal_slave_0_agent_rf_source_data;                                                 // mm_to_mac_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_avalon_universal_slave_0_agent_rf_source_ready;                                                // mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_avalon_universal_slave_0_agent_rf_source_startofpacket;                                        // mm_to_mac_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_avalon_universal_slave_0_agent_rf_source_endofpacket;                                          // mm_to_mac_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                             // mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [113:0] mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                              // mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                             // mm_to_mac_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                     // mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                       // mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire   [31:0] mm_to_phy_avalon_universal_slave_0_agent_m0_readdata;                                                    // mm_to_phy_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_avalon_universal_slave_0_agent_m0_waitrequest;                                                 // mm_to_phy_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_avalon_universal_slave_0_agent_m0_debugaccess;                                                 // mm_to_phy_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_avalon_universal_slave_0_agent_m0_address;                                                     // mm_to_phy_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_avalon_universal_slave_0_agent_m0_byteenable;                                                  // mm_to_phy_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_avalon_universal_slave_0_agent_m0_read;                                                        // mm_to_phy_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_avalon_universal_slave_0_agent_m0_readdatavalid;                                               // mm_to_phy_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_avalon_universal_slave_0_agent_m0_lock;                                                        // mm_to_phy_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_avalon_universal_slave_0_agent_m0_writedata;                                                   // mm_to_phy_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_avalon_universal_slave_0_agent_m0_write;                                                       // mm_to_phy_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_avalon_universal_slave_0_agent_m0_burstcount;                                                  // mm_to_phy_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_avalon_universal_slave_0_agent_rf_source_valid;                                                // mm_to_phy_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [113:0] mm_to_phy_avalon_universal_slave_0_agent_rf_source_data;                                                 // mm_to_phy_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_avalon_universal_slave_0_agent_rf_source_ready;                                                // mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_avalon_universal_slave_0_agent_rf_source_startofpacket;                                        // mm_to_phy_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_avalon_universal_slave_0_agent_rf_source_endofpacket;                                          // mm_to_phy_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                             // mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [113:0] mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                              // mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                             // mm_to_phy_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                     // mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                       // mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire   [31:0] tx_sc_fifo_avalon_universal_slave_0_agent_m0_readdata;                                                   // tx_sc_fifo_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_m0_waitrequest;                                                // tx_sc_fifo_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_m0_debugaccess;                                                // tx_sc_fifo_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_avalon_universal_slave_0_agent_m0_address;                                                    // tx_sc_fifo_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_avalon_universal_slave_0_agent_m0_byteenable;                                                 // tx_sc_fifo_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_m0_read;                                                       // tx_sc_fifo_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_m0_readdatavalid;                                              // tx_sc_fifo_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_m0_lock;                                                       // tx_sc_fifo_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_avalon_universal_slave_0_agent_m0_writedata;                                                  // tx_sc_fifo_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_m0_write;                                                      // tx_sc_fifo_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_avalon_universal_slave_0_agent_m0_burstcount;                                                 // tx_sc_fifo_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_valid;                                               // tx_sc_fifo_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [113:0] tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_data;                                                // tx_sc_fifo_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_ready;                                               // tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_startofpacket;                                       // tx_sc_fifo_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_endofpacket;                                         // tx_sc_fifo_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                            // tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [113:0] tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                             // tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                            // tx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                    // tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                      // tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                          // tx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                           // tx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                          // tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_avalon_universal_slave_0_agent_m0_readdata;                                                   // rx_sc_fifo_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_m0_waitrequest;                                                // rx_sc_fifo_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_m0_debugaccess;                                                // rx_sc_fifo_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_avalon_universal_slave_0_agent_m0_address;                                                    // rx_sc_fifo_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_avalon_universal_slave_0_agent_m0_byteenable;                                                 // rx_sc_fifo_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_m0_read;                                                       // rx_sc_fifo_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_m0_readdatavalid;                                              // rx_sc_fifo_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_m0_lock;                                                       // rx_sc_fifo_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_avalon_universal_slave_0_agent_m0_writedata;                                                  // rx_sc_fifo_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_m0_write;                                                      // rx_sc_fifo_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_avalon_universal_slave_0_agent_m0_burstcount;                                                 // rx_sc_fifo_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_valid;                                               // rx_sc_fifo_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [113:0] rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_data;                                                // rx_sc_fifo_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_ready;                                               // rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_startofpacket;                                       // rx_sc_fifo_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_endofpacket;                                         // rx_sc_fifo_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                            // rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [113:0] rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                             // rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                            // rx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                    // rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                      // rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                          // rx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                           // rx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                          // rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] eth_gen_mon_avalon_universal_slave_0_agent_m0_readdata;                                                  // eth_gen_mon_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_avalon_universal_slave_0_agent_m0_waitrequest;                                               // eth_gen_mon_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_avalon_universal_slave_0_agent_m0_debugaccess;                                               // eth_gen_mon_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_avalon_universal_slave_0_agent_m0_address;                                                   // eth_gen_mon_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_avalon_universal_slave_0_agent_m0_byteenable;                                                // eth_gen_mon_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_avalon_universal_slave_0_agent_m0_read;                                                      // eth_gen_mon_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // eth_gen_mon_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_avalon_universal_slave_0_agent_m0_lock;                                                      // eth_gen_mon_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_avalon_universal_slave_0_agent_m0_writedata;                                                 // eth_gen_mon_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_avalon_universal_slave_0_agent_m0_write;                                                     // eth_gen_mon_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_avalon_universal_slave_0_agent_m0_burstcount;                                                // eth_gen_mon_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rf_source_valid;                                              // eth_gen_mon_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [113:0] eth_gen_mon_avalon_universal_slave_0_agent_rf_source_data;                                               // eth_gen_mon_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rf_source_ready;                                              // eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // eth_gen_mon_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // eth_gen_mon_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [113:0] eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // eth_gen_mon_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // eth_gen_mon_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // eth_gen_mon_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_valid;                                     // merlin_master_translator_0_avalon_universal_master_0_agent:cp_valid -> router:sink_valid
	wire  [112:0] merlin_master_translator_0_avalon_universal_master_0_agent_cp_data;                                      // merlin_master_translator_0_avalon_universal_master_0_agent:cp_data -> router:sink_data
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_ready;                                     // router:sink_ready -> merlin_master_translator_0_avalon_universal_master_0_agent:cp_ready
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_startofpacket;                             // merlin_master_translator_0_avalon_universal_master_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_endofpacket;                               // merlin_master_translator_0_avalon_universal_master_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mm_to_mac_avalon_universal_slave_0_agent_rp_valid;                                                       // mm_to_mac_avalon_universal_slave_0_agent:rp_valid -> router_001:sink_valid
	wire  [112:0] mm_to_mac_avalon_universal_slave_0_agent_rp_data;                                                        // mm_to_mac_avalon_universal_slave_0_agent:rp_data -> router_001:sink_data
	wire          mm_to_mac_avalon_universal_slave_0_agent_rp_ready;                                                       // router_001:sink_ready -> mm_to_mac_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_avalon_universal_slave_0_agent_rp_startofpacket;                                               // mm_to_mac_avalon_universal_slave_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          mm_to_mac_avalon_universal_slave_0_agent_rp_endofpacket;                                                 // mm_to_mac_avalon_universal_slave_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [112:0] router_001_src_data;                                                                                     // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          mm_to_phy_avalon_universal_slave_0_agent_rp_valid;                                                       // mm_to_phy_avalon_universal_slave_0_agent:rp_valid -> router_002:sink_valid
	wire  [112:0] mm_to_phy_avalon_universal_slave_0_agent_rp_data;                                                        // mm_to_phy_avalon_universal_slave_0_agent:rp_data -> router_002:sink_data
	wire          mm_to_phy_avalon_universal_slave_0_agent_rp_ready;                                                       // router_002:sink_ready -> mm_to_phy_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_avalon_universal_slave_0_agent_rp_startofpacket;                                               // mm_to_phy_avalon_universal_slave_0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          mm_to_phy_avalon_universal_slave_0_agent_rp_endofpacket;                                                 // mm_to_phy_avalon_universal_slave_0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                    // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [112:0] router_002_src_data;                                                                                     // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                                                    // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                                                  // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                                            // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                              // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rp_valid;                                                      // tx_sc_fifo_avalon_universal_slave_0_agent:rp_valid -> router_003:sink_valid
	wire  [112:0] tx_sc_fifo_avalon_universal_slave_0_agent_rp_data;                                                       // tx_sc_fifo_avalon_universal_slave_0_agent:rp_data -> router_003:sink_data
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rp_ready;                                                      // router_003:sink_ready -> tx_sc_fifo_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rp_startofpacket;                                              // tx_sc_fifo_avalon_universal_slave_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rp_endofpacket;                                                // tx_sc_fifo_avalon_universal_slave_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                    // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [112:0] router_003_src_data;                                                                                     // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                                                    // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                                                  // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                                                            // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                              // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rp_valid;                                                      // rx_sc_fifo_avalon_universal_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [112:0] rx_sc_fifo_avalon_universal_slave_0_agent_rp_data;                                                       // rx_sc_fifo_avalon_universal_slave_0_agent:rp_data -> router_004:sink_data
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rp_ready;                                                      // router_004:sink_ready -> rx_sc_fifo_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rp_startofpacket;                                              // rx_sc_fifo_avalon_universal_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rp_endofpacket;                                                // rx_sc_fifo_avalon_universal_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                    // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [112:0] router_004_src_data;                                                                                     // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                                                    // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                                                  // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                                                            // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                              // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rp_valid;                                                     // eth_gen_mon_avalon_universal_slave_0_agent:rp_valid -> router_005:sink_valid
	wire  [112:0] eth_gen_mon_avalon_universal_slave_0_agent_rp_data;                                                      // eth_gen_mon_avalon_universal_slave_0_agent:rp_data -> router_005:sink_data
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rp_ready;                                                     // router_005:sink_ready -> eth_gen_mon_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rp_startofpacket;                                             // eth_gen_mon_avalon_universal_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rp_endofpacket;                                               // eth_gen_mon_avalon_universal_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                    // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [112:0] router_005_src_data;                                                                                     // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                                                    // rsp_demux_004:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                                                  // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                                                            // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                              // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_src_valid;                                                                                        // router:src_valid -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_valid
	wire  [112:0] router_src_data;                                                                                         // router:src_data -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                        // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                                                      // router:src_channel -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                                // router:src_startofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                                  // router:src_endofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_endofpacket
	wire  [112:0] merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_data;                               // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_ready
	wire    [4:0] merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_channel;                            // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_startofpacket;                      // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_endofpacket;                        // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                       // rsp_mux:src_valid -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_valid
	wire  [112:0] rsp_mux_src_data;                                                                                        // rsp_mux:src_data -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                                       // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                                                     // rsp_mux:src_channel -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                               // rsp_mux:src_startofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                 // rsp_mux:src_endofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_endofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_valid;                              // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_valid -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_valid
	wire  [112:0] merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_data;                               // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_data -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_data
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_ready;                              // merlin_master_translator_0_avalon_universal_master_0_agent:rp_ready -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_ready
	wire    [4:0] merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_channel;                            // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_channel -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_channel
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_startofpacket;                      // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_startofpacket -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_startofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_endofpacket;                        // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_endofpacket -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                       // cmd_mux:src_valid -> mm_to_mac_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_src_data;                                                                                        // cmd_mux:src_data -> mm_to_mac_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                       // mm_to_mac_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                                                     // cmd_mux:src_channel -> mm_to_mac_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                               // cmd_mux:src_startofpacket -> mm_to_mac_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                 // cmd_mux:src_endofpacket -> mm_to_mac_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_valid;                                          // mm_to_mac_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_avalon_universal_slave_0_agent:cp_valid
	wire  [112:0] mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_data;                                           // mm_to_mac_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_ready;                                          // mm_to_mac_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_avalon_universal_slave_0_burst_adapter:source0_ready
	wire    [4:0] mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_channel;                                        // mm_to_mac_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                  // mm_to_mac_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                    // mm_to_mac_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                   // cmd_mux_001:src_valid -> mm_to_phy_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_001_src_data;                                                                                    // cmd_mux_001:src_data -> mm_to_phy_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                                   // mm_to_phy_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                                                 // cmd_mux_001:src_channel -> mm_to_phy_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                           // cmd_mux_001:src_startofpacket -> mm_to_phy_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                             // cmd_mux_001:src_endofpacket -> mm_to_phy_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_valid;                                          // mm_to_phy_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_avalon_universal_slave_0_agent:cp_valid
	wire  [112:0] mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_data;                                           // mm_to_phy_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_ready;                                          // mm_to_phy_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_avalon_universal_slave_0_burst_adapter:source0_ready
	wire    [4:0] mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_channel;                                        // mm_to_phy_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                  // mm_to_phy_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                    // mm_to_phy_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                   // cmd_mux_002:src_valid -> tx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_002_src_data;                                                                                    // cmd_mux_002:src_data -> tx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                                   // tx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                                                 // cmd_mux_002:src_channel -> tx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                           // cmd_mux_002:src_startofpacket -> tx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                             // cmd_mux_002:src_endofpacket -> tx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_valid;                                         // tx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_avalon_universal_slave_0_agent:cp_valid
	wire  [112:0] tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_data;                                          // tx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_ready;                                         // tx_sc_fifo_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_ready
	wire    [4:0] tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_channel;                                       // tx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                 // tx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                   // tx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                   // cmd_mux_003:src_valid -> rx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_003_src_data;                                                                                    // cmd_mux_003:src_data -> rx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                                   // rx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                                                 // cmd_mux_003:src_channel -> rx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                                           // cmd_mux_003:src_startofpacket -> rx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                             // cmd_mux_003:src_endofpacket -> rx_sc_fifo_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_valid;                                         // rx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_avalon_universal_slave_0_agent:cp_valid
	wire  [112:0] rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_data;                                          // rx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_ready;                                         // rx_sc_fifo_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_ready
	wire    [4:0] rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_channel;                                       // rx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                 // rx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                   // rx_sc_fifo_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                   // cmd_mux_004:src_valid -> eth_gen_mon_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_004_src_data;                                                                                    // cmd_mux_004:src_data -> eth_gen_mon_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                                   // eth_gen_mon_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                                                 // cmd_mux_004:src_channel -> eth_gen_mon_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                                           // cmd_mux_004:src_startofpacket -> eth_gen_mon_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                             // cmd_mux_004:src_endofpacket -> eth_gen_mon_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // eth_gen_mon_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_avalon_universal_slave_0_agent:cp_valid
	wire  [112:0] eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_data;                                         // eth_gen_mon_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // eth_gen_mon_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_avalon_universal_slave_0_burst_adapter:source0_ready
	wire    [4:0] eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // eth_gen_mon_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // eth_gen_mon_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // eth_gen_mon_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [112:0] cmd_demux_src0_data;                                                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [112:0] cmd_demux_src1_data;                                                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [112:0] rsp_demux_src0_data;                                                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [112:0] rsp_demux_001_src0_data;                                                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          cmd_demux_src2_valid;                                                                                    // cmd_demux:src2_valid -> crosser:in_valid
	wire  [112:0] cmd_demux_src2_data;                                                                                     // cmd_demux:src2_data -> crosser:in_data
	wire          cmd_demux_src2_ready;                                                                                    // crosser:in_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                                                                  // cmd_demux:src2_channel -> crosser:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                            // cmd_demux:src2_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                              // cmd_demux:src2_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                                       // crosser:out_valid -> cmd_mux_002:sink0_valid
	wire  [112:0] crosser_out_data;                                                                                        // crosser:out_data -> cmd_mux_002:sink0_data
	wire          crosser_out_ready;                                                                                       // cmd_mux_002:sink0_ready -> crosser:out_ready
	wire    [4:0] crosser_out_channel;                                                                                     // crosser:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_out_startofpacket;                                                                               // crosser:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                                 // crosser:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                                    // cmd_demux:src3_valid -> crosser_001:in_valid
	wire  [112:0] cmd_demux_src3_data;                                                                                     // cmd_demux:src3_data -> crosser_001:in_data
	wire          cmd_demux_src3_ready;                                                                                    // crosser_001:in_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                                                                  // cmd_demux:src3_channel -> crosser_001:in_channel
	wire          cmd_demux_src3_startofpacket;                                                                            // cmd_demux:src3_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                              // cmd_demux:src3_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                                   // crosser_001:out_valid -> cmd_mux_003:sink0_valid
	wire  [112:0] crosser_001_out_data;                                                                                    // crosser_001:out_data -> cmd_mux_003:sink0_data
	wire          crosser_001_out_ready;                                                                                   // cmd_mux_003:sink0_ready -> crosser_001:out_ready
	wire    [4:0] crosser_001_out_channel;                                                                                 // crosser_001:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                           // crosser_001:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                             // crosser_001:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                                    // cmd_demux:src4_valid -> crosser_002:in_valid
	wire  [112:0] cmd_demux_src4_data;                                                                                     // cmd_demux:src4_data -> crosser_002:in_data
	wire          cmd_demux_src4_ready;                                                                                    // crosser_002:in_ready -> cmd_demux:src4_ready
	wire    [4:0] cmd_demux_src4_channel;                                                                                  // cmd_demux:src4_channel -> crosser_002:in_channel
	wire          cmd_demux_src4_startofpacket;                                                                            // cmd_demux:src4_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                              // cmd_demux:src4_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                                   // crosser_002:out_valid -> cmd_mux_004:sink0_valid
	wire  [112:0] crosser_002_out_data;                                                                                    // crosser_002:out_data -> cmd_mux_004:sink0_data
	wire          crosser_002_out_ready;                                                                                   // cmd_mux_004:sink0_ready -> crosser_002:out_ready
	wire    [4:0] crosser_002_out_channel;                                                                                 // crosser_002:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_002_out_startofpacket;                                                                           // crosser_002:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                             // crosser_002:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                // rsp_demux_002:src0_valid -> crosser_003:in_valid
	wire  [112:0] rsp_demux_002_src0_data;                                                                                 // rsp_demux_002:src0_data -> crosser_003:in_data
	wire          rsp_demux_002_src0_ready;                                                                                // crosser_003:in_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                                              // rsp_demux_002:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                        // rsp_demux_002:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                          // rsp_demux_002:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                                   // crosser_003:out_valid -> rsp_mux:sink2_valid
	wire  [112:0] crosser_003_out_data;                                                                                    // crosser_003:out_data -> rsp_mux:sink2_data
	wire          crosser_003_out_ready;                                                                                   // rsp_mux:sink2_ready -> crosser_003:out_ready
	wire    [4:0] crosser_003_out_channel;                                                                                 // crosser_003:out_channel -> rsp_mux:sink2_channel
	wire          crosser_003_out_startofpacket;                                                                           // crosser_003:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_003_out_endofpacket;                                                                             // crosser_003:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                // rsp_demux_003:src0_valid -> crosser_004:in_valid
	wire  [112:0] rsp_demux_003_src0_data;                                                                                 // rsp_demux_003:src0_data -> crosser_004:in_data
	wire          rsp_demux_003_src0_ready;                                                                                // crosser_004:in_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                                              // rsp_demux_003:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                        // rsp_demux_003:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                          // rsp_demux_003:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                                   // crosser_004:out_valid -> rsp_mux:sink3_valid
	wire  [112:0] crosser_004_out_data;                                                                                    // crosser_004:out_data -> rsp_mux:sink3_data
	wire          crosser_004_out_ready;                                                                                   // rsp_mux:sink3_ready -> crosser_004:out_ready
	wire    [4:0] crosser_004_out_channel;                                                                                 // crosser_004:out_channel -> rsp_mux:sink3_channel
	wire          crosser_004_out_startofpacket;                                                                           // crosser_004:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_004_out_endofpacket;                                                                             // crosser_004:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                // rsp_demux_004:src0_valid -> crosser_005:in_valid
	wire  [112:0] rsp_demux_004_src0_data;                                                                                 // rsp_demux_004:src0_data -> crosser_005:in_data
	wire          rsp_demux_004_src0_ready;                                                                                // crosser_005:in_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                                              // rsp_demux_004:src0_channel -> crosser_005:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                        // rsp_demux_004:src0_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                          // rsp_demux_004:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                                   // crosser_005:out_valid -> rsp_mux:sink4_valid
	wire  [112:0] crosser_005_out_data;                                                                                    // crosser_005:out_data -> rsp_mux:sink4_data
	wire          crosser_005_out_ready;                                                                                   // rsp_mux:sink4_ready -> crosser_005:out_ready
	wire    [4:0] crosser_005_out_channel;                                                                                 // crosser_005:out_channel -> rsp_mux:sink4_channel
	wire          crosser_005_out_startofpacket;                                                                           // crosser_005:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_005_out_endofpacket;                                                                             // crosser_005:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire    [4:0] merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_valid_data;                             // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                           // mm_to_mac_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                            // mm_to_mac_avalon_universal_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter:in_0_ready -> mm_to_mac_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                                           // avalon_st_adapter:out_0_valid -> mm_to_mac_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                                            // avalon_st_adapter:out_0_data -> mm_to_mac_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                           // mm_to_mac_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                           // avalon_st_adapter:out_0_error -> mm_to_mac_avalon_universal_slave_0_agent:rdata_fifo_sink_error
	wire          mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                           // mm_to_phy_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                            // mm_to_phy_avalon_universal_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_001:in_0_ready -> mm_to_phy_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                       // avalon_st_adapter_001:out_0_valid -> mm_to_phy_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                                        // avalon_st_adapter_001:out_0_data -> mm_to_phy_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                       // mm_to_phy_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                       // avalon_st_adapter_001:out_0_error -> mm_to_phy_avalon_universal_slave_0_agent:rdata_fifo_sink_error
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                          // tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                           // tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_002:in_0_ready -> tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                       // avalon_st_adapter_002:out_0_valid -> tx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                        // avalon_st_adapter_002:out_0_data -> tx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                       // tx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                       // avalon_st_adapter_002:out_0_error -> tx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_error
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                          // rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                           // rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_003:in_0_ready -> rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                       // avalon_st_adapter_003:out_0_valid -> rx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                        // avalon_st_adapter_003:out_0_data -> rx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                       // rx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                       // avalon_st_adapter_003:out_0_error -> rx_sc_fifo_avalon_universal_slave_0_agent:rdata_fifo_sink_error
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                         // eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                          // eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_004:in_0_ready -> eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                       // avalon_st_adapter_004:out_0_valid -> eth_gen_mon_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                        // avalon_st_adapter_004:out_0_data -> eth_gen_mon_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                       // eth_gen_mon_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                       // avalon_st_adapter_004:out_0_error -> eth_gen_mon_avalon_universal_slave_0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (10),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (1),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) merlin_master_translator_0_avalon_universal_master_0_translator (
		.clk                    (clk_csr_clk_clk),                                                                                         //                       clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                                            //                     reset.reset
		.uav_address            (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (merlin_master_translator_0_avalon_universal_master_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (merlin_master_translator_0_avalon_universal_master_0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (merlin_master_translator_0_avalon_universal_master_0_burstcount),                                         //                          .burstcount
		.av_byteenable          (merlin_master_translator_0_avalon_universal_master_0_byteenable),                                         //                          .byteenable
		.av_read                (merlin_master_translator_0_avalon_universal_master_0_read),                                               //                          .read
		.av_readdata            (merlin_master_translator_0_avalon_universal_master_0_readdata),                                           //                          .readdata
		.av_readdatavalid       (merlin_master_translator_0_avalon_universal_master_0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (merlin_master_translator_0_avalon_universal_master_0_write),                                              //                          .write
		.av_writedata           (merlin_master_translator_0_avalon_universal_master_0_writedata),                                          //                          .writedata
		.av_lock                (merlin_master_translator_0_avalon_universal_master_0_lock),                                               //                          .lock
		.av_debugaccess         (merlin_master_translator_0_avalon_universal_master_0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                                    //               (terminated)
		.uav_clken              (),                                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                                   //               (terminated)
		.av_response            (),                                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_to_mac_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mm_to_mac_avalon_universal_slave_0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_avalon_universal_slave_0_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (mm_to_mac_avalon_universal_slave_0_agent_m0_read),             //                         .read
		.uav_write              (mm_to_mac_avalon_universal_slave_0_agent_m0_write),            //                         .write
		.uav_waitrequest        (mm_to_mac_avalon_universal_slave_0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_avalon_universal_slave_0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (mm_to_mac_avalon_universal_slave_0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (mm_to_mac_avalon_universal_slave_0_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (mm_to_mac_avalon_universal_slave_0_agent_m0_writedata),        //                         .writedata
		.uav_lock               (mm_to_mac_avalon_universal_slave_0_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (mm_to_mac_avalon_universal_slave_0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (mm_to_mac_avalon_universal_slave_0_address),                   //      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_avalon_universal_slave_0_write),                     //                         .write
		.av_read                (mm_to_mac_avalon_universal_slave_0_read),                      //                         .read
		.av_readdata            (mm_to_mac_avalon_universal_slave_0_readdata),                  //                         .readdata
		.av_writedata           (mm_to_mac_avalon_universal_slave_0_writedata),                 //                         .writedata
		.av_burstcount          (mm_to_mac_avalon_universal_slave_0_burstcount),                //                         .burstcount
		.av_byteenable          (mm_to_mac_avalon_universal_slave_0_byteenable),                //                         .byteenable
		.av_readdatavalid       (mm_to_mac_avalon_universal_slave_0_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (mm_to_mac_avalon_universal_slave_0_waitrequest),               //                         .waitrequest
		.av_lock                (mm_to_mac_avalon_universal_slave_0_lock),                      //                         .lock
		.av_debugaccess         (mm_to_mac_avalon_universal_slave_0_debugaccess),               //                         .debugaccess
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_to_phy_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mm_to_phy_avalon_universal_slave_0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_avalon_universal_slave_0_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (mm_to_phy_avalon_universal_slave_0_agent_m0_read),             //                         .read
		.uav_write              (mm_to_phy_avalon_universal_slave_0_agent_m0_write),            //                         .write
		.uav_waitrequest        (mm_to_phy_avalon_universal_slave_0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_avalon_universal_slave_0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (mm_to_phy_avalon_universal_slave_0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (mm_to_phy_avalon_universal_slave_0_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (mm_to_phy_avalon_universal_slave_0_agent_m0_writedata),        //                         .writedata
		.uav_lock               (mm_to_phy_avalon_universal_slave_0_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (mm_to_phy_avalon_universal_slave_0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (mm_to_phy_avalon_universal_slave_0_address),                   //      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_avalon_universal_slave_0_write),                     //                         .write
		.av_read                (mm_to_phy_avalon_universal_slave_0_read),                      //                         .read
		.av_readdata            (mm_to_phy_avalon_universal_slave_0_readdata),                  //                         .readdata
		.av_writedata           (mm_to_phy_avalon_universal_slave_0_writedata),                 //                         .writedata
		.av_burstcount          (mm_to_phy_avalon_universal_slave_0_burstcount),                //                         .burstcount
		.av_byteenable          (mm_to_phy_avalon_universal_slave_0_byteenable),                //                         .byteenable
		.av_readdatavalid       (mm_to_phy_avalon_universal_slave_0_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (mm_to_phy_avalon_universal_slave_0_waitrequest),               //                         .waitrequest
		.av_lock                (mm_to_phy_avalon_universal_slave_0_lock),                      //                         .lock
		.av_debugaccess         (mm_to_phy_avalon_universal_slave_0_debugaccess),               //                         .debugaccess
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tx_sc_fifo_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                   //                      clk.clk
		.reset                  (tx_sc_fifo_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (tx_sc_fifo_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tx_sc_fifo_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write              (tx_sc_fifo_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (tx_sc_fifo_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tx_sc_fifo_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tx_sc_fifo_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tx_sc_fifo_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tx_sc_fifo_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tx_sc_fifo_avalon_universal_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_avalon_universal_slave_0_write),                  //                         .write
		.av_read                (tx_sc_fifo_avalon_universal_slave_0_read),                   //                         .read
		.av_readdata            (tx_sc_fifo_avalon_universal_slave_0_readdata),               //                         .readdata
		.av_writedata           (tx_sc_fifo_avalon_universal_slave_0_writedata),              //                         .writedata
		.av_burstcount          (tx_sc_fifo_avalon_universal_slave_0_burstcount),             //                         .burstcount
		.av_byteenable          (tx_sc_fifo_avalon_universal_slave_0_byteenable),             //                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_avalon_universal_slave_0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_avalon_universal_slave_0_waitrequest),            //                         .waitrequest
		.av_lock                (tx_sc_fifo_avalon_universal_slave_0_lock),                   //                         .lock
		.av_debugaccess         (tx_sc_fifo_avalon_universal_slave_0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rx_sc_fifo_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                   //                      clk.clk
		.reset                  (tx_sc_fifo_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (rx_sc_fifo_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rx_sc_fifo_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write              (rx_sc_fifo_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (rx_sc_fifo_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rx_sc_fifo_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rx_sc_fifo_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rx_sc_fifo_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rx_sc_fifo_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (rx_sc_fifo_avalon_universal_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_avalon_universal_slave_0_write),                  //                         .write
		.av_read                (rx_sc_fifo_avalon_universal_slave_0_read),                   //                         .read
		.av_readdata            (rx_sc_fifo_avalon_universal_slave_0_readdata),               //                         .readdata
		.av_writedata           (rx_sc_fifo_avalon_universal_slave_0_writedata),              //                         .writedata
		.av_burstcount          (rx_sc_fifo_avalon_universal_slave_0_burstcount),             //                         .burstcount
		.av_byteenable          (rx_sc_fifo_avalon_universal_slave_0_byteenable),             //                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_avalon_universal_slave_0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_avalon_universal_slave_0_waitrequest),            //                         .waitrequest
		.av_lock                (rx_sc_fifo_avalon_universal_slave_0_lock),                   //                         .lock
		.av_debugaccess         (rx_sc_fifo_avalon_universal_slave_0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_gen_mon_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                    //                      clk.clk
		.reset                  (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (eth_gen_mon_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (eth_gen_mon_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write              (eth_gen_mon_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (eth_gen_mon_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (eth_gen_mon_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (eth_gen_mon_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (eth_gen_mon_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (eth_gen_mon_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (eth_gen_mon_avalon_universal_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_avalon_universal_slave_0_write),                  //                         .write
		.av_read                (eth_gen_mon_avalon_universal_slave_0_read),                   //                         .read
		.av_readdata            (eth_gen_mon_avalon_universal_slave_0_readdata),               //                         .readdata
		.av_writedata           (eth_gen_mon_avalon_universal_slave_0_writedata),              //                         .writedata
		.av_burstcount          (eth_gen_mon_avalon_universal_slave_0_burstcount),             //                         .burstcount
		.av_byteenable          (eth_gen_mon_avalon_universal_slave_0_byteenable),             //                         .byteenable
		.av_readdatavalid       (eth_gen_mon_avalon_universal_slave_0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_avalon_universal_slave_0_waitrequest),            //                         .waitrequest
		.av_lock                (eth_gen_mon_avalon_universal_slave_0_lock),                   //                         .lock
		.av_debugaccess         (eth_gen_mon_avalon_universal_slave_0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) merlin_master_translator_0_avalon_universal_master_0_agent (
		.clk                   (clk_csr_clk_clk),                                                                                         //       clk.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address            (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (merlin_master_translator_0_avalon_universal_master_0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (merlin_master_translator_0_avalon_universal_master_0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (merlin_master_translator_0_avalon_universal_master_0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (merlin_master_translator_0_avalon_universal_master_0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (merlin_master_translator_0_avalon_universal_master_0_agent_cp_ready),                                     //          .ready
		.rp_valid              (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_to_mac_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                        //             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (mm_to_mac_avalon_universal_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mm_to_mac_avalon_universal_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mm_to_mac_avalon_universal_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mm_to_mac_avalon_universal_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mm_to_mac_avalon_universal_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mm_to_mac_avalon_universal_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mm_to_mac_avalon_universal_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mm_to_mac_avalon_universal_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mm_to_mac_avalon_universal_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mm_to_mac_avalon_universal_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mm_to_mac_avalon_universal_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mm_to_mac_avalon_universal_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mm_to_mac_avalon_universal_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (mm_to_mac_avalon_universal_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (mm_to_mac_avalon_universal_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mm_to_mac_avalon_universal_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mm_to_mac_avalon_universal_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mm_to_mac_avalon_universal_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mm_to_mac_avalon_universal_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_avalon_universal_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mm_to_mac_avalon_universal_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                     //       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (mm_to_mac_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_to_mac_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_to_mac_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_to_mac_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_to_mac_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_to_mac_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_to_phy_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                        //             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (mm_to_phy_avalon_universal_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mm_to_phy_avalon_universal_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mm_to_phy_avalon_universal_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mm_to_phy_avalon_universal_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mm_to_phy_avalon_universal_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mm_to_phy_avalon_universal_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mm_to_phy_avalon_universal_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mm_to_phy_avalon_universal_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mm_to_phy_avalon_universal_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mm_to_phy_avalon_universal_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mm_to_phy_avalon_universal_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mm_to_phy_avalon_universal_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mm_to_phy_avalon_universal_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (mm_to_phy_avalon_universal_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (mm_to_phy_avalon_universal_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mm_to_phy_avalon_universal_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mm_to_phy_avalon_universal_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mm_to_phy_avalon_universal_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mm_to_phy_avalon_universal_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_avalon_universal_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mm_to_phy_avalon_universal_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                     //       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (mm_to_phy_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_to_phy_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_to_phy_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_to_phy_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_to_phy_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_to_phy_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tx_sc_fifo_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                //             clk.clk
		.reset                   (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (tx_sc_fifo_avalon_universal_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tx_sc_fifo_avalon_universal_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tx_sc_fifo_avalon_universal_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tx_sc_fifo_avalon_universal_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tx_sc_fifo_avalon_universal_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (tx_sc_fifo_avalon_universal_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tx_sc_fifo_avalon_universal_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tx_sc_fifo_avalon_universal_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (tx_sc_fifo_avalon_universal_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tx_sc_fifo_avalon_universal_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (tx_sc_fifo_avalon_universal_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (tx_sc_fifo_avalon_universal_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tx_sc_fifo_avalon_universal_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (tx_sc_fifo_avalon_universal_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (tx_sc_fifo_avalon_universal_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (tx_sc_fifo_avalon_universal_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                             //       clk.clk
		.reset             (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tx_sc_fifo_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                       //       clk.clk
		.reset             (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rx_sc_fifo_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                //             clk.clk
		.reset                   (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (rx_sc_fifo_avalon_universal_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (rx_sc_fifo_avalon_universal_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (rx_sc_fifo_avalon_universal_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (rx_sc_fifo_avalon_universal_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (rx_sc_fifo_avalon_universal_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (rx_sc_fifo_avalon_universal_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (rx_sc_fifo_avalon_universal_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (rx_sc_fifo_avalon_universal_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (rx_sc_fifo_avalon_universal_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (rx_sc_fifo_avalon_universal_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (rx_sc_fifo_avalon_universal_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (rx_sc_fifo_avalon_universal_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (rx_sc_fifo_avalon_universal_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (rx_sc_fifo_avalon_universal_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (rx_sc_fifo_avalon_universal_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (rx_sc_fifo_avalon_universal_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                             //       clk.clk
		.reset             (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rx_sc_fifo_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rx_sc_fifo_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                       //       clk.clk
		.reset             (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) eth_gen_mon_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                 //             clk.clk
		.reset                   (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (eth_gen_mon_avalon_universal_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (eth_gen_mon_avalon_universal_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (eth_gen_mon_avalon_universal_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (eth_gen_mon_avalon_universal_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (eth_gen_mon_avalon_universal_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (eth_gen_mon_avalon_universal_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (eth_gen_mon_avalon_universal_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (eth_gen_mon_avalon_universal_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (eth_gen_mon_avalon_universal_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (eth_gen_mon_avalon_universal_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (eth_gen_mon_avalon_universal_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (eth_gen_mon_avalon_universal_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (eth_gen_mon_avalon_universal_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (eth_gen_mon_avalon_universal_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (eth_gen_mon_avalon_universal_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (eth_gen_mon_avalon_universal_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                              //       clk.clk
		.reset             (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eth_gen_mon_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eth_gen_mon_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                        //       clk.clk
		.reset             (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	address_decode_altera_merlin_router_170_tziitua router (
		.sink_ready         (merlin_master_translator_0_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (merlin_master_translator_0_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (merlin_master_translator_0_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (merlin_master_translator_0_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (merlin_master_translator_0_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_csr_clk_clk),                                                             //       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_src_ready),                                                            //       src.ready
		.src_valid          (router_src_valid),                                                            //          .valid
		.src_data           (router_src_data),                                                             //          .data
		.src_channel        (router_src_channel),                                                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                       //          .endofpacket
	);

	address_decode_altera_merlin_router_170_5dqbt4y router_001 (
		.sink_ready         (mm_to_mac_avalon_universal_slave_0_agent_rp_ready),            //      sink.ready
		.sink_valid         (mm_to_mac_avalon_universal_slave_0_agent_rp_valid),            //          .valid
		.sink_data          (mm_to_mac_avalon_universal_slave_0_agent_rp_data),             //          .data
		.sink_startofpacket (mm_to_mac_avalon_universal_slave_0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (mm_to_mac_avalon_universal_slave_0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                         //       src.ready
		.src_valid          (router_001_src_valid),                                         //          .valid
		.src_data           (router_001_src_data),                                          //          .data
		.src_channel        (router_001_src_channel),                                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                    //          .endofpacket
	);

	address_decode_altera_merlin_router_170_5dqbt4y router_002 (
		.sink_ready         (mm_to_phy_avalon_universal_slave_0_agent_rp_ready),            //      sink.ready
		.sink_valid         (mm_to_phy_avalon_universal_slave_0_agent_rp_valid),            //          .valid
		.sink_data          (mm_to_phy_avalon_universal_slave_0_agent_rp_data),             //          .data
		.sink_startofpacket (mm_to_phy_avalon_universal_slave_0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (mm_to_phy_avalon_universal_slave_0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                         //       src.ready
		.src_valid          (router_002_src_valid),                                         //          .valid
		.src_data           (router_002_src_data),                                          //          .data
		.src_channel        (router_002_src_channel),                                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                    //          .endofpacket
	);

	address_decode_altera_merlin_router_170_5dqbt4y router_003 (
		.sink_ready         (tx_sc_fifo_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (tx_sc_fifo_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (tx_sc_fifo_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (tx_sc_fifo_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                   //       clk.clk
		.reset              (tx_sc_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	address_decode_altera_merlin_router_170_5dqbt4y router_004 (
		.sink_ready         (rx_sc_fifo_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rx_sc_fifo_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rx_sc_fifo_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rx_sc_fifo_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                   //       clk.clk
		.reset              (tx_sc_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_004_src_ready),                                       //       src.ready
		.src_valid          (router_004_src_valid),                                       //          .valid
		.src_data           (router_004_src_data),                                        //          .data
		.src_channel        (router_004_src_channel),                                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                  //          .endofpacket
	);

	address_decode_altera_merlin_router_170_5dqbt4y router_005 (
		.sink_ready         (eth_gen_mon_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (eth_gen_mon_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (eth_gen_mon_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (eth_gen_mon_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (eth_gen_mon_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                    //       clk.clk
		.reset              (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_005_src_ready),                                        //       src.ready
		.src_valid          (router_005_src_valid),                                        //          .valid
		.src_data           (router_005_src_data),                                         //          .data
		.src_channel        (router_005_src_channel),                                      //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (71),
		.PIPELINED                 (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) merlin_master_translator_0_avalon_universal_master_0_limiter (
		.clk                    (clk_csr_clk_clk),                                                                    //       clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                                   //          .valid
		.cmd_sink_data          (router_src_data),                                                                    //          .data
		.cmd_sink_channel       (router_src_channel),                                                                 //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                           //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                             //          .endofpacket
		.cmd_src_ready          (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                                  //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                                //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                            //          .endofpacket
		.rsp_src_ready          (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) mm_to_mac_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                        //       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                      //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                       //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                    //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                      //          .ready
		.source0_valid         (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mm_to_mac_avalon_universal_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) mm_to_phy_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                        //       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                  //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                   //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                                //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                            //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                  //          .ready
		.source0_valid         (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mm_to_phy_avalon_universal_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) tx_sc_fifo_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                //       cr0.clk
		.reset                 (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                   //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                    //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                 //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                             //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                   //          .ready
		.source0_valid         (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (tx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) rx_sc_fifo_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                //       cr0.clk
		.reset                 (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                                   //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                                    //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                                 //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                             //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                                   //          .ready
		.source0_valid         (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (rx_sc_fifo_avalon_universal_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) eth_gen_mon_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                 //       cr0.clk
		.reset                 (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                             // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                                    //          .ready
		.source0_valid         (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (eth_gen_mon_avalon_universal_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	address_decode_altera_merlin_demultiplexer_170_hxcg55y cmd_demux (
		.clk                (clk_csr_clk_clk),                                                                    //        clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                       //  clk_reset.reset
		.sink_ready         (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                               //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                               //           .valid
		.src0_data          (cmd_demux_src0_data),                                                                //           .data
		.src0_channel       (cmd_demux_src0_channel),                                                             //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                                         //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                               //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                               //           .valid
		.src1_data          (cmd_demux_src1_data),                                                                //           .data
		.src1_channel       (cmd_demux_src1_channel),                                                             //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                                         //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                               //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                               //           .valid
		.src2_data          (cmd_demux_src2_data),                                                                //           .data
		.src2_channel       (cmd_demux_src2_channel),                                                             //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                                         //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                               //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                               //           .valid
		.src3_data          (cmd_demux_src3_data),                                                                //           .data
		.src3_channel       (cmd_demux_src3_channel),                                                             //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                                         //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                               //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                               //           .valid
		.src4_data          (cmd_demux_src4_data),                                                                //           .data
		.src4_channel       (cmd_demux_src4_channel),                                                             //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                                                          //           .endofpacket
	);

	address_decode_altera_merlin_multiplexer_170_4o2qzii cmd_mux (
		.clk                 (clk_csr_clk_clk),                                              //       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                                            //          .valid
		.src_data            (cmd_mux_src_data),                                             //          .data
		.src_channel         (cmd_mux_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                    //          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_170_4o2qzii cmd_mux_001 (
		.clk                 (clk_csr_clk_clk),                                              //       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                        //          .valid
		.src_data            (cmd_mux_001_src_data),                                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                    //          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_170_4o2qzii cmd_mux_002 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                     //       clk.clk
		.reset               (tx_sc_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_out_valid),                            //          .valid
		.sink0_channel       (crosser_out_channel),                          //          .channel
		.sink0_data          (crosser_out_data),                             //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                       //          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_170_4o2qzii cmd_mux_003 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                     //       clk.clk
		.reset               (tx_sc_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                        //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                        //          .valid
		.sink0_channel       (crosser_001_out_channel),                      //          .channel
		.sink0_data          (crosser_001_out_data),                         //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                   //          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_170_4o2qzii cmd_mux_004 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                     //       clk.clk
		.reset               (tx_sc_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //          .valid
		.src_data            (cmd_mux_004_src_data),                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                        //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                        //          .valid
		.sink0_channel       (crosser_002_out_channel),                      //          .channel
		.sink0_data          (crosser_002_out_data),                         //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                   //          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_170_jvvh5ma rsp_demux (
		.clk                (clk_csr_clk_clk),                                              //       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                         //      sink.ready
		.sink_channel       (router_001_src_channel),                                       //          .channel
		.sink_data          (router_001_src_data),                                          //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_001_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                    //          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_170_jvvh5ma rsp_demux_001 (
		.clk                (clk_csr_clk_clk),                                              //       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                         //      sink.ready
		.sink_channel       (router_002_src_channel),                                       //          .channel
		.sink_data          (router_002_src_data),                                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                //          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_170_jvvh5ma rsp_demux_002 (
		.clk                (tx_xcvr_half_clk_clk_clk),                     //       clk.clk
		.reset              (tx_sc_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //      sink.ready
		.sink_channel       (router_003_src_channel),                       //          .channel
		.sink_data          (router_003_src_data),                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                //          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_170_jvvh5ma rsp_demux_003 (
		.clk                (tx_xcvr_half_clk_clk_clk),                     //       clk.clk
		.reset              (tx_sc_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //      sink.ready
		.sink_channel       (router_004_src_channel),                       //          .channel
		.sink_data          (router_004_src_data),                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_170_jvvh5ma rsp_demux_004 (
		.clk                (tx_xcvr_half_clk_clk_clk),                     //       clk.clk
		.reset              (tx_sc_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                //          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_170_or75vma rsp_mux (
		.clk                 (clk_csr_clk_clk),                                              //       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                                            //          .valid
		.src_data            (rsp_mux_src_data),                                             //          .data
		.src_channel         (rsp_mux_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                     //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                     //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                   //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                      //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                               //          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                                        //     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                                        //          .valid
		.sink2_channel       (crosser_003_out_channel),                                      //          .channel
		.sink2_data          (crosser_003_out_data),                                         //          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket),                                  //          .endofpacket
		.sink3_ready         (crosser_004_out_ready),                                        //     sink3.ready
		.sink3_valid         (crosser_004_out_valid),                                        //          .valid
		.sink3_channel       (crosser_004_out_channel),                                      //          .channel
		.sink3_data          (crosser_004_out_data),                                         //          .data
		.sink3_startofpacket (crosser_004_out_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (crosser_004_out_endofpacket),                                  //          .endofpacket
		.sink4_ready         (crosser_005_out_ready),                                        //     sink4.ready
		.sink4_valid         (crosser_005_out_valid),                                        //          .valid
		.sink4_channel       (crosser_005_out_channel),                                      //          .channel
		.sink4_data          (crosser_005_out_data),                                         //          .data
		.sink4_startofpacket (crosser_005_out_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (crosser_005_out_endofpacket)                                   //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_csr_clk_clk),                                              //        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //       out_clk.clk
		.out_reset         (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                         //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                       //              .channel
		.in_data           (cmd_demux_src2_data),                                          //              .data
		.out_ready         (crosser_out_ready),                                            //           out.ready
		.out_valid         (crosser_out_valid),                                            //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_out_channel),                                          //              .channel
		.out_data          (crosser_out_data),                                             //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_csr_clk_clk),                                              //        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //       out_clk.clk
		.out_reset         (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                         //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                       //              .channel
		.in_data           (cmd_demux_src3_data),                                          //              .data
		.out_ready         (crosser_001_out_ready),                                        //           out.ready
		.out_valid         (crosser_001_out_valid),                                        //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                      //              .channel
		.out_data          (crosser_001_out_data),                                         //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_csr_clk_clk),                                              //        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //       out_clk.clk
		.out_reset         (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                         //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                       //              .channel
		.in_data           (cmd_demux_src4_data),                                          //              .data
		.out_ready         (crosser_002_out_ready),                                        //           out.ready
		.out_valid         (crosser_002_out_valid),                                        //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                      //              .channel
		.out_data          (crosser_002_out_data),                                         //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //        in_clk.clk
		.in_reset          (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                     //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                     //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                             //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                               //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                   //              .channel
		.in_data           (rsp_demux_002_src0_data),                                      //              .data
		.out_ready         (crosser_003_out_ready),                                        //           out.ready
		.out_valid         (crosser_003_out_valid),                                        //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                      //              .channel
		.out_data          (crosser_003_out_data),                                         //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //        in_clk.clk
		.in_reset          (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                     //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                     //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                             //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                               //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                   //              .channel
		.in_data           (rsp_demux_003_src0_data),                                      //              .data
		.out_ready         (crosser_004_out_ready),                                        //           out.ready
		.out_valid         (crosser_004_out_valid),                                        //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                      //              .channel
		.out_data          (crosser_004_out_data),                                         //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (113),
		.BITS_PER_SYMBOL     (113),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //        in_clk.clk
		.in_reset          (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                     //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                     //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                             //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                               //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                   //              .channel
		.in_data           (rsp_demux_004_src0_data),                                      //              .data
		.out_ready         (crosser_005_out_ready),                                        //           out.ready
		.out_valid         (crosser_005_out_valid),                                        //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                      //              .channel
		.out_data          (crosser_005_out_data),                                         //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	address_decode_altera_avalon_st_adapter_170_4tlgflq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_0_data      (mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mm_to_mac_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.in_clk_0_clk   (clk_csr_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.out_0_data     (avalon_st_adapter_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                  //         .error
	);

	address_decode_altera_avalon_st_adapter_170_4tlgflq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_0_data      (mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mm_to_phy_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.in_clk_0_clk   (clk_csr_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.out_0_data     (avalon_st_adapter_001_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                              //         .error
	);

	address_decode_altera_avalon_st_adapter_170_4tlgflq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_0_data      (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (tx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.in_clk_0_clk   (tx_xcvr_half_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.out_0_data     (avalon_st_adapter_002_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                               //         .error
	);

	address_decode_altera_avalon_st_adapter_170_4tlgflq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_0_data      (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (rx_sc_fifo_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.in_clk_0_clk   (tx_xcvr_half_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.out_0_data     (avalon_st_adapter_003_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                               //         .error
	);

	address_decode_altera_avalon_st_adapter_170_4tlgflq #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_0_data      (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (eth_gen_mon_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.in_clk_0_clk   (tx_xcvr_half_clk_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (tx_sc_fifo_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                //         .error
	);

endmodule
