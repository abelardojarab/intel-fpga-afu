// address_decode.v

// Generated using ACDS version 17.0 290

`timescale 1 ps / 1 ps
module address_decode (
		input  wire        clk_csr_clk,                                                 //                                         clk_csr.clk
		input  wire        csr_reset_n,                                                 //                                             csr.reset_n
		output wire [11:0] eth_gen_mon_avalon_anti_slave_0_address,                     //                 eth_gen_mon_avalon_anti_slave_0.address
		output wire        eth_gen_mon_avalon_anti_slave_0_write,                       //                                                .write
		output wire        eth_gen_mon_avalon_anti_slave_0_read,                        //                                                .read
		input  wire [31:0] eth_gen_mon_avalon_anti_slave_0_readdata,                    //                                                .readdata
		output wire [31:0] eth_gen_mon_avalon_anti_slave_0_writedata,                   //                                                .writedata
		input  wire        eth_gen_mon_avalon_anti_slave_0_waitrequest,                 //                                                .waitrequest
		output wire [12:0] mac_avalon_anti_slave_0_address,                             //                         mac_avalon_anti_slave_0.address
		output wire        mac_avalon_anti_slave_0_write,                               //                                                .write
		output wire        mac_avalon_anti_slave_0_read,                                //                                                .read
		input  wire [31:0] mac_avalon_anti_slave_0_readdata,                            //                                                .readdata
		output wire [31:0] mac_avalon_anti_slave_0_writedata,                           //                                                .writedata
		input  wire        mac_avalon_anti_slave_0_waitrequest,                         //                                                .waitrequest
		input  wire [15:0] merlin_master_translator_0_avalon_anti_master_0_address,     // merlin_master_translator_0_avalon_anti_master_0.address
		output wire        merlin_master_translator_0_avalon_anti_master_0_waitrequest, //                                                .waitrequest
		input  wire        merlin_master_translator_0_avalon_anti_master_0_read,        //                                                .read
		output wire [31:0] merlin_master_translator_0_avalon_anti_master_0_readdata,    //                                                .readdata
		input  wire        merlin_master_translator_0_avalon_anti_master_0_write,       //                                                .write
		input  wire [31:0] merlin_master_translator_0_avalon_anti_master_0_writedata,   //                                                .writedata
		output wire [9:0]  phy_avalon_anti_slave_0_address,                             //                         phy_avalon_anti_slave_0.address
		output wire        phy_avalon_anti_slave_0_write,                               //                                                .write
		output wire        phy_avalon_anti_slave_0_read,                                //                                                .read
		input  wire [31:0] phy_avalon_anti_slave_0_readdata,                            //                                                .readdata
		output wire [31:0] phy_avalon_anti_slave_0_writedata,                           //                                                .writedata
		input  wire        phy_avalon_anti_slave_0_waitrequest,                         //                                                .waitrequest
		output wire [2:0]  rx_sc_fifo_avalon_anti_slave_0_address,                      //                  rx_sc_fifo_avalon_anti_slave_0.address
		output wire        rx_sc_fifo_avalon_anti_slave_0_write,                        //                                                .write
		output wire        rx_sc_fifo_avalon_anti_slave_0_read,                         //                                                .read
		input  wire [31:0] rx_sc_fifo_avalon_anti_slave_0_readdata,                     //                                                .readdata
		output wire [31:0] rx_sc_fifo_avalon_anti_slave_0_writedata,                    //                                                .writedata
		input  wire        rx_xcvr_clk_clk,                                             //                                     rx_xcvr_clk.clk
		input  wire        sync_rx_rst_reset_n,                                         //                                     sync_rx_rst.reset_n
		input  wire        sync_tx_half_rst_reset_n,                                    //                                sync_tx_half_rst.reset_n
		input  wire        sync_tx_rst_reset_n,                                         //                                     sync_tx_rst.reset_n
		output wire [2:0]  tx_sc_fifo_avalon_anti_slave_0_address,                      //                  tx_sc_fifo_avalon_anti_slave_0.address
		output wire        tx_sc_fifo_avalon_anti_slave_0_write,                        //                                                .write
		output wire        tx_sc_fifo_avalon_anti_slave_0_read,                         //                                                .read
		input  wire [31:0] tx_sc_fifo_avalon_anti_slave_0_readdata,                     //                                                .readdata
		output wire [31:0] tx_sc_fifo_avalon_anti_slave_0_writedata,                    //                                                .writedata
		input  wire        tx_xcvr_clk_clk,                                             //                                     tx_xcvr_clk.clk
		input  wire        tx_xcvr_half_clk_clk                                         //                                tx_xcvr_half_clk.clk
	);

	wire         merlin_master_translator_0_avalon_universal_master_0_waitrequest;     // mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_waitrequest -> merlin_master_translator_0:uav_waitrequest
	wire  [31:0] merlin_master_translator_0_avalon_universal_master_0_readdata;        // mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_readdata -> merlin_master_translator_0:uav_readdata
	wire         merlin_master_translator_0_avalon_universal_master_0_debugaccess;     // merlin_master_translator_0:uav_debugaccess -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_debugaccess
	wire  [31:0] merlin_master_translator_0_avalon_universal_master_0_address;         // merlin_master_translator_0:uav_address -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_address
	wire         merlin_master_translator_0_avalon_universal_master_0_read;            // merlin_master_translator_0:uav_read -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_read
	wire   [3:0] merlin_master_translator_0_avalon_universal_master_0_byteenable;      // merlin_master_translator_0:uav_byteenable -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_byteenable
	wire         merlin_master_translator_0_avalon_universal_master_0_readdatavalid;   // mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_readdatavalid -> merlin_master_translator_0:uav_readdatavalid
	wire         merlin_master_translator_0_avalon_universal_master_0_lock;            // merlin_master_translator_0:uav_lock -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_lock
	wire         merlin_master_translator_0_avalon_universal_master_0_write;           // merlin_master_translator_0:uav_write -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_write
	wire  [31:0] merlin_master_translator_0_avalon_universal_master_0_writedata;       // merlin_master_translator_0:uav_writedata -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_writedata
	wire   [9:0] merlin_master_translator_0_avalon_universal_master_0_burstcount;      // merlin_master_translator_0:uav_burstcount -> mm_interconnect_0:merlin_master_translator_0_avalon_universal_master_0_burstcount
	wire  [31:0] mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_readdata;        // mm_to_mac:uav_readdata -> mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_waitrequest;     // mm_to_mac:uav_waitrequest -> mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_debugaccess;     // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_debugaccess -> mm_to_mac:uav_debugaccess
	wire  [14:0] mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_address;         // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_address -> mm_to_mac:uav_address
	wire         mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_read;            // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_read -> mm_to_mac:uav_read
	wire   [3:0] mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_byteenable;      // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_byteenable -> mm_to_mac:uav_byteenable
	wire         mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_readdatavalid;   // mm_to_mac:uav_readdatavalid -> mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_lock;            // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_lock -> mm_to_mac:uav_lock
	wire         mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_write;           // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_write -> mm_to_mac:uav_write
	wire  [31:0] mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_writedata;       // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_writedata -> mm_to_mac:uav_writedata
	wire   [3:0] mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_burstcount;      // mm_interconnect_0:mm_to_mac_avalon_universal_slave_0_burstcount -> mm_to_mac:uav_burstcount
	wire  [31:0] mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_readdata;        // mm_to_phy:uav_readdata -> mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_waitrequest;     // mm_to_phy:uav_waitrequest -> mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_debugaccess;     // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_debugaccess -> mm_to_phy:uav_debugaccess
	wire  [11:0] mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_address;         // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_address -> mm_to_phy:uav_address
	wire         mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_read;            // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_read -> mm_to_phy:uav_read
	wire   [3:0] mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_byteenable;      // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_byteenable -> mm_to_phy:uav_byteenable
	wire         mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_readdatavalid;   // mm_to_phy:uav_readdatavalid -> mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_lock;            // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_lock -> mm_to_phy:uav_lock
	wire         mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_write;           // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_write -> mm_to_phy:uav_write
	wire  [31:0] mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_writedata;       // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_writedata -> mm_to_phy:uav_writedata
	wire   [3:0] mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_burstcount;      // mm_interconnect_0:mm_to_phy_avalon_universal_slave_0_burstcount -> mm_to_phy:uav_burstcount
	wire  [31:0] mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_readdata;       // tx_sc_fifo:uav_readdata -> mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_waitrequest;    // tx_sc_fifo:uav_waitrequest -> mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_debugaccess;    // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_debugaccess -> tx_sc_fifo:uav_debugaccess
	wire   [4:0] mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_address;        // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_address -> tx_sc_fifo:uav_address
	wire         mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_read;           // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_read -> tx_sc_fifo:uav_read
	wire   [3:0] mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_byteenable;     // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_byteenable -> tx_sc_fifo:uav_byteenable
	wire         mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_readdatavalid;  // tx_sc_fifo:uav_readdatavalid -> mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_lock;           // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_lock -> tx_sc_fifo:uav_lock
	wire         mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_write;          // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_write -> tx_sc_fifo:uav_write
	wire  [31:0] mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_writedata;      // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_writedata -> tx_sc_fifo:uav_writedata
	wire   [3:0] mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_burstcount;     // mm_interconnect_0:tx_sc_fifo_avalon_universal_slave_0_burstcount -> tx_sc_fifo:uav_burstcount
	wire  [31:0] mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_readdata;       // rx_sc_fifo:uav_readdata -> mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_waitrequest;    // rx_sc_fifo:uav_waitrequest -> mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_debugaccess;    // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_debugaccess -> rx_sc_fifo:uav_debugaccess
	wire   [4:0] mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_address;        // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_address -> rx_sc_fifo:uav_address
	wire         mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_read;           // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_read -> rx_sc_fifo:uav_read
	wire   [3:0] mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_byteenable;     // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_byteenable -> rx_sc_fifo:uav_byteenable
	wire         mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_readdatavalid;  // rx_sc_fifo:uav_readdatavalid -> mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_lock;           // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_lock -> rx_sc_fifo:uav_lock
	wire         mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_write;          // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_write -> rx_sc_fifo:uav_write
	wire  [31:0] mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_writedata;      // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_writedata -> rx_sc_fifo:uav_writedata
	wire   [3:0] mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_burstcount;     // mm_interconnect_0:rx_sc_fifo_avalon_universal_slave_0_burstcount -> rx_sc_fifo:uav_burstcount
	wire  [31:0] mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_readdata;      // eth_gen_mon:uav_readdata -> mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_waitrequest;   // eth_gen_mon:uav_waitrequest -> mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_debugaccess;   // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_debugaccess -> eth_gen_mon:uav_debugaccess
	wire  [13:0] mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_address;       // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_address -> eth_gen_mon:uav_address
	wire         mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_read;          // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_read -> eth_gen_mon:uav_read
	wire   [3:0] mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_byteenable;    // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_byteenable -> eth_gen_mon:uav_byteenable
	wire         mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_readdatavalid; // eth_gen_mon:uav_readdatavalid -> mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_lock;          // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_lock -> eth_gen_mon:uav_lock
	wire         mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_write;         // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_write -> eth_gen_mon:uav_write
	wire  [31:0] mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_writedata;     // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_writedata -> eth_gen_mon:uav_writedata
	wire   [3:0] mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_burstcount;    // mm_interconnect_0:eth_gen_mon_avalon_universal_slave_0_burstcount -> eth_gen_mon:uav_burstcount
	wire         rst_controller_reset_out_reset;                                       // rst_controller:reset_out -> [eth_gen_mon:reset, mm_interconnect_0:tx_sc_fifo_reset_reset_bridge_in_reset_reset, rx_sc_fifo:reset, tx_sc_fifo:reset]

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_gen_mon (
		.clk                    (tx_xcvr_half_clk_clk),                                                 //                      clk.clk
		.reset                  (rst_controller_reset_out_reset),                                       //                    reset.reset
		.uav_address            (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_burstcount),    //                         .burstcount
		.uav_read               (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_read),          //                         .read
		.uav_write              (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_write),         //                         .write
		.uav_waitrequest        (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_readdata),      //                         .readdata
		.uav_writedata          (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_writedata),     //                         .writedata
		.uav_lock               (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_lock),          //                         .lock
		.uav_debugaccess        (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_debugaccess),   //                         .debugaccess
		.av_address             (eth_gen_mon_avalon_anti_slave_0_address),                              //      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_avalon_anti_slave_0_write),                                //                         .write
		.av_read                (eth_gen_mon_avalon_anti_slave_0_read),                                 //                         .read
		.av_readdata            (eth_gen_mon_avalon_anti_slave_0_readdata),                             //                         .readdata
		.av_writedata           (eth_gen_mon_avalon_anti_slave_0_writedata),                            //                         .writedata
		.av_waitrequest         (eth_gen_mon_avalon_anti_slave_0_waitrequest),                          //                         .waitrequest
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_byteenable          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) merlin_master_translator_0 (
		.clk                    (clk_csr_clk),                                                        //                       clk.clk
		.reset                  (~csr_reset_n),                                                       //                     reset.reset
		.uav_address            (merlin_master_translator_0_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (merlin_master_translator_0_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (merlin_master_translator_0_avalon_universal_master_0_read),          //                          .read
		.uav_write              (merlin_master_translator_0_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (merlin_master_translator_0_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (merlin_master_translator_0_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (merlin_master_translator_0_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (merlin_master_translator_0_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (merlin_master_translator_0_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (merlin_master_translator_0_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (merlin_master_translator_0_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (merlin_master_translator_0_avalon_anti_master_0_address),            //      avalon_anti_master_0.address
		.av_waitrequest         (merlin_master_translator_0_avalon_anti_master_0_waitrequest),        //                          .waitrequest
		.av_read                (merlin_master_translator_0_avalon_anti_master_0_read),               //                          .read
		.av_readdata            (merlin_master_translator_0_avalon_anti_master_0_readdata),           //                          .readdata
		.av_write               (merlin_master_translator_0_avalon_anti_master_0_write),              //                          .write
		.av_writedata           (merlin_master_translator_0_avalon_anti_master_0_writedata),          //                          .writedata
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_readdatavalid       (),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_to_mac (
		.clk                    (clk_csr_clk),                                                        //                      clk.clk
		.reset                  (~csr_reset_n),                                                       //                    reset.reset
		.uav_address            (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_burstcount),    //                         .burstcount
		.uav_read               (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_read),          //                         .read
		.uav_write              (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_write),         //                         .write
		.uav_waitrequest        (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_readdata),      //                         .readdata
		.uav_writedata          (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_writedata),     //                         .writedata
		.uav_lock               (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_lock),          //                         .lock
		.uav_debugaccess        (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_debugaccess),   //                         .debugaccess
		.av_address             (mac_avalon_anti_slave_0_address),                                    //      avalon_anti_slave_0.address
		.av_write               (mac_avalon_anti_slave_0_write),                                      //                         .write
		.av_read                (mac_avalon_anti_slave_0_read),                                       //                         .read
		.av_readdata            (mac_avalon_anti_slave_0_readdata),                                   //                         .readdata
		.av_writedata           (mac_avalon_anti_slave_0_writedata),                                  //                         .writedata
		.av_waitrequest         (mac_avalon_anti_slave_0_waitrequest),                                //                         .waitrequest
		.av_begintransfer       (),                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                   //              (terminated)
		.av_burstcount          (),                                                                   //              (terminated)
		.av_byteenable          (),                                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                                               //              (terminated)
		.av_writebyteenable     (),                                                                   //              (terminated)
		.av_lock                (),                                                                   //              (terminated)
		.av_chipselect          (),                                                                   //              (terminated)
		.av_clken               (),                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                               //              (terminated)
		.av_debugaccess         (),                                                                   //              (terminated)
		.av_outputenable        (),                                                                   //              (terminated)
		.uav_response           (),                                                                   //              (terminated)
		.av_response            (2'b00),                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_to_phy (
		.clk                    (clk_csr_clk),                                                        //                      clk.clk
		.reset                  (~csr_reset_n),                                                       //                    reset.reset
		.uav_address            (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_burstcount),    //                         .burstcount
		.uav_read               (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_read),          //                         .read
		.uav_write              (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_write),         //                         .write
		.uav_waitrequest        (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_readdata),      //                         .readdata
		.uav_writedata          (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_writedata),     //                         .writedata
		.uav_lock               (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_lock),          //                         .lock
		.uav_debugaccess        (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_debugaccess),   //                         .debugaccess
		.av_address             (phy_avalon_anti_slave_0_address),                                    //      avalon_anti_slave_0.address
		.av_write               (phy_avalon_anti_slave_0_write),                                      //                         .write
		.av_read                (phy_avalon_anti_slave_0_read),                                       //                         .read
		.av_readdata            (phy_avalon_anti_slave_0_readdata),                                   //                         .readdata
		.av_writedata           (phy_avalon_anti_slave_0_writedata),                                  //                         .writedata
		.av_waitrequest         (phy_avalon_anti_slave_0_waitrequest),                                //                         .waitrequest
		.av_begintransfer       (),                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                   //              (terminated)
		.av_burstcount          (),                                                                   //              (terminated)
		.av_byteenable          (),                                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                                               //              (terminated)
		.av_writebyteenable     (),                                                                   //              (terminated)
		.av_lock                (),                                                                   //              (terminated)
		.av_chipselect          (),                                                                   //              (terminated)
		.av_clken               (),                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                               //              (terminated)
		.av_debugaccess         (),                                                                   //              (terminated)
		.av_outputenable        (),                                                                   //              (terminated)
		.uav_response           (),                                                                   //              (terminated)
		.av_response            (2'b00),                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (5),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rx_sc_fifo (
		.clk                    (tx_xcvr_half_clk_clk),                                                //                      clk.clk
		.reset                  (rst_controller_reset_out_reset),                                      //                    reset.reset
		.uav_address            (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_burstcount),    //                         .burstcount
		.uav_read               (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_read),          //                         .read
		.uav_write              (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_write),         //                         .write
		.uav_waitrequest        (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_readdata),      //                         .readdata
		.uav_writedata          (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_writedata),     //                         .writedata
		.uav_lock               (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_lock),          //                         .lock
		.uav_debugaccess        (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_debugaccess),   //                         .debugaccess
		.av_address             (rx_sc_fifo_avalon_anti_slave_0_address),                              //      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_avalon_anti_slave_0_write),                                //                         .write
		.av_read                (rx_sc_fifo_avalon_anti_slave_0_read),                                 //                         .read
		.av_readdata            (rx_sc_fifo_avalon_anti_slave_0_readdata),                             //                         .readdata
		.av_writedata           (rx_sc_fifo_avalon_anti_slave_0_writedata),                            //                         .writedata
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_byteenable          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (5),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tx_sc_fifo (
		.clk                    (tx_xcvr_half_clk_clk),                                                //                      clk.clk
		.reset                  (rst_controller_reset_out_reset),                                      //                    reset.reset
		.uav_address            (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_burstcount),    //                         .burstcount
		.uav_read               (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_read),          //                         .read
		.uav_write              (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_write),         //                         .write
		.uav_waitrequest        (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_readdata),      //                         .readdata
		.uav_writedata          (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_writedata),     //                         .writedata
		.uav_lock               (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_lock),          //                         .lock
		.uav_debugaccess        (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_debugaccess),   //                         .debugaccess
		.av_address             (tx_sc_fifo_avalon_anti_slave_0_address),                              //      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_avalon_anti_slave_0_write),                                //                         .write
		.av_read                (tx_sc_fifo_avalon_anti_slave_0_read),                                 //                         .read
		.av_readdata            (tx_sc_fifo_avalon_anti_slave_0_readdata),                             //                         .readdata
		.av_writedata           (tx_sc_fifo_avalon_anti_slave_0_writedata),                            //                         .writedata
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_byteenable          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	address_decode_altera_mm_interconnect_170_o4jemda mm_interconnect_0 (
		.clk_csr_clk_clk                                                    (clk_csr_clk),                                                          //                                            clk_csr_clk.clk
		.eth_gen_mon_avalon_universal_slave_0_address                       (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_address),       //                   eth_gen_mon_avalon_universal_slave_0.address
		.eth_gen_mon_avalon_universal_slave_0_write                         (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_write),         //                                                       .write
		.eth_gen_mon_avalon_universal_slave_0_read                          (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_read),          //                                                       .read
		.eth_gen_mon_avalon_universal_slave_0_readdata                      (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_readdata),      //                                                       .readdata
		.eth_gen_mon_avalon_universal_slave_0_writedata                     (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_writedata),     //                                                       .writedata
		.eth_gen_mon_avalon_universal_slave_0_burstcount                    (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_burstcount),    //                                                       .burstcount
		.eth_gen_mon_avalon_universal_slave_0_byteenable                    (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_byteenable),    //                                                       .byteenable
		.eth_gen_mon_avalon_universal_slave_0_readdatavalid                 (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_readdatavalid), //                                                       .readdatavalid
		.eth_gen_mon_avalon_universal_slave_0_waitrequest                   (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_waitrequest),   //                                                       .waitrequest
		.eth_gen_mon_avalon_universal_slave_0_lock                          (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_lock),          //                                                       .lock
		.eth_gen_mon_avalon_universal_slave_0_debugaccess                   (mm_interconnect_0_eth_gen_mon_avalon_universal_slave_0_debugaccess),   //                                                       .debugaccess
		.merlin_master_translator_0_avalon_universal_master_0_address       (merlin_master_translator_0_avalon_universal_master_0_address),         //   merlin_master_translator_0_avalon_universal_master_0.address
		.merlin_master_translator_0_avalon_universal_master_0_waitrequest   (merlin_master_translator_0_avalon_universal_master_0_waitrequest),     //                                                       .waitrequest
		.merlin_master_translator_0_avalon_universal_master_0_burstcount    (merlin_master_translator_0_avalon_universal_master_0_burstcount),      //                                                       .burstcount
		.merlin_master_translator_0_avalon_universal_master_0_byteenable    (merlin_master_translator_0_avalon_universal_master_0_byteenable),      //                                                       .byteenable
		.merlin_master_translator_0_avalon_universal_master_0_read          (merlin_master_translator_0_avalon_universal_master_0_read),            //                                                       .read
		.merlin_master_translator_0_avalon_universal_master_0_readdata      (merlin_master_translator_0_avalon_universal_master_0_readdata),        //                                                       .readdata
		.merlin_master_translator_0_avalon_universal_master_0_readdatavalid (merlin_master_translator_0_avalon_universal_master_0_readdatavalid),   //                                                       .readdatavalid
		.merlin_master_translator_0_avalon_universal_master_0_write         (merlin_master_translator_0_avalon_universal_master_0_write),           //                                                       .write
		.merlin_master_translator_0_avalon_universal_master_0_writedata     (merlin_master_translator_0_avalon_universal_master_0_writedata),       //                                                       .writedata
		.merlin_master_translator_0_avalon_universal_master_0_lock          (merlin_master_translator_0_avalon_universal_master_0_lock),            //                                                       .lock
		.merlin_master_translator_0_avalon_universal_master_0_debugaccess   (merlin_master_translator_0_avalon_universal_master_0_debugaccess),     //                                                       .debugaccess
		.merlin_master_translator_0_reset_reset_bridge_in_reset_reset       (~csr_reset_n),                                                         // merlin_master_translator_0_reset_reset_bridge_in_reset.reset
		.mm_to_mac_avalon_universal_slave_0_address                         (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_address),         //                     mm_to_mac_avalon_universal_slave_0.address
		.mm_to_mac_avalon_universal_slave_0_write                           (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_write),           //                                                       .write
		.mm_to_mac_avalon_universal_slave_0_read                            (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_read),            //                                                       .read
		.mm_to_mac_avalon_universal_slave_0_readdata                        (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_readdata),        //                                                       .readdata
		.mm_to_mac_avalon_universal_slave_0_writedata                       (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_writedata),       //                                                       .writedata
		.mm_to_mac_avalon_universal_slave_0_burstcount                      (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_burstcount),      //                                                       .burstcount
		.mm_to_mac_avalon_universal_slave_0_byteenable                      (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_byteenable),      //                                                       .byteenable
		.mm_to_mac_avalon_universal_slave_0_readdatavalid                   (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_readdatavalid),   //                                                       .readdatavalid
		.mm_to_mac_avalon_universal_slave_0_waitrequest                     (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_waitrequest),     //                                                       .waitrequest
		.mm_to_mac_avalon_universal_slave_0_lock                            (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_lock),            //                                                       .lock
		.mm_to_mac_avalon_universal_slave_0_debugaccess                     (mm_interconnect_0_mm_to_mac_avalon_universal_slave_0_debugaccess),     //                                                       .debugaccess
		.mm_to_phy_avalon_universal_slave_0_address                         (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_address),         //                     mm_to_phy_avalon_universal_slave_0.address
		.mm_to_phy_avalon_universal_slave_0_write                           (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_write),           //                                                       .write
		.mm_to_phy_avalon_universal_slave_0_read                            (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_read),            //                                                       .read
		.mm_to_phy_avalon_universal_slave_0_readdata                        (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_readdata),        //                                                       .readdata
		.mm_to_phy_avalon_universal_slave_0_writedata                       (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_writedata),       //                                                       .writedata
		.mm_to_phy_avalon_universal_slave_0_burstcount                      (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_burstcount),      //                                                       .burstcount
		.mm_to_phy_avalon_universal_slave_0_byteenable                      (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_byteenable),      //                                                       .byteenable
		.mm_to_phy_avalon_universal_slave_0_readdatavalid                   (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_readdatavalid),   //                                                       .readdatavalid
		.mm_to_phy_avalon_universal_slave_0_waitrequest                     (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_waitrequest),     //                                                       .waitrequest
		.mm_to_phy_avalon_universal_slave_0_lock                            (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_lock),            //                                                       .lock
		.mm_to_phy_avalon_universal_slave_0_debugaccess                     (mm_interconnect_0_mm_to_phy_avalon_universal_slave_0_debugaccess),     //                                                       .debugaccess
		.rx_sc_fifo_avalon_universal_slave_0_address                        (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_address),        //                    rx_sc_fifo_avalon_universal_slave_0.address
		.rx_sc_fifo_avalon_universal_slave_0_write                          (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_write),          //                                                       .write
		.rx_sc_fifo_avalon_universal_slave_0_read                           (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_read),           //                                                       .read
		.rx_sc_fifo_avalon_universal_slave_0_readdata                       (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_readdata),       //                                                       .readdata
		.rx_sc_fifo_avalon_universal_slave_0_writedata                      (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_writedata),      //                                                       .writedata
		.rx_sc_fifo_avalon_universal_slave_0_burstcount                     (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_burstcount),     //                                                       .burstcount
		.rx_sc_fifo_avalon_universal_slave_0_byteenable                     (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_byteenable),     //                                                       .byteenable
		.rx_sc_fifo_avalon_universal_slave_0_readdatavalid                  (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_readdatavalid),  //                                                       .readdatavalid
		.rx_sc_fifo_avalon_universal_slave_0_waitrequest                    (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_waitrequest),    //                                                       .waitrequest
		.rx_sc_fifo_avalon_universal_slave_0_lock                           (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_lock),           //                                                       .lock
		.rx_sc_fifo_avalon_universal_slave_0_debugaccess                    (mm_interconnect_0_rx_sc_fifo_avalon_universal_slave_0_debugaccess),    //                                                       .debugaccess
		.tx_sc_fifo_avalon_universal_slave_0_address                        (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_address),        //                    tx_sc_fifo_avalon_universal_slave_0.address
		.tx_sc_fifo_avalon_universal_slave_0_write                          (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_write),          //                                                       .write
		.tx_sc_fifo_avalon_universal_slave_0_read                           (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_read),           //                                                       .read
		.tx_sc_fifo_avalon_universal_slave_0_readdata                       (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_readdata),       //                                                       .readdata
		.tx_sc_fifo_avalon_universal_slave_0_writedata                      (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_writedata),      //                                                       .writedata
		.tx_sc_fifo_avalon_universal_slave_0_burstcount                     (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_burstcount),     //                                                       .burstcount
		.tx_sc_fifo_avalon_universal_slave_0_byteenable                     (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_byteenable),     //                                                       .byteenable
		.tx_sc_fifo_avalon_universal_slave_0_readdatavalid                  (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_readdatavalid),  //                                                       .readdatavalid
		.tx_sc_fifo_avalon_universal_slave_0_waitrequest                    (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_waitrequest),    //                                                       .waitrequest
		.tx_sc_fifo_avalon_universal_slave_0_lock                           (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_lock),           //                                                       .lock
		.tx_sc_fifo_avalon_universal_slave_0_debugaccess                    (mm_interconnect_0_tx_sc_fifo_avalon_universal_slave_0_debugaccess),    //                                                       .debugaccess
		.tx_sc_fifo_reset_reset_bridge_in_reset_reset                       (rst_controller_reset_out_reset),                                       //                 tx_sc_fifo_reset_reset_bridge_in_reset.reset
		.tx_xcvr_half_clk_clk_clk                                           (tx_xcvr_half_clk_clk)                                                  //                                   tx_xcvr_half_clk_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~sync_tx_half_rst_reset_n),      // reset_in0.reset
		.clk            (tx_xcvr_half_clk_clk),           //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
