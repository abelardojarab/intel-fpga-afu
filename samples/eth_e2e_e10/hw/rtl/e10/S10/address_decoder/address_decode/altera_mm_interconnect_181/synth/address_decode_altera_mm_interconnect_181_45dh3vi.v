// address_decode_altera_mm_interconnect_181_45dh3vi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module address_decode_altera_mm_interconnect_181_45dh3vi (
		input  wire [31:0] merlin_master_translator_0_avalon_universal_master_0_address,       //   merlin_master_translator_0_avalon_universal_master_0.address
		output wire        merlin_master_translator_0_avalon_universal_master_0_waitrequest,   //                                                       .waitrequest
		input  wire [9:0]  merlin_master_translator_0_avalon_universal_master_0_burstcount,    //                                                       .burstcount
		input  wire [3:0]  merlin_master_translator_0_avalon_universal_master_0_byteenable,    //                                                       .byteenable
		input  wire        merlin_master_translator_0_avalon_universal_master_0_read,          //                                                       .read
		output wire [31:0] merlin_master_translator_0_avalon_universal_master_0_readdata,      //                                                       .readdata
		output wire        merlin_master_translator_0_avalon_universal_master_0_readdatavalid, //                                                       .readdatavalid
		input  wire        merlin_master_translator_0_avalon_universal_master_0_write,         //                                                       .write
		input  wire [31:0] merlin_master_translator_0_avalon_universal_master_0_writedata,     //                                                       .writedata
		input  wire        merlin_master_translator_0_avalon_universal_master_0_lock,          //                                                       .lock
		input  wire        merlin_master_translator_0_avalon_universal_master_0_debugaccess,   //                                                       .debugaccess
		output wire [14:0] mm_to_mac_0_avalon_universal_slave_0_address,                       //                   mm_to_mac_0_avalon_universal_slave_0.address
		output wire        mm_to_mac_0_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_0_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_0_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_0_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_0_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_0_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_0_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_0_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_0_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_0_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_0_avalon_universal_slave_0_address,                       //                   mm_to_phy_0_avalon_universal_slave_0.address
		output wire        mm_to_phy_0_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_0_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_0_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_0_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_0_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_0_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_0_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_0_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_0_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_0_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_0_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_0_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_0_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_0_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_0_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_0_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_0_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_0_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_0_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_0_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_0_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_0_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_0_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_0_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_0_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_0_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_0_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_0_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_0_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_0_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_0_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_0_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_0_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_0_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_0_avalon_universal_slave_0_address,                     //                 eth_gen_mon_0_avalon_universal_slave_0.address
		output wire        eth_gen_mon_0_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_0_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_0_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_0_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_0_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_0_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_0_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_0_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_0_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_0_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_1_avalon_universal_slave_0_address,                       //                   mm_to_mac_1_avalon_universal_slave_0.address
		output wire        mm_to_mac_1_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_1_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_1_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_1_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_1_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_1_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_1_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_1_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_1_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_1_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_1_avalon_universal_slave_0_address,                       //                   mm_to_phy_1_avalon_universal_slave_0.address
		output wire        mm_to_phy_1_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_1_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_1_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_1_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_1_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_1_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_1_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_1_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_1_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_1_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_1_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_1_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_1_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_1_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_1_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_1_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_1_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_1_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_1_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_1_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_1_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_1_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_1_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_1_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_1_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_1_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_1_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_1_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_1_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_1_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_1_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_1_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_1_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_1_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_1_avalon_universal_slave_0_address,                     //                 eth_gen_mon_1_avalon_universal_slave_0.address
		output wire        eth_gen_mon_1_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_1_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_1_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_1_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_1_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_1_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_1_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_1_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_1_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_1_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_2_avalon_universal_slave_0_address,                       //                   mm_to_mac_2_avalon_universal_slave_0.address
		output wire        mm_to_mac_2_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_2_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_2_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_2_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_2_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_2_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_2_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_2_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_2_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_2_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_2_avalon_universal_slave_0_address,                       //                   mm_to_phy_2_avalon_universal_slave_0.address
		output wire        mm_to_phy_2_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_2_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_2_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_2_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_2_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_2_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_2_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_2_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_2_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_2_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_2_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_2_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_2_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_2_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_2_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_2_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_2_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_2_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_2_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_2_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_2_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_2_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_2_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_2_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_2_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_2_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_2_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_2_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_2_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_2_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_2_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_2_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_2_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_2_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_2_avalon_universal_slave_0_address,                     //                 eth_gen_mon_2_avalon_universal_slave_0.address
		output wire        eth_gen_mon_2_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_2_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_2_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_2_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_2_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_2_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_2_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_2_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_2_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_2_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_3_avalon_universal_slave_0_address,                       //                   mm_to_mac_3_avalon_universal_slave_0.address
		output wire        mm_to_mac_3_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_3_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_3_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_3_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_3_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_3_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_3_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_3_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_3_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_3_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_3_avalon_universal_slave_0_address,                       //                   mm_to_phy_3_avalon_universal_slave_0.address
		output wire        mm_to_phy_3_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_3_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_3_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_3_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_3_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_3_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_3_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_3_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_3_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_3_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_3_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_3_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_3_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_3_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_3_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_3_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_3_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_3_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_3_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_3_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_3_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_3_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_3_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_3_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_3_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_3_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_3_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_3_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_3_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_3_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_3_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_3_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_3_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_3_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_3_avalon_universal_slave_0_address,                     //                 eth_gen_mon_3_avalon_universal_slave_0.address
		output wire        eth_gen_mon_3_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_3_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_3_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_3_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_3_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_3_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_3_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_3_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_3_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_3_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_4_avalon_universal_slave_0_address,                       //                   mm_to_mac_4_avalon_universal_slave_0.address
		output wire        mm_to_mac_4_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_4_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_4_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_4_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_4_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_4_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_4_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_4_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_4_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_4_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_4_avalon_universal_slave_0_address,                       //                   mm_to_phy_4_avalon_universal_slave_0.address
		output wire        mm_to_phy_4_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_4_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_4_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_4_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_4_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_4_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_4_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_4_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_4_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_4_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_4_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_4_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_4_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_4_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_4_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_4_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_4_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_4_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_4_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_4_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_4_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_4_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_4_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_4_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_4_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_4_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_4_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_4_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_4_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_4_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_4_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_4_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_4_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_4_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_4_avalon_universal_slave_0_address,                     //                 eth_gen_mon_4_avalon_universal_slave_0.address
		output wire        eth_gen_mon_4_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_4_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_4_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_4_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_4_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_4_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_4_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_4_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_4_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_4_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_5_avalon_universal_slave_0_address,                       //                   mm_to_mac_5_avalon_universal_slave_0.address
		output wire        mm_to_mac_5_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_5_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_5_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_5_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_5_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_5_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_5_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_5_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_5_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_5_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_5_avalon_universal_slave_0_address,                       //                   mm_to_phy_5_avalon_universal_slave_0.address
		output wire        mm_to_phy_5_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_5_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_5_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_5_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_5_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_5_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_5_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_5_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_5_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_5_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_5_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_5_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_5_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_5_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_5_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_5_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_5_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_5_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_5_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_5_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_5_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_5_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_5_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_5_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_5_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_5_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_5_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_5_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_5_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_5_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_5_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_5_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_5_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_5_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_5_avalon_universal_slave_0_address,                     //                 eth_gen_mon_5_avalon_universal_slave_0.address
		output wire        eth_gen_mon_5_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_5_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_5_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_5_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_5_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_5_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_5_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_5_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_5_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_5_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_6_avalon_universal_slave_0_address,                       //                   mm_to_mac_6_avalon_universal_slave_0.address
		output wire        mm_to_mac_6_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_6_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_6_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_6_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_6_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_6_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_6_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_6_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_6_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_6_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_6_avalon_universal_slave_0_address,                       //                   mm_to_phy_6_avalon_universal_slave_0.address
		output wire        mm_to_phy_6_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_6_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_6_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_6_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_6_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_6_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_6_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_6_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_6_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_6_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_6_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_6_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_6_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_6_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_6_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_6_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_6_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_6_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_6_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_6_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_6_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_6_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_6_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_6_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_6_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_6_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_6_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_6_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_6_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_6_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_6_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_6_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_6_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_6_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_6_avalon_universal_slave_0_address,                     //                 eth_gen_mon_6_avalon_universal_slave_0.address
		output wire        eth_gen_mon_6_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_6_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_6_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_6_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_6_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_6_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_6_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_6_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_6_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_6_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_7_avalon_universal_slave_0_address,                       //                   mm_to_mac_7_avalon_universal_slave_0.address
		output wire        mm_to_mac_7_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_7_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_7_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_7_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_7_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_7_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_7_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_7_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_7_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_7_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_7_avalon_universal_slave_0_address,                       //                   mm_to_phy_7_avalon_universal_slave_0.address
		output wire        mm_to_phy_7_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_7_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_7_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_7_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_7_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_7_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_7_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_7_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_7_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_7_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_7_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_7_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_7_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_7_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_7_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_7_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_7_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_7_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_7_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_7_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_7_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_7_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_7_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_7_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_7_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_7_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_7_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_7_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_7_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_7_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_7_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_7_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_7_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_7_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_7_avalon_universal_slave_0_address,                     //                 eth_gen_mon_7_avalon_universal_slave_0.address
		output wire        eth_gen_mon_7_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_7_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_7_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_7_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_7_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_7_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_7_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_7_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_7_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_7_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_8_avalon_universal_slave_0_address,                       //                   mm_to_mac_8_avalon_universal_slave_0.address
		output wire        mm_to_mac_8_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_8_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_8_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_8_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_8_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_8_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_8_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_8_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_8_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_8_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_8_avalon_universal_slave_0_address,                       //                   mm_to_phy_8_avalon_universal_slave_0.address
		output wire        mm_to_phy_8_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_8_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_8_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_8_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_8_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_8_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_8_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_8_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_8_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_8_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_8_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_8_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_8_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_8_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_8_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_8_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_8_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_8_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_8_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_8_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_8_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_8_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_8_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_8_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_8_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_8_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_8_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_8_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_8_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_8_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_8_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_8_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_8_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_8_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_8_avalon_universal_slave_0_address,                     //                 eth_gen_mon_8_avalon_universal_slave_0.address
		output wire        eth_gen_mon_8_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_8_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_8_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_8_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_8_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_8_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_8_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_8_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_8_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_8_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_9_avalon_universal_slave_0_address,                       //                   mm_to_mac_9_avalon_universal_slave_0.address
		output wire        mm_to_mac_9_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_mac_9_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_mac_9_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_mac_9_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_mac_9_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_mac_9_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_mac_9_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_mac_9_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_mac_9_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_mac_9_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [12:0] mm_to_phy_9_avalon_universal_slave_0_address,                       //                   mm_to_phy_9_avalon_universal_slave_0.address
		output wire        mm_to_phy_9_avalon_universal_slave_0_write,                         //                                                       .write
		output wire        mm_to_phy_9_avalon_universal_slave_0_read,                          //                                                       .read
		input  wire [31:0] mm_to_phy_9_avalon_universal_slave_0_readdata,                      //                                                       .readdata
		output wire [31:0] mm_to_phy_9_avalon_universal_slave_0_writedata,                     //                                                       .writedata
		output wire [3:0]  mm_to_phy_9_avalon_universal_slave_0_burstcount,                    //                                                       .burstcount
		output wire [3:0]  mm_to_phy_9_avalon_universal_slave_0_byteenable,                    //                                                       .byteenable
		input  wire        mm_to_phy_9_avalon_universal_slave_0_readdatavalid,                 //                                                       .readdatavalid
		input  wire        mm_to_phy_9_avalon_universal_slave_0_waitrequest,                   //                                                       .waitrequest
		output wire        mm_to_phy_9_avalon_universal_slave_0_lock,                          //                                                       .lock
		output wire        mm_to_phy_9_avalon_universal_slave_0_debugaccess,                   //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_9_avalon_universal_slave_0_address,                      //                  rx_sc_fifo_9_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_9_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        rx_sc_fifo_9_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] rx_sc_fifo_9_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] rx_sc_fifo_9_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_9_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_9_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        rx_sc_fifo_9_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        rx_sc_fifo_9_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        rx_sc_fifo_9_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        rx_sc_fifo_9_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_9_avalon_universal_slave_0_address,                      //                  tx_sc_fifo_9_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_9_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        tx_sc_fifo_9_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] tx_sc_fifo_9_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] tx_sc_fifo_9_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_9_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_9_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        tx_sc_fifo_9_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        tx_sc_fifo_9_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        tx_sc_fifo_9_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        tx_sc_fifo_9_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_9_avalon_universal_slave_0_address,                     //                 eth_gen_mon_9_avalon_universal_slave_0.address
		output wire        eth_gen_mon_9_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        eth_gen_mon_9_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] eth_gen_mon_9_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] eth_gen_mon_9_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  eth_gen_mon_9_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_9_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        eth_gen_mon_9_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        eth_gen_mon_9_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        eth_gen_mon_9_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        eth_gen_mon_9_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [14:0] mm_to_mac_10_avalon_universal_slave_0_address,                      //                  mm_to_mac_10_avalon_universal_slave_0.address
		output wire        mm_to_mac_10_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        mm_to_mac_10_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] mm_to_mac_10_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] mm_to_mac_10_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  mm_to_mac_10_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  mm_to_mac_10_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        mm_to_mac_10_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        mm_to_mac_10_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        mm_to_mac_10_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        mm_to_mac_10_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [12:0] mm_to_phy_10_avalon_universal_slave_0_address,                      //                  mm_to_phy_10_avalon_universal_slave_0.address
		output wire        mm_to_phy_10_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        mm_to_phy_10_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] mm_to_phy_10_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] mm_to_phy_10_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  mm_to_phy_10_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  mm_to_phy_10_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        mm_to_phy_10_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        mm_to_phy_10_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        mm_to_phy_10_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        mm_to_phy_10_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_10_avalon_universal_slave_0_address,                     //                 rx_sc_fifo_10_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_10_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        rx_sc_fifo_10_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] rx_sc_fifo_10_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] rx_sc_fifo_10_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_10_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_10_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        rx_sc_fifo_10_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        rx_sc_fifo_10_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        rx_sc_fifo_10_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        rx_sc_fifo_10_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_10_avalon_universal_slave_0_address,                     //                 tx_sc_fifo_10_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_10_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        tx_sc_fifo_10_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] tx_sc_fifo_10_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] tx_sc_fifo_10_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_10_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_10_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        tx_sc_fifo_10_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        tx_sc_fifo_10_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        tx_sc_fifo_10_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        tx_sc_fifo_10_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_10_avalon_universal_slave_0_address,                    //                eth_gen_mon_10_avalon_universal_slave_0.address
		output wire        eth_gen_mon_10_avalon_universal_slave_0_write,                      //                                                       .write
		output wire        eth_gen_mon_10_avalon_universal_slave_0_read,                       //                                                       .read
		input  wire [31:0] eth_gen_mon_10_avalon_universal_slave_0_readdata,                   //                                                       .readdata
		output wire [31:0] eth_gen_mon_10_avalon_universal_slave_0_writedata,                  //                                                       .writedata
		output wire [3:0]  eth_gen_mon_10_avalon_universal_slave_0_burstcount,                 //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_10_avalon_universal_slave_0_byteenable,                 //                                                       .byteenable
		input  wire        eth_gen_mon_10_avalon_universal_slave_0_readdatavalid,              //                                                       .readdatavalid
		input  wire        eth_gen_mon_10_avalon_universal_slave_0_waitrequest,                //                                                       .waitrequest
		output wire        eth_gen_mon_10_avalon_universal_slave_0_lock,                       //                                                       .lock
		output wire        eth_gen_mon_10_avalon_universal_slave_0_debugaccess,                //                                                       .debugaccess
		output wire [14:0] mm_to_mac_11_avalon_universal_slave_0_address,                      //                  mm_to_mac_11_avalon_universal_slave_0.address
		output wire        mm_to_mac_11_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        mm_to_mac_11_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] mm_to_mac_11_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] mm_to_mac_11_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  mm_to_mac_11_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  mm_to_mac_11_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        mm_to_mac_11_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        mm_to_mac_11_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        mm_to_mac_11_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        mm_to_mac_11_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [12:0] mm_to_phy_11_avalon_universal_slave_0_address,                      //                  mm_to_phy_11_avalon_universal_slave_0.address
		output wire        mm_to_phy_11_avalon_universal_slave_0_write,                        //                                                       .write
		output wire        mm_to_phy_11_avalon_universal_slave_0_read,                         //                                                       .read
		input  wire [31:0] mm_to_phy_11_avalon_universal_slave_0_readdata,                     //                                                       .readdata
		output wire [31:0] mm_to_phy_11_avalon_universal_slave_0_writedata,                    //                                                       .writedata
		output wire [3:0]  mm_to_phy_11_avalon_universal_slave_0_burstcount,                   //                                                       .burstcount
		output wire [3:0]  mm_to_phy_11_avalon_universal_slave_0_byteenable,                   //                                                       .byteenable
		input  wire        mm_to_phy_11_avalon_universal_slave_0_readdatavalid,                //                                                       .readdatavalid
		input  wire        mm_to_phy_11_avalon_universal_slave_0_waitrequest,                  //                                                       .waitrequest
		output wire        mm_to_phy_11_avalon_universal_slave_0_lock,                         //                                                       .lock
		output wire        mm_to_phy_11_avalon_universal_slave_0_debugaccess,                  //                                                       .debugaccess
		output wire [4:0]  rx_sc_fifo_11_avalon_universal_slave_0_address,                     //                 rx_sc_fifo_11_avalon_universal_slave_0.address
		output wire        rx_sc_fifo_11_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        rx_sc_fifo_11_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] rx_sc_fifo_11_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] rx_sc_fifo_11_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  rx_sc_fifo_11_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  rx_sc_fifo_11_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        rx_sc_fifo_11_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        rx_sc_fifo_11_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        rx_sc_fifo_11_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        rx_sc_fifo_11_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [4:0]  tx_sc_fifo_11_avalon_universal_slave_0_address,                     //                 tx_sc_fifo_11_avalon_universal_slave_0.address
		output wire        tx_sc_fifo_11_avalon_universal_slave_0_write,                       //                                                       .write
		output wire        tx_sc_fifo_11_avalon_universal_slave_0_read,                        //                                                       .read
		input  wire [31:0] tx_sc_fifo_11_avalon_universal_slave_0_readdata,                    //                                                       .readdata
		output wire [31:0] tx_sc_fifo_11_avalon_universal_slave_0_writedata,                   //                                                       .writedata
		output wire [3:0]  tx_sc_fifo_11_avalon_universal_slave_0_burstcount,                  //                                                       .burstcount
		output wire [3:0]  tx_sc_fifo_11_avalon_universal_slave_0_byteenable,                  //                                                       .byteenable
		input  wire        tx_sc_fifo_11_avalon_universal_slave_0_readdatavalid,               //                                                       .readdatavalid
		input  wire        tx_sc_fifo_11_avalon_universal_slave_0_waitrequest,                 //                                                       .waitrequest
		output wire        tx_sc_fifo_11_avalon_universal_slave_0_lock,                        //                                                       .lock
		output wire        tx_sc_fifo_11_avalon_universal_slave_0_debugaccess,                 //                                                       .debugaccess
		output wire [13:0] eth_gen_mon_11_avalon_universal_slave_0_address,                    //                eth_gen_mon_11_avalon_universal_slave_0.address
		output wire        eth_gen_mon_11_avalon_universal_slave_0_write,                      //                                                       .write
		output wire        eth_gen_mon_11_avalon_universal_slave_0_read,                       //                                                       .read
		input  wire [31:0] eth_gen_mon_11_avalon_universal_slave_0_readdata,                   //                                                       .readdata
		output wire [31:0] eth_gen_mon_11_avalon_universal_slave_0_writedata,                  //                                                       .writedata
		output wire [3:0]  eth_gen_mon_11_avalon_universal_slave_0_burstcount,                 //                                                       .burstcount
		output wire [3:0]  eth_gen_mon_11_avalon_universal_slave_0_byteenable,                 //                                                       .byteenable
		input  wire        eth_gen_mon_11_avalon_universal_slave_0_readdatavalid,              //                                                       .readdatavalid
		input  wire        eth_gen_mon_11_avalon_universal_slave_0_waitrequest,                //                                                       .waitrequest
		output wire        eth_gen_mon_11_avalon_universal_slave_0_lock,                       //                                                       .lock
		output wire        eth_gen_mon_11_avalon_universal_slave_0_debugaccess,                //                                                       .debugaccess
		input  wire        merlin_master_translator_0_reset_reset_bridge_in_reset_reset,       // merlin_master_translator_0_reset_reset_bridge_in_reset.reset
		input  wire        tx_sc_fifo_0_reset_reset_bridge_in_reset_reset,                     //               tx_sc_fifo_0_reset_reset_bridge_in_reset.reset
		input  wire        clk_csr_clk_clk,                                                    //                                            clk_csr_clk.clk
		input  wire        tx_xcvr_half_clk_clk_clk                                            //                                   tx_xcvr_half_clk_clk.clk
	);

	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest;   // merlin_master_translator_0_avalon_universal_master_0_agent:av_waitrequest -> merlin_master_translator_0_avalon_universal_master_0_translator:uav_waitrequest
	wire   [31:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdata;      // merlin_master_translator_0_avalon_universal_master_0_agent:av_readdata -> merlin_master_translator_0_avalon_universal_master_0_translator:uav_readdata
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess;   // merlin_master_translator_0_avalon_universal_master_0_translator:uav_debugaccess -> merlin_master_translator_0_avalon_universal_master_0_agent:av_debugaccess
	wire   [31:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_address;       // merlin_master_translator_0_avalon_universal_master_0_translator:uav_address -> merlin_master_translator_0_avalon_universal_master_0_agent:av_address
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_read;          // merlin_master_translator_0_avalon_universal_master_0_translator:uav_read -> merlin_master_translator_0_avalon_universal_master_0_agent:av_read
	wire    [3:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable;    // merlin_master_translator_0_avalon_universal_master_0_translator:uav_byteenable -> merlin_master_translator_0_avalon_universal_master_0_agent:av_byteenable
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid; // merlin_master_translator_0_avalon_universal_master_0_agent:av_readdatavalid -> merlin_master_translator_0_avalon_universal_master_0_translator:uav_readdatavalid
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_lock;          // merlin_master_translator_0_avalon_universal_master_0_translator:uav_lock -> merlin_master_translator_0_avalon_universal_master_0_agent:av_lock
	wire          merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_write;         // merlin_master_translator_0_avalon_universal_master_0_translator:uav_write -> merlin_master_translator_0_avalon_universal_master_0_agent:av_write
	wire   [31:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_writedata;     // merlin_master_translator_0_avalon_universal_master_0_translator:uav_writedata -> merlin_master_translator_0_avalon_universal_master_0_agent:av_writedata
	wire    [9:0] merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount;    // merlin_master_translator_0_avalon_universal_master_0_translator:uav_burstcount -> merlin_master_translator_0_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] mm_to_mac_0_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_0_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_0_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_0_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_0_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_0_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_0_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_0_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_0_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_0_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_0_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_0_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_0_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_0_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_0_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_0_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_0_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_0_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_0_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_0_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_0_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_0_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_0_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_0_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_0_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_0_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_0_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_0_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_0_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_0_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_0_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_0_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_0_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_0_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_0_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_0_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_0_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_0_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_0_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_0_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_0_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_0_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_0_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_0_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_0_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_0_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_0_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_0_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_0_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_0_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_0_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_0_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_0_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_0_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_0_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_0_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_0_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_0_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_0_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_0_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_0_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_0_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_0_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_0_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_0_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_0_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_0_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_0_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_0_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_0_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_0_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_0_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_0_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_0_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_0_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_0_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_0_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_0_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_0_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_0_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_0_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_0_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_0_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_0_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_0_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_0_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_0_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_0_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_0_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_0_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_0_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_0_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_0_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_0_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_0_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_0_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_0_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_0_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_0_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_0_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_0_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_0_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_0_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_0_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_0_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_0_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_1_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_1_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_1_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_1_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_1_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_1_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_1_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_1_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_1_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_1_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_1_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_1_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_1_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_1_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_1_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_1_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_1_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_1_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_1_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_1_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_1_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_1_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_1_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_1_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_1_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_1_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_1_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_1_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_1_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_1_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_1_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_1_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_1_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_1_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_1_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_1_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_1_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_1_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_1_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_1_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_1_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_1_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_1_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_1_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_1_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_1_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_1_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_1_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_1_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_1_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_1_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_1_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_1_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_1_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_1_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_1_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_1_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_1_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_1_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_1_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_1_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_1_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_1_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_1_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_1_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_1_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_1_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_1_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_1_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_1_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_1_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_1_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_1_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_1_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_1_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_1_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_1_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_1_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_1_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_1_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_1_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_1_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_1_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_1_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_1_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_1_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_1_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_1_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_1_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_1_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_1_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_1_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_1_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_1_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_1_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_1_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_1_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_1_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_1_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_1_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_1_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_1_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_1_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_1_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_1_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_1_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_2_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_2_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_2_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_2_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_2_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_2_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_2_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_2_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_2_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_2_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_2_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_2_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_2_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_2_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_2_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_2_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_2_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_2_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_2_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_2_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_2_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_2_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_2_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_2_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_2_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_2_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_2_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_2_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_2_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_2_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_2_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_2_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_2_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_2_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_2_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_2_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_2_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_2_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_2_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_2_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_2_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_2_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_2_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_2_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_2_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_2_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_2_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_2_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_2_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_2_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_2_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_2_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_2_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_2_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_2_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_2_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_2_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_2_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_2_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_2_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_2_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_2_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_2_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_2_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_2_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_2_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_2_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_2_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_2_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_2_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_2_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_2_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_2_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_2_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_2_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_2_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_2_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_2_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_2_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_2_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_2_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_2_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_2_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_2_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_2_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_2_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_2_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_2_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_2_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_2_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_2_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_2_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_2_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_2_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_2_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_2_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_2_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_2_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_2_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_2_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_2_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_2_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_2_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_2_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_2_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_2_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_3_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_3_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_3_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_3_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_3_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_3_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_3_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_3_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_3_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_3_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_3_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_3_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_3_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_3_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_3_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_3_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_3_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_3_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_3_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_3_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_3_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_3_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_3_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_3_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_3_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_3_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_3_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_3_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_3_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_3_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_3_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_3_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_3_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_3_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_3_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_3_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_3_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_3_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_3_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_3_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_3_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_3_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_3_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_3_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_3_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_3_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_3_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_3_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_3_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_3_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_3_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_3_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_3_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_3_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_3_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_3_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_3_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_3_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_3_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_3_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_3_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_3_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_3_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_3_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_3_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_3_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_3_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_3_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_3_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_3_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_3_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_3_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_3_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_3_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_3_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_3_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_3_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_3_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_3_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_3_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_3_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_3_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_3_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_3_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_3_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_3_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_3_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_3_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_3_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_3_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_3_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_3_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_3_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_3_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_3_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_3_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_3_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_3_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_3_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_3_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_3_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_3_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_3_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_3_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_3_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_3_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_4_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_4_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_4_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_4_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_4_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_4_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_4_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_4_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_4_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_4_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_4_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_4_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_4_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_4_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_4_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_4_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_4_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_4_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_4_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_4_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_4_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_4_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_4_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_4_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_4_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_4_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_4_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_4_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_4_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_4_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_4_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_4_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_4_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_4_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_4_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_4_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_4_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_4_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_4_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_4_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_4_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_4_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_4_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_4_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_4_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_4_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_4_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_4_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_4_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_4_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_4_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_4_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_4_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_4_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_4_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_4_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_4_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_4_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_4_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_4_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_4_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_4_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_4_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_4_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_4_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_4_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_4_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_4_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_4_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_4_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_4_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_4_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_4_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_4_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_4_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_4_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_4_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_4_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_4_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_4_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_4_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_4_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_4_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_4_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_4_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_4_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_4_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_4_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_4_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_4_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_4_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_4_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_4_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_4_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_4_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_4_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_4_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_4_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_4_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_4_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_4_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_4_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_4_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_4_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_4_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_4_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_5_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_5_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_5_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_5_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_5_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_5_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_5_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_5_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_5_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_5_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_5_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_5_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_5_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_5_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_5_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_5_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_5_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_5_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_5_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_5_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_5_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_5_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_5_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_5_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_5_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_5_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_5_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_5_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_5_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_5_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_5_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_5_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_5_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_5_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_5_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_5_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_5_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_5_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_5_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_5_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_5_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_5_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_5_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_5_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_5_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_5_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_5_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_5_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_5_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_5_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_5_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_5_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_5_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_5_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_5_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_5_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_5_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_5_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_5_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_5_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_5_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_5_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_5_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_5_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_5_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_5_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_5_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_5_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_5_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_5_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_5_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_5_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_5_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_5_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_5_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_5_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_5_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_5_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_5_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_5_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_5_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_5_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_5_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_5_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_5_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_5_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_5_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_5_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_5_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_5_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_5_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_5_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_5_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_5_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_5_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_5_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_5_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_5_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_5_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_5_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_5_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_5_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_5_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_5_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_5_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_5_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_6_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_6_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_6_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_6_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_6_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_6_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_6_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_6_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_6_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_6_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_6_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_6_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_6_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_6_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_6_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_6_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_6_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_6_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_6_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_6_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_6_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_6_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_6_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_6_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_6_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_6_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_6_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_6_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_6_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_6_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_6_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_6_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_6_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_6_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_6_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_6_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_6_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_6_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_6_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_6_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_6_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_6_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_6_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_6_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_6_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_6_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_6_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_6_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_6_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_6_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_6_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_6_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_6_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_6_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_6_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_6_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_6_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_6_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_6_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_6_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_6_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_6_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_6_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_6_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_6_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_6_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_6_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_6_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_6_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_6_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_6_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_6_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_6_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_6_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_6_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_6_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_6_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_6_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_6_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_6_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_6_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_6_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_6_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_6_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_6_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_6_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_6_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_6_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_6_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_6_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_6_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_6_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_6_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_6_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_6_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_6_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_6_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_6_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_6_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_6_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_6_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_6_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_6_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_6_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_6_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_6_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_7_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_7_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_7_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_7_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_7_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_7_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_7_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_7_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_7_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_7_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_7_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_7_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_7_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_7_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_7_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_7_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_7_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_7_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_7_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_7_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_7_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_7_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_7_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_7_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_7_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_7_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_7_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_7_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_7_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_7_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_7_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_7_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_7_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_7_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_7_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_7_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_7_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_7_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_7_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_7_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_7_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_7_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_7_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_7_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_7_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_7_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_7_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_7_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_7_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_7_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_7_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_7_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_7_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_7_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_7_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_7_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_7_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_7_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_7_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_7_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_7_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_7_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_7_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_7_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_7_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_7_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_7_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_7_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_7_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_7_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_7_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_7_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_7_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_7_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_7_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_7_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_7_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_7_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_7_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_7_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_7_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_7_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_7_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_7_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_7_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_7_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_7_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_7_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_7_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_7_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_7_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_7_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_7_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_7_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_7_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_7_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_7_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_7_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_7_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_7_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_7_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_7_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_7_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_7_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_7_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_7_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_8_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_8_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_8_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_8_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_8_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_8_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_8_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_8_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_8_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_8_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_8_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_8_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_8_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_8_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_8_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_8_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_8_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_8_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_8_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_8_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_8_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_8_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_8_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_8_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_8_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_8_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_8_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_8_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_8_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_8_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_8_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_8_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_8_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_8_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_8_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_8_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_8_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_8_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_8_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_8_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_8_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_8_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_8_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_8_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_8_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_8_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_8_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_8_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_8_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_8_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_8_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_8_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_8_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_8_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_8_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_8_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_8_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_8_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_8_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_8_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_8_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_8_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_8_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_8_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_8_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_8_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_8_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_8_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_8_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_8_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_8_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_8_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_8_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_8_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_8_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_8_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_8_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_8_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_8_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_8_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_8_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_8_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_8_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_8_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_8_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_8_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_8_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_8_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_8_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_8_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_8_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_8_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_8_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_8_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_8_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_8_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_8_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_8_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_8_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_8_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_8_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_8_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_8_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_8_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_8_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_8_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_9_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_mac_9_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_9_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_mac_9_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_9_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_mac_9_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_9_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_mac_9_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_9_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_mac_9_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_mac_9_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_mac_9_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_9_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_mac_9_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_9_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_mac_9_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_mac_9_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_9_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_mac_9_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_9_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_mac_9_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_mac_9_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_9_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_mac_9_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_mac_9_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_9_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_9_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_mac_9_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_9_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_9_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_mac_9_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_9_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_mac_9_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_9_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_mac_9_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_9_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_9_avalon_universal_slave_0_agent_m0_readdata;                                                  // mm_to_phy_9_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_9_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_m0_waitrequest;                                               // mm_to_phy_9_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_9_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_m0_debugaccess;                                               // mm_to_phy_9_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_9_avalon_universal_slave_0_agent_m0_address;                                                   // mm_to_phy_9_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_9_avalon_universal_slave_0_agent_m0_byteenable;                                                // mm_to_phy_9_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_m0_read;                                                      // mm_to_phy_9_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_m0_readdatavalid;                                             // mm_to_phy_9_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_9_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_m0_lock;                                                      // mm_to_phy_9_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_9_avalon_universal_slave_0_agent_m0_writedata;                                                 // mm_to_phy_9_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_m0_write;                                                     // mm_to_phy_9_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_9_avalon_universal_slave_0_agent_m0_burstcount;                                                // mm_to_phy_9_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_9_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_valid;                                              // mm_to_phy_9_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_data;                                               // mm_to_phy_9_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_ready;                                              // mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_9_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_startofpacket;                                      // mm_to_phy_9_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_endofpacket;                                        // mm_to_phy_9_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                           // mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_9_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                            // mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_9_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                           // mm_to_phy_9_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                   // mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_9_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                     // mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_9_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                         // mm_to_phy_9_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_9_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                          // mm_to_phy_9_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_9_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                         // mm_to_phy_9_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_9_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdata;                                                 // rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_waitrequest;                                              // rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_debugaccess;                                              // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_address;                                                  // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_byteenable;                                               // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_read;                                                     // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_lock;                                                     // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_writedata;                                                // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_write;                                                    // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_burstcount;                                               // rx_sc_fifo_9_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_9_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_valid;                                             // rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_data;                                              // rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_ready;                                             // rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // rx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // rx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // rx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdata;                                                 // tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_waitrequest;                                              // tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_debugaccess;                                              // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_address;                                                  // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_byteenable;                                               // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_read;                                                     // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_lock;                                                     // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_writedata;                                                // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_write;                                                    // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_burstcount;                                               // tx_sc_fifo_9_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_9_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_valid;                                             // tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_data;                                              // tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_ready;                                             // tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // tx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // tx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                        // tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                         // tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                        // tx_sc_fifo_9_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_9_avalon_universal_slave_0_agent_m0_readdata;                                                // eth_gen_mon_9_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_9_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_m0_waitrequest;                                             // eth_gen_mon_9_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_9_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_m0_debugaccess;                                             // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_9_avalon_universal_slave_0_agent_m0_address;                                                 // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_9_avalon_universal_slave_0_agent_m0_byteenable;                                              // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_m0_read;                                                    // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // eth_gen_mon_9_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_9_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_m0_lock;                                                    // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_9_avalon_universal_slave_0_agent_m0_writedata;                                               // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_m0_write;                                                   // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_9_avalon_universal_slave_0_agent_m0_burstcount;                                              // eth_gen_mon_9_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_9_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_valid;                                            // eth_gen_mon_9_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_data;                                             // eth_gen_mon_9_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_ready;                                            // eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_9_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // eth_gen_mon_9_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // eth_gen_mon_9_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_9_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_9_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // eth_gen_mon_9_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_9_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_9_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // eth_gen_mon_9_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // eth_gen_mon_9_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_9_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_9_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_9_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // eth_gen_mon_9_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_10_avalon_universal_slave_0_agent_m0_readdata;                                                 // mm_to_mac_10_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_10_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_m0_waitrequest;                                              // mm_to_mac_10_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_10_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_m0_debugaccess;                                              // mm_to_mac_10_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_10_avalon_universal_slave_0_agent_m0_address;                                                  // mm_to_mac_10_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_10_avalon_universal_slave_0_agent_m0_byteenable;                                               // mm_to_mac_10_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_m0_read;                                                     // mm_to_mac_10_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // mm_to_mac_10_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_10_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_m0_lock;                                                     // mm_to_mac_10_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_10_avalon_universal_slave_0_agent_m0_writedata;                                                // mm_to_mac_10_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_m0_write;                                                    // mm_to_mac_10_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_10_avalon_universal_slave_0_agent_m0_burstcount;                                               // mm_to_mac_10_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_10_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_valid;                                             // mm_to_mac_10_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_data;                                              // mm_to_mac_10_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_ready;                                             // mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_10_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // mm_to_mac_10_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // mm_to_mac_10_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_10_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_10_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // mm_to_mac_10_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_10_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_10_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // mm_to_mac_10_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_10_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // mm_to_mac_10_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_10_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // mm_to_mac_10_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_10_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_10_avalon_universal_slave_0_agent_m0_readdata;                                                 // mm_to_phy_10_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_10_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_m0_waitrequest;                                              // mm_to_phy_10_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_10_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_m0_debugaccess;                                              // mm_to_phy_10_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_10_avalon_universal_slave_0_agent_m0_address;                                                  // mm_to_phy_10_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_10_avalon_universal_slave_0_agent_m0_byteenable;                                               // mm_to_phy_10_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_m0_read;                                                     // mm_to_phy_10_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // mm_to_phy_10_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_10_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_m0_lock;                                                     // mm_to_phy_10_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_10_avalon_universal_slave_0_agent_m0_writedata;                                                // mm_to_phy_10_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_m0_write;                                                    // mm_to_phy_10_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_10_avalon_universal_slave_0_agent_m0_burstcount;                                               // mm_to_phy_10_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_10_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_valid;                                             // mm_to_phy_10_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_data;                                              // mm_to_phy_10_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_ready;                                             // mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_10_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // mm_to_phy_10_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // mm_to_phy_10_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_10_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_10_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // mm_to_phy_10_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_10_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_10_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // mm_to_phy_10_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_10_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // mm_to_phy_10_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_10_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // mm_to_phy_10_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_10_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdata;                                                // rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_waitrequest;                                             // rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_debugaccess;                                             // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_address;                                                 // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_byteenable;                                              // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_read;                                                    // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_lock;                                                    // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_writedata;                                               // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_write;                                                   // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_burstcount;                                              // rx_sc_fifo_10_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_10_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_valid;                                            // rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_data;                                             // rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_ready;                                            // rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // rx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // rx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // rx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdata;                                                // tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_waitrequest;                                             // tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_debugaccess;                                             // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_address;                                                 // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_byteenable;                                              // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_read;                                                    // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_lock;                                                    // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_writedata;                                               // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_write;                                                   // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_burstcount;                                              // tx_sc_fifo_10_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_10_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_valid;                                            // tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_data;                                             // tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_ready;                                            // tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // tx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // tx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // tx_sc_fifo_10_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_10_avalon_universal_slave_0_agent_m0_readdata;                                               // eth_gen_mon_10_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_10_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_m0_waitrequest;                                            // eth_gen_mon_10_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_10_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_m0_debugaccess;                                            // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_10_avalon_universal_slave_0_agent_m0_address;                                                // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_10_avalon_universal_slave_0_agent_m0_byteenable;                                             // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_m0_read;                                                   // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_m0_readdatavalid;                                          // eth_gen_mon_10_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_10_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_m0_lock;                                                   // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_10_avalon_universal_slave_0_agent_m0_writedata;                                              // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_m0_write;                                                  // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_10_avalon_universal_slave_0_agent_m0_burstcount;                                             // eth_gen_mon_10_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_10_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_valid;                                           // eth_gen_mon_10_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_data;                                            // eth_gen_mon_10_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_ready;                                           // eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_10_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_startofpacket;                                   // eth_gen_mon_10_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_endofpacket;                                     // eth_gen_mon_10_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                        // eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_10_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                         // eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_10_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                        // eth_gen_mon_10_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                // eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_10_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                  // eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_10_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                      // eth_gen_mon_10_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                       // eth_gen_mon_10_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                      // eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_10_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                      // eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_10_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                       // eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_10_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                      // eth_gen_mon_10_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] mm_to_mac_11_avalon_universal_slave_0_agent_m0_readdata;                                                 // mm_to_mac_11_avalon_universal_slave_0_translator:uav_readdata -> mm_to_mac_11_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_m0_waitrequest;                                              // mm_to_mac_11_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_mac_11_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_m0_debugaccess;                                              // mm_to_mac_11_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_mac_11_avalon_universal_slave_0_agent_m0_address;                                                  // mm_to_mac_11_avalon_universal_slave_0_agent:m0_address -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_mac_11_avalon_universal_slave_0_agent_m0_byteenable;                                               // mm_to_mac_11_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_m0_read;                                                     // mm_to_mac_11_avalon_universal_slave_0_agent:m0_read -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // mm_to_mac_11_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_mac_11_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_m0_lock;                                                     // mm_to_mac_11_avalon_universal_slave_0_agent:m0_lock -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_mac_11_avalon_universal_slave_0_agent_m0_writedata;                                                // mm_to_mac_11_avalon_universal_slave_0_agent:m0_writedata -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_m0_write;                                                    // mm_to_mac_11_avalon_universal_slave_0_agent:m0_write -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_mac_11_avalon_universal_slave_0_agent_m0_burstcount;                                               // mm_to_mac_11_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_mac_11_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_valid;                                             // mm_to_mac_11_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_data;                                              // mm_to_mac_11_avalon_universal_slave_0_agent:rf_source_data -> mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_ready;                                             // mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_mac_11_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // mm_to_mac_11_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // mm_to_mac_11_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_mac_11_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_mac_11_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // mm_to_mac_11_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_mac_11_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_mac_11_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // mm_to_mac_11_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_mac_11_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // mm_to_mac_11_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_mac_11_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // mm_to_mac_11_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_mac_11_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mm_to_phy_11_avalon_universal_slave_0_agent_m0_readdata;                                                 // mm_to_phy_11_avalon_universal_slave_0_translator:uav_readdata -> mm_to_phy_11_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_m0_waitrequest;                                              // mm_to_phy_11_avalon_universal_slave_0_translator:uav_waitrequest -> mm_to_phy_11_avalon_universal_slave_0_agent:m0_waitrequest
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_m0_debugaccess;                                              // mm_to_phy_11_avalon_universal_slave_0_agent:m0_debugaccess -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] mm_to_phy_11_avalon_universal_slave_0_agent_m0_address;                                                  // mm_to_phy_11_avalon_universal_slave_0_agent:m0_address -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] mm_to_phy_11_avalon_universal_slave_0_agent_m0_byteenable;                                               // mm_to_phy_11_avalon_universal_slave_0_agent:m0_byteenable -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_byteenable
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_m0_read;                                                     // mm_to_phy_11_avalon_universal_slave_0_agent:m0_read -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_read
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_m0_readdatavalid;                                            // mm_to_phy_11_avalon_universal_slave_0_translator:uav_readdatavalid -> mm_to_phy_11_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_m0_lock;                                                     // mm_to_phy_11_avalon_universal_slave_0_agent:m0_lock -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] mm_to_phy_11_avalon_universal_slave_0_agent_m0_writedata;                                                // mm_to_phy_11_avalon_universal_slave_0_agent:m0_writedata -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_writedata
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_m0_write;                                                    // mm_to_phy_11_avalon_universal_slave_0_agent:m0_write -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] mm_to_phy_11_avalon_universal_slave_0_agent_m0_burstcount;                                               // mm_to_phy_11_avalon_universal_slave_0_agent:m0_burstcount -> mm_to_phy_11_avalon_universal_slave_0_translator:uav_burstcount
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_valid;                                             // mm_to_phy_11_avalon_universal_slave_0_agent:rf_source_valid -> mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_data;                                              // mm_to_phy_11_avalon_universal_slave_0_agent:rf_source_data -> mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_ready;                                             // mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_to_phy_11_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_startofpacket;                                     // mm_to_phy_11_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_endofpacket;                                       // mm_to_phy_11_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                          // mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_to_phy_11_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                           // mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_to_phy_11_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                          // mm_to_phy_11_avalon_universal_slave_0_agent:rf_sink_ready -> mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                  // mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_to_phy_11_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                    // mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_to_phy_11_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                        // mm_to_phy_11_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_to_phy_11_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                         // mm_to_phy_11_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_to_phy_11_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                        // mm_to_phy_11_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_to_phy_11_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdata;                                                // rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_readdata -> rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_readdata
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_waitrequest;                                             // rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_waitrequest -> rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_waitrequest
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_debugaccess;                                             // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_debugaccess -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_address;                                                 // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_address -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_byteenable;                                              // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_byteenable -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_byteenable
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_read;                                                    // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_read -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_read
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_readdatavalid -> rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_lock;                                                    // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_lock -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_writedata;                                               // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_writedata -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_writedata
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_write;                                                   // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_write -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_burstcount;                                              // rx_sc_fifo_11_avalon_universal_slave_0_agent:m0_burstcount -> rx_sc_fifo_11_avalon_universal_slave_0_translator:uav_burstcount
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_valid;                                            // rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_valid -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_data;                                             // rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_data -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_ready;                                            // rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_ready
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_startofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_endofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_data
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_ready -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // rx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // rx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:out_data -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // rx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdata;                                                // tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_readdata -> tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_waitrequest;                                             // tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_waitrequest -> tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_debugaccess;                                             // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_debugaccess -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_address;                                                 // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_address -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_byteenable;                                              // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_byteenable -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_read;                                                    // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_read -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_read
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdatavalid;                                           // tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_lock;                                                    // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_lock -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_writedata;                                               // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_writedata -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_write;                                                   // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_write -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_burstcount;                                              // tx_sc_fifo_11_avalon_universal_slave_0_agent:m0_burstcount -> tx_sc_fifo_11_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_valid;                                            // tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_valid -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_data;                                             // tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_data -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_ready;                                            // tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_startofpacket;                                    // tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_endofpacket;                                      // tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                         // tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                          // tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                         // tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_ready -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                 // tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                   // tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                       // tx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                        // tx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                       // tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                       // tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                        // tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:out_data -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                       // tx_sc_fifo_11_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] eth_gen_mon_11_avalon_universal_slave_0_agent_m0_readdata;                                               // eth_gen_mon_11_avalon_universal_slave_0_translator:uav_readdata -> eth_gen_mon_11_avalon_universal_slave_0_agent:m0_readdata
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_m0_waitrequest;                                            // eth_gen_mon_11_avalon_universal_slave_0_translator:uav_waitrequest -> eth_gen_mon_11_avalon_universal_slave_0_agent:m0_waitrequest
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_m0_debugaccess;                                            // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_debugaccess -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] eth_gen_mon_11_avalon_universal_slave_0_agent_m0_address;                                                // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_address -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] eth_gen_mon_11_avalon_universal_slave_0_agent_m0_byteenable;                                             // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_byteenable -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_byteenable
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_m0_read;                                                   // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_read -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_read
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_m0_readdatavalid;                                          // eth_gen_mon_11_avalon_universal_slave_0_translator:uav_readdatavalid -> eth_gen_mon_11_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_m0_lock;                                                   // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_lock -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] eth_gen_mon_11_avalon_universal_slave_0_agent_m0_writedata;                                              // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_writedata -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_writedata
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_m0_write;                                                  // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_write -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_write
	wire    [3:0] eth_gen_mon_11_avalon_universal_slave_0_agent_m0_burstcount;                                             // eth_gen_mon_11_avalon_universal_slave_0_agent:m0_burstcount -> eth_gen_mon_11_avalon_universal_slave_0_translator:uav_burstcount
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_valid;                                           // eth_gen_mon_11_avalon_universal_slave_0_agent:rf_source_valid -> eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [128:0] eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_data;                                            // eth_gen_mon_11_avalon_universal_slave_0_agent:rf_source_data -> eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_ready;                                           // eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> eth_gen_mon_11_avalon_universal_slave_0_agent:rf_source_ready
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_startofpacket;                                   // eth_gen_mon_11_avalon_universal_slave_0_agent:rf_source_startofpacket -> eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_endofpacket;                                     // eth_gen_mon_11_avalon_universal_slave_0_agent:rf_source_endofpacket -> eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                                        // eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> eth_gen_mon_11_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [128:0] eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_data;                                         // eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:out_data -> eth_gen_mon_11_avalon_universal_slave_0_agent:rf_sink_data
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                                        // eth_gen_mon_11_avalon_universal_slave_0_agent:rf_sink_ready -> eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                                // eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> eth_gen_mon_11_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                                  // eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> eth_gen_mon_11_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                                      // eth_gen_mon_11_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_data;                                       // eth_gen_mon_11_avalon_universal_slave_0_agent:rdata_fifo_src_data -> eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                                      // eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> eth_gen_mon_11_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                                      // eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> eth_gen_mon_11_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_data;                                       // eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo:out_data -> eth_gen_mon_11_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                                      // eth_gen_mon_11_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_valid;                                     // merlin_master_translator_0_avalon_universal_master_0_agent:cp_valid -> router:sink_valid
	wire  [127:0] merlin_master_translator_0_avalon_universal_master_0_agent_cp_data;                                      // merlin_master_translator_0_avalon_universal_master_0_agent:cp_data -> router:sink_data
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_ready;                                     // router:sink_ready -> merlin_master_translator_0_avalon_universal_master_0_agent:cp_ready
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_startofpacket;                             // merlin_master_translator_0_avalon_universal_master_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_agent_cp_endofpacket;                               // merlin_master_translator_0_avalon_universal_master_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_0_avalon_universal_slave_0_agent:rp_valid -> router_001:sink_valid
	wire  [127:0] mm_to_mac_0_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_0_avalon_universal_slave_0_agent:rp_data -> router_001:sink_data
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rp_ready;                                                     // router_001:sink_ready -> mm_to_mac_0_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_0_avalon_universal_slave_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_0_avalon_universal_slave_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [127:0] router_001_src_data;                                                                                     // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire   [59:0] router_001_src_channel;                                                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_0_avalon_universal_slave_0_agent:rp_valid -> router_002:sink_valid
	wire  [127:0] mm_to_phy_0_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_0_avalon_universal_slave_0_agent:rp_data -> router_002:sink_data
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rp_ready;                                                     // router_002:sink_ready -> mm_to_phy_0_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_0_avalon_universal_slave_0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_0_avalon_universal_slave_0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                    // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [127:0] router_002_src_data;                                                                                     // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                                                    // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [59:0] router_002_src_channel;                                                                                  // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                                            // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                              // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_0_avalon_universal_slave_0_agent:rp_valid -> router_003:sink_valid
	wire  [127:0] tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_0_avalon_universal_slave_0_agent:rp_data -> router_003:sink_data
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_ready;                                                    // router_003:sink_ready -> tx_sc_fifo_0_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_0_avalon_universal_slave_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_0_avalon_universal_slave_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                    // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [127:0] router_003_src_data;                                                                                     // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                                                    // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [59:0] router_003_src_channel;                                                                                  // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                                                            // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                              // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_0_avalon_universal_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [127:0] rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_0_avalon_universal_slave_0_agent:rp_data -> router_004:sink_data
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_ready;                                                    // router_004:sink_ready -> rx_sc_fifo_0_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_0_avalon_universal_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_0_avalon_universal_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                    // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [127:0] router_004_src_data;                                                                                     // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                                                    // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [59:0] router_004_src_channel;                                                                                  // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                                                            // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                              // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_0_avalon_universal_slave_0_agent:rp_valid -> router_005:sink_valid
	wire  [127:0] eth_gen_mon_0_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_0_avalon_universal_slave_0_agent:rp_data -> router_005:sink_data
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rp_ready;                                                   // router_005:sink_ready -> eth_gen_mon_0_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_0_avalon_universal_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_0_avalon_universal_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                    // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [127:0] router_005_src_data;                                                                                     // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                                                    // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [59:0] router_005_src_channel;                                                                                  // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                                                            // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                              // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_1_avalon_universal_slave_0_agent:rp_valid -> router_006:sink_valid
	wire  [127:0] mm_to_mac_1_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_1_avalon_universal_slave_0_agent:rp_data -> router_006:sink_data
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rp_ready;                                                     // router_006:sink_ready -> mm_to_mac_1_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_1_avalon_universal_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_1_avalon_universal_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                    // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [127:0] router_006_src_data;                                                                                     // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                                                                    // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [59:0] router_006_src_channel;                                                                                  // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                                                            // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                              // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_1_avalon_universal_slave_0_agent:rp_valid -> router_007:sink_valid
	wire  [127:0] mm_to_phy_1_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_1_avalon_universal_slave_0_agent:rp_data -> router_007:sink_data
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rp_ready;                                                     // router_007:sink_ready -> mm_to_phy_1_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_1_avalon_universal_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_1_avalon_universal_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                    // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [127:0] router_007_src_data;                                                                                     // router_007:src_data -> rsp_demux_006:sink_data
	wire          router_007_src_ready;                                                                                    // rsp_demux_006:sink_ready -> router_007:src_ready
	wire   [59:0] router_007_src_channel;                                                                                  // router_007:src_channel -> rsp_demux_006:sink_channel
	wire          router_007_src_startofpacket;                                                                            // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                              // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_1_avalon_universal_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [127:0] rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_1_avalon_universal_slave_0_agent:rp_data -> router_008:sink_data
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_ready;                                                    // router_008:sink_ready -> rx_sc_fifo_1_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_1_avalon_universal_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_1_avalon_universal_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                    // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [127:0] router_008_src_data;                                                                                     // router_008:src_data -> rsp_demux_007:sink_data
	wire          router_008_src_ready;                                                                                    // rsp_demux_007:sink_ready -> router_008:src_ready
	wire   [59:0] router_008_src_channel;                                                                                  // router_008:src_channel -> rsp_demux_007:sink_channel
	wire          router_008_src_startofpacket;                                                                            // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                              // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_1_avalon_universal_slave_0_agent:rp_valid -> router_009:sink_valid
	wire  [127:0] tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_1_avalon_universal_slave_0_agent:rp_data -> router_009:sink_data
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_ready;                                                    // router_009:sink_ready -> tx_sc_fifo_1_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_1_avalon_universal_slave_0_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_1_avalon_universal_slave_0_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                    // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [127:0] router_009_src_data;                                                                                     // router_009:src_data -> rsp_demux_008:sink_data
	wire          router_009_src_ready;                                                                                    // rsp_demux_008:sink_ready -> router_009:src_ready
	wire   [59:0] router_009_src_channel;                                                                                  // router_009:src_channel -> rsp_demux_008:sink_channel
	wire          router_009_src_startofpacket;                                                                            // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                              // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_1_avalon_universal_slave_0_agent:rp_valid -> router_010:sink_valid
	wire  [127:0] eth_gen_mon_1_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_1_avalon_universal_slave_0_agent:rp_data -> router_010:sink_data
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rp_ready;                                                   // router_010:sink_ready -> eth_gen_mon_1_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_1_avalon_universal_slave_0_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_1_avalon_universal_slave_0_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                    // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [127:0] router_010_src_data;                                                                                     // router_010:src_data -> rsp_demux_009:sink_data
	wire          router_010_src_ready;                                                                                    // rsp_demux_009:sink_ready -> router_010:src_ready
	wire   [59:0] router_010_src_channel;                                                                                  // router_010:src_channel -> rsp_demux_009:sink_channel
	wire          router_010_src_startofpacket;                                                                            // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                              // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_2_avalon_universal_slave_0_agent:rp_valid -> router_011:sink_valid
	wire  [127:0] mm_to_mac_2_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_2_avalon_universal_slave_0_agent:rp_data -> router_011:sink_data
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rp_ready;                                                     // router_011:sink_ready -> mm_to_mac_2_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_2_avalon_universal_slave_0_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_2_avalon_universal_slave_0_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                    // router_011:src_valid -> rsp_demux_010:sink_valid
	wire  [127:0] router_011_src_data;                                                                                     // router_011:src_data -> rsp_demux_010:sink_data
	wire          router_011_src_ready;                                                                                    // rsp_demux_010:sink_ready -> router_011:src_ready
	wire   [59:0] router_011_src_channel;                                                                                  // router_011:src_channel -> rsp_demux_010:sink_channel
	wire          router_011_src_startofpacket;                                                                            // router_011:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                              // router_011:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_2_avalon_universal_slave_0_agent:rp_valid -> router_012:sink_valid
	wire  [127:0] mm_to_phy_2_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_2_avalon_universal_slave_0_agent:rp_data -> router_012:sink_data
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rp_ready;                                                     // router_012:sink_ready -> mm_to_phy_2_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_2_avalon_universal_slave_0_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_2_avalon_universal_slave_0_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                    // router_012:src_valid -> rsp_demux_011:sink_valid
	wire  [127:0] router_012_src_data;                                                                                     // router_012:src_data -> rsp_demux_011:sink_data
	wire          router_012_src_ready;                                                                                    // rsp_demux_011:sink_ready -> router_012:src_ready
	wire   [59:0] router_012_src_channel;                                                                                  // router_012:src_channel -> rsp_demux_011:sink_channel
	wire          router_012_src_startofpacket;                                                                            // router_012:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                              // router_012:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_2_avalon_universal_slave_0_agent:rp_valid -> router_013:sink_valid
	wire  [127:0] rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_2_avalon_universal_slave_0_agent:rp_data -> router_013:sink_data
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_ready;                                                    // router_013:sink_ready -> rx_sc_fifo_2_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_2_avalon_universal_slave_0_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_2_avalon_universal_slave_0_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                    // router_013:src_valid -> rsp_demux_012:sink_valid
	wire  [127:0] router_013_src_data;                                                                                     // router_013:src_data -> rsp_demux_012:sink_data
	wire          router_013_src_ready;                                                                                    // rsp_demux_012:sink_ready -> router_013:src_ready
	wire   [59:0] router_013_src_channel;                                                                                  // router_013:src_channel -> rsp_demux_012:sink_channel
	wire          router_013_src_startofpacket;                                                                            // router_013:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                              // router_013:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_2_avalon_universal_slave_0_agent:rp_valid -> router_014:sink_valid
	wire  [127:0] tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_2_avalon_universal_slave_0_agent:rp_data -> router_014:sink_data
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_ready;                                                    // router_014:sink_ready -> tx_sc_fifo_2_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_2_avalon_universal_slave_0_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_2_avalon_universal_slave_0_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                    // router_014:src_valid -> rsp_demux_013:sink_valid
	wire  [127:0] router_014_src_data;                                                                                     // router_014:src_data -> rsp_demux_013:sink_data
	wire          router_014_src_ready;                                                                                    // rsp_demux_013:sink_ready -> router_014:src_ready
	wire   [59:0] router_014_src_channel;                                                                                  // router_014:src_channel -> rsp_demux_013:sink_channel
	wire          router_014_src_startofpacket;                                                                            // router_014:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                              // router_014:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_2_avalon_universal_slave_0_agent:rp_valid -> router_015:sink_valid
	wire  [127:0] eth_gen_mon_2_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_2_avalon_universal_slave_0_agent:rp_data -> router_015:sink_data
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rp_ready;                                                   // router_015:sink_ready -> eth_gen_mon_2_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_2_avalon_universal_slave_0_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_2_avalon_universal_slave_0_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                    // router_015:src_valid -> rsp_demux_014:sink_valid
	wire  [127:0] router_015_src_data;                                                                                     // router_015:src_data -> rsp_demux_014:sink_data
	wire          router_015_src_ready;                                                                                    // rsp_demux_014:sink_ready -> router_015:src_ready
	wire   [59:0] router_015_src_channel;                                                                                  // router_015:src_channel -> rsp_demux_014:sink_channel
	wire          router_015_src_startofpacket;                                                                            // router_015:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                              // router_015:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_3_avalon_universal_slave_0_agent:rp_valid -> router_016:sink_valid
	wire  [127:0] mm_to_mac_3_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_3_avalon_universal_slave_0_agent:rp_data -> router_016:sink_data
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rp_ready;                                                     // router_016:sink_ready -> mm_to_mac_3_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_3_avalon_universal_slave_0_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_3_avalon_universal_slave_0_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                    // router_016:src_valid -> rsp_demux_015:sink_valid
	wire  [127:0] router_016_src_data;                                                                                     // router_016:src_data -> rsp_demux_015:sink_data
	wire          router_016_src_ready;                                                                                    // rsp_demux_015:sink_ready -> router_016:src_ready
	wire   [59:0] router_016_src_channel;                                                                                  // router_016:src_channel -> rsp_demux_015:sink_channel
	wire          router_016_src_startofpacket;                                                                            // router_016:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                              // router_016:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_3_avalon_universal_slave_0_agent:rp_valid -> router_017:sink_valid
	wire  [127:0] mm_to_phy_3_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_3_avalon_universal_slave_0_agent:rp_data -> router_017:sink_data
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rp_ready;                                                     // router_017:sink_ready -> mm_to_phy_3_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_3_avalon_universal_slave_0_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_3_avalon_universal_slave_0_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                    // router_017:src_valid -> rsp_demux_016:sink_valid
	wire  [127:0] router_017_src_data;                                                                                     // router_017:src_data -> rsp_demux_016:sink_data
	wire          router_017_src_ready;                                                                                    // rsp_demux_016:sink_ready -> router_017:src_ready
	wire   [59:0] router_017_src_channel;                                                                                  // router_017:src_channel -> rsp_demux_016:sink_channel
	wire          router_017_src_startofpacket;                                                                            // router_017:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                              // router_017:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_3_avalon_universal_slave_0_agent:rp_valid -> router_018:sink_valid
	wire  [127:0] rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_3_avalon_universal_slave_0_agent:rp_data -> router_018:sink_data
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_ready;                                                    // router_018:sink_ready -> rx_sc_fifo_3_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_3_avalon_universal_slave_0_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_3_avalon_universal_slave_0_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                                    // router_018:src_valid -> rsp_demux_017:sink_valid
	wire  [127:0] router_018_src_data;                                                                                     // router_018:src_data -> rsp_demux_017:sink_data
	wire          router_018_src_ready;                                                                                    // rsp_demux_017:sink_ready -> router_018:src_ready
	wire   [59:0] router_018_src_channel;                                                                                  // router_018:src_channel -> rsp_demux_017:sink_channel
	wire          router_018_src_startofpacket;                                                                            // router_018:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                              // router_018:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_3_avalon_universal_slave_0_agent:rp_valid -> router_019:sink_valid
	wire  [127:0] tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_3_avalon_universal_slave_0_agent:rp_data -> router_019:sink_data
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_ready;                                                    // router_019:sink_ready -> tx_sc_fifo_3_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_3_avalon_universal_slave_0_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_3_avalon_universal_slave_0_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                                    // router_019:src_valid -> rsp_demux_018:sink_valid
	wire  [127:0] router_019_src_data;                                                                                     // router_019:src_data -> rsp_demux_018:sink_data
	wire          router_019_src_ready;                                                                                    // rsp_demux_018:sink_ready -> router_019:src_ready
	wire   [59:0] router_019_src_channel;                                                                                  // router_019:src_channel -> rsp_demux_018:sink_channel
	wire          router_019_src_startofpacket;                                                                            // router_019:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                              // router_019:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_3_avalon_universal_slave_0_agent:rp_valid -> router_020:sink_valid
	wire  [127:0] eth_gen_mon_3_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_3_avalon_universal_slave_0_agent:rp_data -> router_020:sink_data
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rp_ready;                                                   // router_020:sink_ready -> eth_gen_mon_3_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_3_avalon_universal_slave_0_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_3_avalon_universal_slave_0_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                                    // router_020:src_valid -> rsp_demux_019:sink_valid
	wire  [127:0] router_020_src_data;                                                                                     // router_020:src_data -> rsp_demux_019:sink_data
	wire          router_020_src_ready;                                                                                    // rsp_demux_019:sink_ready -> router_020:src_ready
	wire   [59:0] router_020_src_channel;                                                                                  // router_020:src_channel -> rsp_demux_019:sink_channel
	wire          router_020_src_startofpacket;                                                                            // router_020:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                              // router_020:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_4_avalon_universal_slave_0_agent:rp_valid -> router_021:sink_valid
	wire  [127:0] mm_to_mac_4_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_4_avalon_universal_slave_0_agent:rp_data -> router_021:sink_data
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rp_ready;                                                     // router_021:sink_ready -> mm_to_mac_4_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_4_avalon_universal_slave_0_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_4_avalon_universal_slave_0_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                                    // router_021:src_valid -> rsp_demux_020:sink_valid
	wire  [127:0] router_021_src_data;                                                                                     // router_021:src_data -> rsp_demux_020:sink_data
	wire          router_021_src_ready;                                                                                    // rsp_demux_020:sink_ready -> router_021:src_ready
	wire   [59:0] router_021_src_channel;                                                                                  // router_021:src_channel -> rsp_demux_020:sink_channel
	wire          router_021_src_startofpacket;                                                                            // router_021:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                              // router_021:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_4_avalon_universal_slave_0_agent:rp_valid -> router_022:sink_valid
	wire  [127:0] mm_to_phy_4_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_4_avalon_universal_slave_0_agent:rp_data -> router_022:sink_data
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rp_ready;                                                     // router_022:sink_ready -> mm_to_phy_4_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_4_avalon_universal_slave_0_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_4_avalon_universal_slave_0_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                                    // router_022:src_valid -> rsp_demux_021:sink_valid
	wire  [127:0] router_022_src_data;                                                                                     // router_022:src_data -> rsp_demux_021:sink_data
	wire          router_022_src_ready;                                                                                    // rsp_demux_021:sink_ready -> router_022:src_ready
	wire   [59:0] router_022_src_channel;                                                                                  // router_022:src_channel -> rsp_demux_021:sink_channel
	wire          router_022_src_startofpacket;                                                                            // router_022:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                              // router_022:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_4_avalon_universal_slave_0_agent:rp_valid -> router_023:sink_valid
	wire  [127:0] rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_4_avalon_universal_slave_0_agent:rp_data -> router_023:sink_data
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_ready;                                                    // router_023:sink_ready -> rx_sc_fifo_4_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_4_avalon_universal_slave_0_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_4_avalon_universal_slave_0_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                                    // router_023:src_valid -> rsp_demux_022:sink_valid
	wire  [127:0] router_023_src_data;                                                                                     // router_023:src_data -> rsp_demux_022:sink_data
	wire          router_023_src_ready;                                                                                    // rsp_demux_022:sink_ready -> router_023:src_ready
	wire   [59:0] router_023_src_channel;                                                                                  // router_023:src_channel -> rsp_demux_022:sink_channel
	wire          router_023_src_startofpacket;                                                                            // router_023:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                              // router_023:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_4_avalon_universal_slave_0_agent:rp_valid -> router_024:sink_valid
	wire  [127:0] tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_4_avalon_universal_slave_0_agent:rp_data -> router_024:sink_data
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_ready;                                                    // router_024:sink_ready -> tx_sc_fifo_4_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_4_avalon_universal_slave_0_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_4_avalon_universal_slave_0_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                                    // router_024:src_valid -> rsp_demux_023:sink_valid
	wire  [127:0] router_024_src_data;                                                                                     // router_024:src_data -> rsp_demux_023:sink_data
	wire          router_024_src_ready;                                                                                    // rsp_demux_023:sink_ready -> router_024:src_ready
	wire   [59:0] router_024_src_channel;                                                                                  // router_024:src_channel -> rsp_demux_023:sink_channel
	wire          router_024_src_startofpacket;                                                                            // router_024:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                              // router_024:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_4_avalon_universal_slave_0_agent:rp_valid -> router_025:sink_valid
	wire  [127:0] eth_gen_mon_4_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_4_avalon_universal_slave_0_agent:rp_data -> router_025:sink_data
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rp_ready;                                                   // router_025:sink_ready -> eth_gen_mon_4_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_4_avalon_universal_slave_0_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_4_avalon_universal_slave_0_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                                    // router_025:src_valid -> rsp_demux_024:sink_valid
	wire  [127:0] router_025_src_data;                                                                                     // router_025:src_data -> rsp_demux_024:sink_data
	wire          router_025_src_ready;                                                                                    // rsp_demux_024:sink_ready -> router_025:src_ready
	wire   [59:0] router_025_src_channel;                                                                                  // router_025:src_channel -> rsp_demux_024:sink_channel
	wire          router_025_src_startofpacket;                                                                            // router_025:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                              // router_025:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_5_avalon_universal_slave_0_agent:rp_valid -> router_026:sink_valid
	wire  [127:0] mm_to_mac_5_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_5_avalon_universal_slave_0_agent:rp_data -> router_026:sink_data
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rp_ready;                                                     // router_026:sink_ready -> mm_to_mac_5_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_5_avalon_universal_slave_0_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_5_avalon_universal_slave_0_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                                    // router_026:src_valid -> rsp_demux_025:sink_valid
	wire  [127:0] router_026_src_data;                                                                                     // router_026:src_data -> rsp_demux_025:sink_data
	wire          router_026_src_ready;                                                                                    // rsp_demux_025:sink_ready -> router_026:src_ready
	wire   [59:0] router_026_src_channel;                                                                                  // router_026:src_channel -> rsp_demux_025:sink_channel
	wire          router_026_src_startofpacket;                                                                            // router_026:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                              // router_026:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_5_avalon_universal_slave_0_agent:rp_valid -> router_027:sink_valid
	wire  [127:0] mm_to_phy_5_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_5_avalon_universal_slave_0_agent:rp_data -> router_027:sink_data
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rp_ready;                                                     // router_027:sink_ready -> mm_to_phy_5_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_5_avalon_universal_slave_0_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_5_avalon_universal_slave_0_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                                    // router_027:src_valid -> rsp_demux_026:sink_valid
	wire  [127:0] router_027_src_data;                                                                                     // router_027:src_data -> rsp_demux_026:sink_data
	wire          router_027_src_ready;                                                                                    // rsp_demux_026:sink_ready -> router_027:src_ready
	wire   [59:0] router_027_src_channel;                                                                                  // router_027:src_channel -> rsp_demux_026:sink_channel
	wire          router_027_src_startofpacket;                                                                            // router_027:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                              // router_027:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_5_avalon_universal_slave_0_agent:rp_valid -> router_028:sink_valid
	wire  [127:0] rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_5_avalon_universal_slave_0_agent:rp_data -> router_028:sink_data
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_ready;                                                    // router_028:sink_ready -> rx_sc_fifo_5_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_5_avalon_universal_slave_0_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_5_avalon_universal_slave_0_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                                    // router_028:src_valid -> rsp_demux_027:sink_valid
	wire  [127:0] router_028_src_data;                                                                                     // router_028:src_data -> rsp_demux_027:sink_data
	wire          router_028_src_ready;                                                                                    // rsp_demux_027:sink_ready -> router_028:src_ready
	wire   [59:0] router_028_src_channel;                                                                                  // router_028:src_channel -> rsp_demux_027:sink_channel
	wire          router_028_src_startofpacket;                                                                            // router_028:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                              // router_028:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_5_avalon_universal_slave_0_agent:rp_valid -> router_029:sink_valid
	wire  [127:0] tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_5_avalon_universal_slave_0_agent:rp_data -> router_029:sink_data
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_ready;                                                    // router_029:sink_ready -> tx_sc_fifo_5_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_5_avalon_universal_slave_0_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_5_avalon_universal_slave_0_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                                    // router_029:src_valid -> rsp_demux_028:sink_valid
	wire  [127:0] router_029_src_data;                                                                                     // router_029:src_data -> rsp_demux_028:sink_data
	wire          router_029_src_ready;                                                                                    // rsp_demux_028:sink_ready -> router_029:src_ready
	wire   [59:0] router_029_src_channel;                                                                                  // router_029:src_channel -> rsp_demux_028:sink_channel
	wire          router_029_src_startofpacket;                                                                            // router_029:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_029_src_endofpacket;                                                                              // router_029:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_5_avalon_universal_slave_0_agent:rp_valid -> router_030:sink_valid
	wire  [127:0] eth_gen_mon_5_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_5_avalon_universal_slave_0_agent:rp_data -> router_030:sink_data
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rp_ready;                                                   // router_030:sink_ready -> eth_gen_mon_5_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_5_avalon_universal_slave_0_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_5_avalon_universal_slave_0_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                                    // router_030:src_valid -> rsp_demux_029:sink_valid
	wire  [127:0] router_030_src_data;                                                                                     // router_030:src_data -> rsp_demux_029:sink_data
	wire          router_030_src_ready;                                                                                    // rsp_demux_029:sink_ready -> router_030:src_ready
	wire   [59:0] router_030_src_channel;                                                                                  // router_030:src_channel -> rsp_demux_029:sink_channel
	wire          router_030_src_startofpacket;                                                                            // router_030:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_030_src_endofpacket;                                                                              // router_030:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_6_avalon_universal_slave_0_agent:rp_valid -> router_031:sink_valid
	wire  [127:0] mm_to_mac_6_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_6_avalon_universal_slave_0_agent:rp_data -> router_031:sink_data
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rp_ready;                                                     // router_031:sink_ready -> mm_to_mac_6_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_6_avalon_universal_slave_0_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_6_avalon_universal_slave_0_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                                    // router_031:src_valid -> rsp_demux_030:sink_valid
	wire  [127:0] router_031_src_data;                                                                                     // router_031:src_data -> rsp_demux_030:sink_data
	wire          router_031_src_ready;                                                                                    // rsp_demux_030:sink_ready -> router_031:src_ready
	wire   [59:0] router_031_src_channel;                                                                                  // router_031:src_channel -> rsp_demux_030:sink_channel
	wire          router_031_src_startofpacket;                                                                            // router_031:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_031_src_endofpacket;                                                                              // router_031:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_6_avalon_universal_slave_0_agent:rp_valid -> router_032:sink_valid
	wire  [127:0] mm_to_phy_6_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_6_avalon_universal_slave_0_agent:rp_data -> router_032:sink_data
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rp_ready;                                                     // router_032:sink_ready -> mm_to_phy_6_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_6_avalon_universal_slave_0_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_6_avalon_universal_slave_0_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                                                    // router_032:src_valid -> rsp_demux_031:sink_valid
	wire  [127:0] router_032_src_data;                                                                                     // router_032:src_data -> rsp_demux_031:sink_data
	wire          router_032_src_ready;                                                                                    // rsp_demux_031:sink_ready -> router_032:src_ready
	wire   [59:0] router_032_src_channel;                                                                                  // router_032:src_channel -> rsp_demux_031:sink_channel
	wire          router_032_src_startofpacket;                                                                            // router_032:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_032_src_endofpacket;                                                                              // router_032:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_6_avalon_universal_slave_0_agent:rp_valid -> router_033:sink_valid
	wire  [127:0] rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_6_avalon_universal_slave_0_agent:rp_data -> router_033:sink_data
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_ready;                                                    // router_033:sink_ready -> rx_sc_fifo_6_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_6_avalon_universal_slave_0_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_6_avalon_universal_slave_0_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                                                    // router_033:src_valid -> rsp_demux_032:sink_valid
	wire  [127:0] router_033_src_data;                                                                                     // router_033:src_data -> rsp_demux_032:sink_data
	wire          router_033_src_ready;                                                                                    // rsp_demux_032:sink_ready -> router_033:src_ready
	wire   [59:0] router_033_src_channel;                                                                                  // router_033:src_channel -> rsp_demux_032:sink_channel
	wire          router_033_src_startofpacket;                                                                            // router_033:src_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          router_033_src_endofpacket;                                                                              // router_033:src_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_6_avalon_universal_slave_0_agent:rp_valid -> router_034:sink_valid
	wire  [127:0] tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_6_avalon_universal_slave_0_agent:rp_data -> router_034:sink_data
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_ready;                                                    // router_034:sink_ready -> tx_sc_fifo_6_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_6_avalon_universal_slave_0_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_6_avalon_universal_slave_0_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                                                    // router_034:src_valid -> rsp_demux_033:sink_valid
	wire  [127:0] router_034_src_data;                                                                                     // router_034:src_data -> rsp_demux_033:sink_data
	wire          router_034_src_ready;                                                                                    // rsp_demux_033:sink_ready -> router_034:src_ready
	wire   [59:0] router_034_src_channel;                                                                                  // router_034:src_channel -> rsp_demux_033:sink_channel
	wire          router_034_src_startofpacket;                                                                            // router_034:src_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          router_034_src_endofpacket;                                                                              // router_034:src_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_6_avalon_universal_slave_0_agent:rp_valid -> router_035:sink_valid
	wire  [127:0] eth_gen_mon_6_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_6_avalon_universal_slave_0_agent:rp_data -> router_035:sink_data
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rp_ready;                                                   // router_035:sink_ready -> eth_gen_mon_6_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_6_avalon_universal_slave_0_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_6_avalon_universal_slave_0_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                                                    // router_035:src_valid -> rsp_demux_034:sink_valid
	wire  [127:0] router_035_src_data;                                                                                     // router_035:src_data -> rsp_demux_034:sink_data
	wire          router_035_src_ready;                                                                                    // rsp_demux_034:sink_ready -> router_035:src_ready
	wire   [59:0] router_035_src_channel;                                                                                  // router_035:src_channel -> rsp_demux_034:sink_channel
	wire          router_035_src_startofpacket;                                                                            // router_035:src_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          router_035_src_endofpacket;                                                                              // router_035:src_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_7_avalon_universal_slave_0_agent:rp_valid -> router_036:sink_valid
	wire  [127:0] mm_to_mac_7_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_7_avalon_universal_slave_0_agent:rp_data -> router_036:sink_data
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rp_ready;                                                     // router_036:sink_ready -> mm_to_mac_7_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_7_avalon_universal_slave_0_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_7_avalon_universal_slave_0_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                                                    // router_036:src_valid -> rsp_demux_035:sink_valid
	wire  [127:0] router_036_src_data;                                                                                     // router_036:src_data -> rsp_demux_035:sink_data
	wire          router_036_src_ready;                                                                                    // rsp_demux_035:sink_ready -> router_036:src_ready
	wire   [59:0] router_036_src_channel;                                                                                  // router_036:src_channel -> rsp_demux_035:sink_channel
	wire          router_036_src_startofpacket;                                                                            // router_036:src_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          router_036_src_endofpacket;                                                                              // router_036:src_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_7_avalon_universal_slave_0_agent:rp_valid -> router_037:sink_valid
	wire  [127:0] mm_to_phy_7_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_7_avalon_universal_slave_0_agent:rp_data -> router_037:sink_data
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rp_ready;                                                     // router_037:sink_ready -> mm_to_phy_7_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_7_avalon_universal_slave_0_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_7_avalon_universal_slave_0_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                                                    // router_037:src_valid -> rsp_demux_036:sink_valid
	wire  [127:0] router_037_src_data;                                                                                     // router_037:src_data -> rsp_demux_036:sink_data
	wire          router_037_src_ready;                                                                                    // rsp_demux_036:sink_ready -> router_037:src_ready
	wire   [59:0] router_037_src_channel;                                                                                  // router_037:src_channel -> rsp_demux_036:sink_channel
	wire          router_037_src_startofpacket;                                                                            // router_037:src_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          router_037_src_endofpacket;                                                                              // router_037:src_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_7_avalon_universal_slave_0_agent:rp_valid -> router_038:sink_valid
	wire  [127:0] rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_7_avalon_universal_slave_0_agent:rp_data -> router_038:sink_data
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_ready;                                                    // router_038:sink_ready -> rx_sc_fifo_7_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_7_avalon_universal_slave_0_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_7_avalon_universal_slave_0_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                                                    // router_038:src_valid -> rsp_demux_037:sink_valid
	wire  [127:0] router_038_src_data;                                                                                     // router_038:src_data -> rsp_demux_037:sink_data
	wire          router_038_src_ready;                                                                                    // rsp_demux_037:sink_ready -> router_038:src_ready
	wire   [59:0] router_038_src_channel;                                                                                  // router_038:src_channel -> rsp_demux_037:sink_channel
	wire          router_038_src_startofpacket;                                                                            // router_038:src_startofpacket -> rsp_demux_037:sink_startofpacket
	wire          router_038_src_endofpacket;                                                                              // router_038:src_endofpacket -> rsp_demux_037:sink_endofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_7_avalon_universal_slave_0_agent:rp_valid -> router_039:sink_valid
	wire  [127:0] tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_7_avalon_universal_slave_0_agent:rp_data -> router_039:sink_data
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_ready;                                                    // router_039:sink_ready -> tx_sc_fifo_7_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_7_avalon_universal_slave_0_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_7_avalon_universal_slave_0_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                                                    // router_039:src_valid -> rsp_demux_038:sink_valid
	wire  [127:0] router_039_src_data;                                                                                     // router_039:src_data -> rsp_demux_038:sink_data
	wire          router_039_src_ready;                                                                                    // rsp_demux_038:sink_ready -> router_039:src_ready
	wire   [59:0] router_039_src_channel;                                                                                  // router_039:src_channel -> rsp_demux_038:sink_channel
	wire          router_039_src_startofpacket;                                                                            // router_039:src_startofpacket -> rsp_demux_038:sink_startofpacket
	wire          router_039_src_endofpacket;                                                                              // router_039:src_endofpacket -> rsp_demux_038:sink_endofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_7_avalon_universal_slave_0_agent:rp_valid -> router_040:sink_valid
	wire  [127:0] eth_gen_mon_7_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_7_avalon_universal_slave_0_agent:rp_data -> router_040:sink_data
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rp_ready;                                                   // router_040:sink_ready -> eth_gen_mon_7_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_7_avalon_universal_slave_0_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_7_avalon_universal_slave_0_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          router_040_src_valid;                                                                                    // router_040:src_valid -> rsp_demux_039:sink_valid
	wire  [127:0] router_040_src_data;                                                                                     // router_040:src_data -> rsp_demux_039:sink_data
	wire          router_040_src_ready;                                                                                    // rsp_demux_039:sink_ready -> router_040:src_ready
	wire   [59:0] router_040_src_channel;                                                                                  // router_040:src_channel -> rsp_demux_039:sink_channel
	wire          router_040_src_startofpacket;                                                                            // router_040:src_startofpacket -> rsp_demux_039:sink_startofpacket
	wire          router_040_src_endofpacket;                                                                              // router_040:src_endofpacket -> rsp_demux_039:sink_endofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_8_avalon_universal_slave_0_agent:rp_valid -> router_041:sink_valid
	wire  [127:0] mm_to_mac_8_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_8_avalon_universal_slave_0_agent:rp_data -> router_041:sink_data
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rp_ready;                                                     // router_041:sink_ready -> mm_to_mac_8_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_8_avalon_universal_slave_0_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_8_avalon_universal_slave_0_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          router_041_src_valid;                                                                                    // router_041:src_valid -> rsp_demux_040:sink_valid
	wire  [127:0] router_041_src_data;                                                                                     // router_041:src_data -> rsp_demux_040:sink_data
	wire          router_041_src_ready;                                                                                    // rsp_demux_040:sink_ready -> router_041:src_ready
	wire   [59:0] router_041_src_channel;                                                                                  // router_041:src_channel -> rsp_demux_040:sink_channel
	wire          router_041_src_startofpacket;                                                                            // router_041:src_startofpacket -> rsp_demux_040:sink_startofpacket
	wire          router_041_src_endofpacket;                                                                              // router_041:src_endofpacket -> rsp_demux_040:sink_endofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_8_avalon_universal_slave_0_agent:rp_valid -> router_042:sink_valid
	wire  [127:0] mm_to_phy_8_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_8_avalon_universal_slave_0_agent:rp_data -> router_042:sink_data
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rp_ready;                                                     // router_042:sink_ready -> mm_to_phy_8_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_8_avalon_universal_slave_0_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_8_avalon_universal_slave_0_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          router_042_src_valid;                                                                                    // router_042:src_valid -> rsp_demux_041:sink_valid
	wire  [127:0] router_042_src_data;                                                                                     // router_042:src_data -> rsp_demux_041:sink_data
	wire          router_042_src_ready;                                                                                    // rsp_demux_041:sink_ready -> router_042:src_ready
	wire   [59:0] router_042_src_channel;                                                                                  // router_042:src_channel -> rsp_demux_041:sink_channel
	wire          router_042_src_startofpacket;                                                                            // router_042:src_startofpacket -> rsp_demux_041:sink_startofpacket
	wire          router_042_src_endofpacket;                                                                              // router_042:src_endofpacket -> rsp_demux_041:sink_endofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_8_avalon_universal_slave_0_agent:rp_valid -> router_043:sink_valid
	wire  [127:0] rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_8_avalon_universal_slave_0_agent:rp_data -> router_043:sink_data
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_ready;                                                    // router_043:sink_ready -> rx_sc_fifo_8_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_8_avalon_universal_slave_0_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_8_avalon_universal_slave_0_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          router_043_src_valid;                                                                                    // router_043:src_valid -> rsp_demux_042:sink_valid
	wire  [127:0] router_043_src_data;                                                                                     // router_043:src_data -> rsp_demux_042:sink_data
	wire          router_043_src_ready;                                                                                    // rsp_demux_042:sink_ready -> router_043:src_ready
	wire   [59:0] router_043_src_channel;                                                                                  // router_043:src_channel -> rsp_demux_042:sink_channel
	wire          router_043_src_startofpacket;                                                                            // router_043:src_startofpacket -> rsp_demux_042:sink_startofpacket
	wire          router_043_src_endofpacket;                                                                              // router_043:src_endofpacket -> rsp_demux_042:sink_endofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_8_avalon_universal_slave_0_agent:rp_valid -> router_044:sink_valid
	wire  [127:0] tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_8_avalon_universal_slave_0_agent:rp_data -> router_044:sink_data
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_ready;                                                    // router_044:sink_ready -> tx_sc_fifo_8_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_8_avalon_universal_slave_0_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_8_avalon_universal_slave_0_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          router_044_src_valid;                                                                                    // router_044:src_valid -> rsp_demux_043:sink_valid
	wire  [127:0] router_044_src_data;                                                                                     // router_044:src_data -> rsp_demux_043:sink_data
	wire          router_044_src_ready;                                                                                    // rsp_demux_043:sink_ready -> router_044:src_ready
	wire   [59:0] router_044_src_channel;                                                                                  // router_044:src_channel -> rsp_demux_043:sink_channel
	wire          router_044_src_startofpacket;                                                                            // router_044:src_startofpacket -> rsp_demux_043:sink_startofpacket
	wire          router_044_src_endofpacket;                                                                              // router_044:src_endofpacket -> rsp_demux_043:sink_endofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_8_avalon_universal_slave_0_agent:rp_valid -> router_045:sink_valid
	wire  [127:0] eth_gen_mon_8_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_8_avalon_universal_slave_0_agent:rp_data -> router_045:sink_data
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rp_ready;                                                   // router_045:sink_ready -> eth_gen_mon_8_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_8_avalon_universal_slave_0_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_8_avalon_universal_slave_0_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          router_045_src_valid;                                                                                    // router_045:src_valid -> rsp_demux_044:sink_valid
	wire  [127:0] router_045_src_data;                                                                                     // router_045:src_data -> rsp_demux_044:sink_data
	wire          router_045_src_ready;                                                                                    // rsp_demux_044:sink_ready -> router_045:src_ready
	wire   [59:0] router_045_src_channel;                                                                                  // router_045:src_channel -> rsp_demux_044:sink_channel
	wire          router_045_src_startofpacket;                                                                            // router_045:src_startofpacket -> rsp_demux_044:sink_startofpacket
	wire          router_045_src_endofpacket;                                                                              // router_045:src_endofpacket -> rsp_demux_044:sink_endofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_mac_9_avalon_universal_slave_0_agent:rp_valid -> router_046:sink_valid
	wire  [127:0] mm_to_mac_9_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_mac_9_avalon_universal_slave_0_agent:rp_data -> router_046:sink_data
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rp_ready;                                                     // router_046:sink_ready -> mm_to_mac_9_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_mac_9_avalon_universal_slave_0_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_mac_9_avalon_universal_slave_0_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          router_046_src_valid;                                                                                    // router_046:src_valid -> rsp_demux_045:sink_valid
	wire  [127:0] router_046_src_data;                                                                                     // router_046:src_data -> rsp_demux_045:sink_data
	wire          router_046_src_ready;                                                                                    // rsp_demux_045:sink_ready -> router_046:src_ready
	wire   [59:0] router_046_src_channel;                                                                                  // router_046:src_channel -> rsp_demux_045:sink_channel
	wire          router_046_src_startofpacket;                                                                            // router_046:src_startofpacket -> rsp_demux_045:sink_startofpacket
	wire          router_046_src_endofpacket;                                                                              // router_046:src_endofpacket -> rsp_demux_045:sink_endofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rp_valid;                                                     // mm_to_phy_9_avalon_universal_slave_0_agent:rp_valid -> router_047:sink_valid
	wire  [127:0] mm_to_phy_9_avalon_universal_slave_0_agent_rp_data;                                                      // mm_to_phy_9_avalon_universal_slave_0_agent:rp_data -> router_047:sink_data
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rp_ready;                                                     // router_047:sink_ready -> mm_to_phy_9_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rp_startofpacket;                                             // mm_to_phy_9_avalon_universal_slave_0_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_agent_rp_endofpacket;                                               // mm_to_phy_9_avalon_universal_slave_0_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                                                    // router_047:src_valid -> rsp_demux_046:sink_valid
	wire  [127:0] router_047_src_data;                                                                                     // router_047:src_data -> rsp_demux_046:sink_data
	wire          router_047_src_ready;                                                                                    // rsp_demux_046:sink_ready -> router_047:src_ready
	wire   [59:0] router_047_src_channel;                                                                                  // router_047:src_channel -> rsp_demux_046:sink_channel
	wire          router_047_src_startofpacket;                                                                            // router_047:src_startofpacket -> rsp_demux_046:sink_startofpacket
	wire          router_047_src_endofpacket;                                                                              // router_047:src_endofpacket -> rsp_demux_046:sink_endofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_valid;                                                    // rx_sc_fifo_9_avalon_universal_slave_0_agent:rp_valid -> router_048:sink_valid
	wire  [127:0] rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_data;                                                     // rx_sc_fifo_9_avalon_universal_slave_0_agent:rp_data -> router_048:sink_data
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_ready;                                                    // router_048:sink_ready -> rx_sc_fifo_9_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_startofpacket;                                            // rx_sc_fifo_9_avalon_universal_slave_0_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_endofpacket;                                              // rx_sc_fifo_9_avalon_universal_slave_0_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                                                    // router_048:src_valid -> rsp_demux_047:sink_valid
	wire  [127:0] router_048_src_data;                                                                                     // router_048:src_data -> rsp_demux_047:sink_data
	wire          router_048_src_ready;                                                                                    // rsp_demux_047:sink_ready -> router_048:src_ready
	wire   [59:0] router_048_src_channel;                                                                                  // router_048:src_channel -> rsp_demux_047:sink_channel
	wire          router_048_src_startofpacket;                                                                            // router_048:src_startofpacket -> rsp_demux_047:sink_startofpacket
	wire          router_048_src_endofpacket;                                                                              // router_048:src_endofpacket -> rsp_demux_047:sink_endofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_valid;                                                    // tx_sc_fifo_9_avalon_universal_slave_0_agent:rp_valid -> router_049:sink_valid
	wire  [127:0] tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_data;                                                     // tx_sc_fifo_9_avalon_universal_slave_0_agent:rp_data -> router_049:sink_data
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_ready;                                                    // router_049:sink_ready -> tx_sc_fifo_9_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_startofpacket;                                            // tx_sc_fifo_9_avalon_universal_slave_0_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_endofpacket;                                              // tx_sc_fifo_9_avalon_universal_slave_0_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          router_049_src_valid;                                                                                    // router_049:src_valid -> rsp_demux_048:sink_valid
	wire  [127:0] router_049_src_data;                                                                                     // router_049:src_data -> rsp_demux_048:sink_data
	wire          router_049_src_ready;                                                                                    // rsp_demux_048:sink_ready -> router_049:src_ready
	wire   [59:0] router_049_src_channel;                                                                                  // router_049:src_channel -> rsp_demux_048:sink_channel
	wire          router_049_src_startofpacket;                                                                            // router_049:src_startofpacket -> rsp_demux_048:sink_startofpacket
	wire          router_049_src_endofpacket;                                                                              // router_049:src_endofpacket -> rsp_demux_048:sink_endofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rp_valid;                                                   // eth_gen_mon_9_avalon_universal_slave_0_agent:rp_valid -> router_050:sink_valid
	wire  [127:0] eth_gen_mon_9_avalon_universal_slave_0_agent_rp_data;                                                    // eth_gen_mon_9_avalon_universal_slave_0_agent:rp_data -> router_050:sink_data
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rp_ready;                                                   // router_050:sink_ready -> eth_gen_mon_9_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rp_startofpacket;                                           // eth_gen_mon_9_avalon_universal_slave_0_agent:rp_startofpacket -> router_050:sink_startofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_agent_rp_endofpacket;                                             // eth_gen_mon_9_avalon_universal_slave_0_agent:rp_endofpacket -> router_050:sink_endofpacket
	wire          router_050_src_valid;                                                                                    // router_050:src_valid -> rsp_demux_049:sink_valid
	wire  [127:0] router_050_src_data;                                                                                     // router_050:src_data -> rsp_demux_049:sink_data
	wire          router_050_src_ready;                                                                                    // rsp_demux_049:sink_ready -> router_050:src_ready
	wire   [59:0] router_050_src_channel;                                                                                  // router_050:src_channel -> rsp_demux_049:sink_channel
	wire          router_050_src_startofpacket;                                                                            // router_050:src_startofpacket -> rsp_demux_049:sink_startofpacket
	wire          router_050_src_endofpacket;                                                                              // router_050:src_endofpacket -> rsp_demux_049:sink_endofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rp_valid;                                                    // mm_to_mac_10_avalon_universal_slave_0_agent:rp_valid -> router_051:sink_valid
	wire  [127:0] mm_to_mac_10_avalon_universal_slave_0_agent_rp_data;                                                     // mm_to_mac_10_avalon_universal_slave_0_agent:rp_data -> router_051:sink_data
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rp_ready;                                                    // router_051:sink_ready -> mm_to_mac_10_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rp_startofpacket;                                            // mm_to_mac_10_avalon_universal_slave_0_agent:rp_startofpacket -> router_051:sink_startofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_agent_rp_endofpacket;                                              // mm_to_mac_10_avalon_universal_slave_0_agent:rp_endofpacket -> router_051:sink_endofpacket
	wire          router_051_src_valid;                                                                                    // router_051:src_valid -> rsp_demux_050:sink_valid
	wire  [127:0] router_051_src_data;                                                                                     // router_051:src_data -> rsp_demux_050:sink_data
	wire          router_051_src_ready;                                                                                    // rsp_demux_050:sink_ready -> router_051:src_ready
	wire   [59:0] router_051_src_channel;                                                                                  // router_051:src_channel -> rsp_demux_050:sink_channel
	wire          router_051_src_startofpacket;                                                                            // router_051:src_startofpacket -> rsp_demux_050:sink_startofpacket
	wire          router_051_src_endofpacket;                                                                              // router_051:src_endofpacket -> rsp_demux_050:sink_endofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rp_valid;                                                    // mm_to_phy_10_avalon_universal_slave_0_agent:rp_valid -> router_052:sink_valid
	wire  [127:0] mm_to_phy_10_avalon_universal_slave_0_agent_rp_data;                                                     // mm_to_phy_10_avalon_universal_slave_0_agent:rp_data -> router_052:sink_data
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rp_ready;                                                    // router_052:sink_ready -> mm_to_phy_10_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rp_startofpacket;                                            // mm_to_phy_10_avalon_universal_slave_0_agent:rp_startofpacket -> router_052:sink_startofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_agent_rp_endofpacket;                                              // mm_to_phy_10_avalon_universal_slave_0_agent:rp_endofpacket -> router_052:sink_endofpacket
	wire          router_052_src_valid;                                                                                    // router_052:src_valid -> rsp_demux_051:sink_valid
	wire  [127:0] router_052_src_data;                                                                                     // router_052:src_data -> rsp_demux_051:sink_data
	wire          router_052_src_ready;                                                                                    // rsp_demux_051:sink_ready -> router_052:src_ready
	wire   [59:0] router_052_src_channel;                                                                                  // router_052:src_channel -> rsp_demux_051:sink_channel
	wire          router_052_src_startofpacket;                                                                            // router_052:src_startofpacket -> rsp_demux_051:sink_startofpacket
	wire          router_052_src_endofpacket;                                                                              // router_052:src_endofpacket -> rsp_demux_051:sink_endofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_valid;                                                   // rx_sc_fifo_10_avalon_universal_slave_0_agent:rp_valid -> router_053:sink_valid
	wire  [127:0] rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_data;                                                    // rx_sc_fifo_10_avalon_universal_slave_0_agent:rp_data -> router_053:sink_data
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_ready;                                                   // router_053:sink_ready -> rx_sc_fifo_10_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_startofpacket;                                           // rx_sc_fifo_10_avalon_universal_slave_0_agent:rp_startofpacket -> router_053:sink_startofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_endofpacket;                                             // rx_sc_fifo_10_avalon_universal_slave_0_agent:rp_endofpacket -> router_053:sink_endofpacket
	wire          router_053_src_valid;                                                                                    // router_053:src_valid -> rsp_demux_052:sink_valid
	wire  [127:0] router_053_src_data;                                                                                     // router_053:src_data -> rsp_demux_052:sink_data
	wire          router_053_src_ready;                                                                                    // rsp_demux_052:sink_ready -> router_053:src_ready
	wire   [59:0] router_053_src_channel;                                                                                  // router_053:src_channel -> rsp_demux_052:sink_channel
	wire          router_053_src_startofpacket;                                                                            // router_053:src_startofpacket -> rsp_demux_052:sink_startofpacket
	wire          router_053_src_endofpacket;                                                                              // router_053:src_endofpacket -> rsp_demux_052:sink_endofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_valid;                                                   // tx_sc_fifo_10_avalon_universal_slave_0_agent:rp_valid -> router_054:sink_valid
	wire  [127:0] tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_data;                                                    // tx_sc_fifo_10_avalon_universal_slave_0_agent:rp_data -> router_054:sink_data
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_ready;                                                   // router_054:sink_ready -> tx_sc_fifo_10_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_startofpacket;                                           // tx_sc_fifo_10_avalon_universal_slave_0_agent:rp_startofpacket -> router_054:sink_startofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_endofpacket;                                             // tx_sc_fifo_10_avalon_universal_slave_0_agent:rp_endofpacket -> router_054:sink_endofpacket
	wire          router_054_src_valid;                                                                                    // router_054:src_valid -> rsp_demux_053:sink_valid
	wire  [127:0] router_054_src_data;                                                                                     // router_054:src_data -> rsp_demux_053:sink_data
	wire          router_054_src_ready;                                                                                    // rsp_demux_053:sink_ready -> router_054:src_ready
	wire   [59:0] router_054_src_channel;                                                                                  // router_054:src_channel -> rsp_demux_053:sink_channel
	wire          router_054_src_startofpacket;                                                                            // router_054:src_startofpacket -> rsp_demux_053:sink_startofpacket
	wire          router_054_src_endofpacket;                                                                              // router_054:src_endofpacket -> rsp_demux_053:sink_endofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rp_valid;                                                  // eth_gen_mon_10_avalon_universal_slave_0_agent:rp_valid -> router_055:sink_valid
	wire  [127:0] eth_gen_mon_10_avalon_universal_slave_0_agent_rp_data;                                                   // eth_gen_mon_10_avalon_universal_slave_0_agent:rp_data -> router_055:sink_data
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rp_ready;                                                  // router_055:sink_ready -> eth_gen_mon_10_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rp_startofpacket;                                          // eth_gen_mon_10_avalon_universal_slave_0_agent:rp_startofpacket -> router_055:sink_startofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_agent_rp_endofpacket;                                            // eth_gen_mon_10_avalon_universal_slave_0_agent:rp_endofpacket -> router_055:sink_endofpacket
	wire          router_055_src_valid;                                                                                    // router_055:src_valid -> rsp_demux_054:sink_valid
	wire  [127:0] router_055_src_data;                                                                                     // router_055:src_data -> rsp_demux_054:sink_data
	wire          router_055_src_ready;                                                                                    // rsp_demux_054:sink_ready -> router_055:src_ready
	wire   [59:0] router_055_src_channel;                                                                                  // router_055:src_channel -> rsp_demux_054:sink_channel
	wire          router_055_src_startofpacket;                                                                            // router_055:src_startofpacket -> rsp_demux_054:sink_startofpacket
	wire          router_055_src_endofpacket;                                                                              // router_055:src_endofpacket -> rsp_demux_054:sink_endofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rp_valid;                                                    // mm_to_mac_11_avalon_universal_slave_0_agent:rp_valid -> router_056:sink_valid
	wire  [127:0] mm_to_mac_11_avalon_universal_slave_0_agent_rp_data;                                                     // mm_to_mac_11_avalon_universal_slave_0_agent:rp_data -> router_056:sink_data
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rp_ready;                                                    // router_056:sink_ready -> mm_to_mac_11_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rp_startofpacket;                                            // mm_to_mac_11_avalon_universal_slave_0_agent:rp_startofpacket -> router_056:sink_startofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_agent_rp_endofpacket;                                              // mm_to_mac_11_avalon_universal_slave_0_agent:rp_endofpacket -> router_056:sink_endofpacket
	wire          router_056_src_valid;                                                                                    // router_056:src_valid -> rsp_demux_055:sink_valid
	wire  [127:0] router_056_src_data;                                                                                     // router_056:src_data -> rsp_demux_055:sink_data
	wire          router_056_src_ready;                                                                                    // rsp_demux_055:sink_ready -> router_056:src_ready
	wire   [59:0] router_056_src_channel;                                                                                  // router_056:src_channel -> rsp_demux_055:sink_channel
	wire          router_056_src_startofpacket;                                                                            // router_056:src_startofpacket -> rsp_demux_055:sink_startofpacket
	wire          router_056_src_endofpacket;                                                                              // router_056:src_endofpacket -> rsp_demux_055:sink_endofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rp_valid;                                                    // mm_to_phy_11_avalon_universal_slave_0_agent:rp_valid -> router_057:sink_valid
	wire  [127:0] mm_to_phy_11_avalon_universal_slave_0_agent_rp_data;                                                     // mm_to_phy_11_avalon_universal_slave_0_agent:rp_data -> router_057:sink_data
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rp_ready;                                                    // router_057:sink_ready -> mm_to_phy_11_avalon_universal_slave_0_agent:rp_ready
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rp_startofpacket;                                            // mm_to_phy_11_avalon_universal_slave_0_agent:rp_startofpacket -> router_057:sink_startofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_agent_rp_endofpacket;                                              // mm_to_phy_11_avalon_universal_slave_0_agent:rp_endofpacket -> router_057:sink_endofpacket
	wire          router_057_src_valid;                                                                                    // router_057:src_valid -> rsp_demux_056:sink_valid
	wire  [127:0] router_057_src_data;                                                                                     // router_057:src_data -> rsp_demux_056:sink_data
	wire          router_057_src_ready;                                                                                    // rsp_demux_056:sink_ready -> router_057:src_ready
	wire   [59:0] router_057_src_channel;                                                                                  // router_057:src_channel -> rsp_demux_056:sink_channel
	wire          router_057_src_startofpacket;                                                                            // router_057:src_startofpacket -> rsp_demux_056:sink_startofpacket
	wire          router_057_src_endofpacket;                                                                              // router_057:src_endofpacket -> rsp_demux_056:sink_endofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_valid;                                                   // rx_sc_fifo_11_avalon_universal_slave_0_agent:rp_valid -> router_058:sink_valid
	wire  [127:0] rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_data;                                                    // rx_sc_fifo_11_avalon_universal_slave_0_agent:rp_data -> router_058:sink_data
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_ready;                                                   // router_058:sink_ready -> rx_sc_fifo_11_avalon_universal_slave_0_agent:rp_ready
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_startofpacket;                                           // rx_sc_fifo_11_avalon_universal_slave_0_agent:rp_startofpacket -> router_058:sink_startofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_endofpacket;                                             // rx_sc_fifo_11_avalon_universal_slave_0_agent:rp_endofpacket -> router_058:sink_endofpacket
	wire          router_058_src_valid;                                                                                    // router_058:src_valid -> rsp_demux_057:sink_valid
	wire  [127:0] router_058_src_data;                                                                                     // router_058:src_data -> rsp_demux_057:sink_data
	wire          router_058_src_ready;                                                                                    // rsp_demux_057:sink_ready -> router_058:src_ready
	wire   [59:0] router_058_src_channel;                                                                                  // router_058:src_channel -> rsp_demux_057:sink_channel
	wire          router_058_src_startofpacket;                                                                            // router_058:src_startofpacket -> rsp_demux_057:sink_startofpacket
	wire          router_058_src_endofpacket;                                                                              // router_058:src_endofpacket -> rsp_demux_057:sink_endofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_valid;                                                   // tx_sc_fifo_11_avalon_universal_slave_0_agent:rp_valid -> router_059:sink_valid
	wire  [127:0] tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_data;                                                    // tx_sc_fifo_11_avalon_universal_slave_0_agent:rp_data -> router_059:sink_data
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_ready;                                                   // router_059:sink_ready -> tx_sc_fifo_11_avalon_universal_slave_0_agent:rp_ready
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_startofpacket;                                           // tx_sc_fifo_11_avalon_universal_slave_0_agent:rp_startofpacket -> router_059:sink_startofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_endofpacket;                                             // tx_sc_fifo_11_avalon_universal_slave_0_agent:rp_endofpacket -> router_059:sink_endofpacket
	wire          router_059_src_valid;                                                                                    // router_059:src_valid -> rsp_demux_058:sink_valid
	wire  [127:0] router_059_src_data;                                                                                     // router_059:src_data -> rsp_demux_058:sink_data
	wire          router_059_src_ready;                                                                                    // rsp_demux_058:sink_ready -> router_059:src_ready
	wire   [59:0] router_059_src_channel;                                                                                  // router_059:src_channel -> rsp_demux_058:sink_channel
	wire          router_059_src_startofpacket;                                                                            // router_059:src_startofpacket -> rsp_demux_058:sink_startofpacket
	wire          router_059_src_endofpacket;                                                                              // router_059:src_endofpacket -> rsp_demux_058:sink_endofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rp_valid;                                                  // eth_gen_mon_11_avalon_universal_slave_0_agent:rp_valid -> router_060:sink_valid
	wire  [127:0] eth_gen_mon_11_avalon_universal_slave_0_agent_rp_data;                                                   // eth_gen_mon_11_avalon_universal_slave_0_agent:rp_data -> router_060:sink_data
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rp_ready;                                                  // router_060:sink_ready -> eth_gen_mon_11_avalon_universal_slave_0_agent:rp_ready
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rp_startofpacket;                                          // eth_gen_mon_11_avalon_universal_slave_0_agent:rp_startofpacket -> router_060:sink_startofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_agent_rp_endofpacket;                                            // eth_gen_mon_11_avalon_universal_slave_0_agent:rp_endofpacket -> router_060:sink_endofpacket
	wire          router_060_src_valid;                                                                                    // router_060:src_valid -> rsp_demux_059:sink_valid
	wire  [127:0] router_060_src_data;                                                                                     // router_060:src_data -> rsp_demux_059:sink_data
	wire          router_060_src_ready;                                                                                    // rsp_demux_059:sink_ready -> router_060:src_ready
	wire   [59:0] router_060_src_channel;                                                                                  // router_060:src_channel -> rsp_demux_059:sink_channel
	wire          router_060_src_startofpacket;                                                                            // router_060:src_startofpacket -> rsp_demux_059:sink_startofpacket
	wire          router_060_src_endofpacket;                                                                              // router_060:src_endofpacket -> rsp_demux_059:sink_endofpacket
	wire          router_src_valid;                                                                                        // router:src_valid -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_valid
	wire  [127:0] router_src_data;                                                                                         // router:src_data -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                        // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_ready -> router:src_ready
	wire   [59:0] router_src_channel;                                                                                      // router:src_channel -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                                // router:src_startofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                                  // router:src_endofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_sink_endofpacket
	wire  [127:0] merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_data;                               // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_ready
	wire   [59:0] merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_channel;                            // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_startofpacket;                      // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_endofpacket;                        // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                       // rsp_mux:src_valid -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_valid
	wire  [127:0] rsp_mux_src_data;                                                                                        // rsp_mux:src_data -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                                       // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [59:0] rsp_mux_src_channel;                                                                                     // rsp_mux:src_channel -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                               // rsp_mux:src_startofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                 // rsp_mux:src_endofpacket -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_sink_endofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_valid;                              // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_valid -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_valid
	wire  [127:0] merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_data;                               // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_data -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_data
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_ready;                              // merlin_master_translator_0_avalon_universal_master_0_agent:rp_ready -> merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_ready
	wire   [59:0] merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_channel;                            // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_channel -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_channel
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_startofpacket;                      // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_startofpacket -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_startofpacket
	wire          merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_endofpacket;                        // merlin_master_translator_0_avalon_universal_master_0_limiter:rsp_src_endofpacket -> merlin_master_translator_0_avalon_universal_master_0_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                       // cmd_mux:src_valid -> mm_to_mac_0_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_src_data;                                                                                        // cmd_mux:src_data -> mm_to_mac_0_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                       // mm_to_mac_0_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [59:0] cmd_mux_src_channel;                                                                                     // cmd_mux:src_channel -> mm_to_mac_0_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                               // cmd_mux:src_startofpacket -> mm_to_mac_0_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                 // cmd_mux:src_endofpacket -> mm_to_mac_0_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_0_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_0_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_0_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_0_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_0_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_0_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_0_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_0_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_0_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_0_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_0_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_0_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                   // cmd_mux_001:src_valid -> mm_to_phy_0_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_001_src_data;                                                                                    // cmd_mux_001:src_data -> mm_to_phy_0_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                                   // mm_to_phy_0_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [59:0] cmd_mux_001_src_channel;                                                                                 // cmd_mux_001:src_channel -> mm_to_phy_0_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                           // cmd_mux_001:src_startofpacket -> mm_to_phy_0_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                             // cmd_mux_001:src_endofpacket -> mm_to_phy_0_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_0_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_0_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_0_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_0_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_0_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_0_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_0_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_0_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_0_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_0_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_0_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_0_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                   // cmd_mux_002:src_valid -> tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_002_src_data;                                                                                    // cmd_mux_002:src_data -> tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                                   // tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [59:0] cmd_mux_002_src_channel;                                                                                 // cmd_mux_002:src_channel -> tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                           // cmd_mux_002:src_startofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                             // cmd_mux_002:src_endofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_0_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_0_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_0_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_0_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_0_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                   // cmd_mux_003:src_valid -> rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_003_src_data;                                                                                    // cmd_mux_003:src_data -> rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                                   // rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [59:0] cmd_mux_003_src_channel;                                                                                 // cmd_mux_003:src_channel -> rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                                           // cmd_mux_003:src_startofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                             // cmd_mux_003:src_endofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_0_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_0_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_0_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_0_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_0_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                   // cmd_mux_004:src_valid -> eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_004_src_data;                                                                                    // cmd_mux_004:src_data -> eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                                   // eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [59:0] cmd_mux_004_src_channel;                                                                                 // cmd_mux_004:src_channel -> eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                                           // cmd_mux_004:src_startofpacket -> eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                             // cmd_mux_004:src_endofpacket -> eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_0_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_0_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_0_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_0_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_0_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_0_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_0_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                   // cmd_mux_005:src_valid -> mm_to_mac_1_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_005_src_data;                                                                                    // cmd_mux_005:src_data -> mm_to_mac_1_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                                   // mm_to_mac_1_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [59:0] cmd_mux_005_src_channel;                                                                                 // cmd_mux_005:src_channel -> mm_to_mac_1_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                                           // cmd_mux_005:src_startofpacket -> mm_to_mac_1_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                             // cmd_mux_005:src_endofpacket -> mm_to_mac_1_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_1_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_1_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_1_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_1_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_1_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_1_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_1_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_1_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_1_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_1_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_1_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_1_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                                   // cmd_mux_006:src_valid -> mm_to_phy_1_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_006_src_data;                                                                                    // cmd_mux_006:src_data -> mm_to_phy_1_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                                   // mm_to_phy_1_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [59:0] cmd_mux_006_src_channel;                                                                                 // cmd_mux_006:src_channel -> mm_to_phy_1_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                                           // cmd_mux_006:src_startofpacket -> mm_to_phy_1_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                             // cmd_mux_006:src_endofpacket -> mm_to_phy_1_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_1_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_1_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_1_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_1_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_1_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_1_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_1_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_1_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_1_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_1_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_1_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_1_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                                   // cmd_mux_007:src_valid -> rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_007_src_data;                                                                                    // cmd_mux_007:src_data -> rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                                   // rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [59:0] cmd_mux_007_src_channel;                                                                                 // cmd_mux_007:src_channel -> rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                                           // cmd_mux_007:src_startofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                             // cmd_mux_007:src_endofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_1_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_1_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_1_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_1_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_1_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                                   // cmd_mux_008:src_valid -> tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_008_src_data;                                                                                    // cmd_mux_008:src_data -> tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                                   // tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [59:0] cmd_mux_008_src_channel;                                                                                 // cmd_mux_008:src_channel -> tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                                           // cmd_mux_008:src_startofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                             // cmd_mux_008:src_endofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_1_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_1_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_1_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_1_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_1_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                                   // cmd_mux_009:src_valid -> eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_009_src_data;                                                                                    // cmd_mux_009:src_data -> eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                                   // eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [59:0] cmd_mux_009_src_channel;                                                                                 // cmd_mux_009:src_channel -> eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                                           // cmd_mux_009:src_startofpacket -> eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                             // cmd_mux_009:src_endofpacket -> eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_1_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_1_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_1_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_1_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_1_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_1_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_1_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                                   // cmd_mux_010:src_valid -> mm_to_mac_2_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_010_src_data;                                                                                    // cmd_mux_010:src_data -> mm_to_mac_2_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                                   // mm_to_mac_2_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [59:0] cmd_mux_010_src_channel;                                                                                 // cmd_mux_010:src_channel -> mm_to_mac_2_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                                           // cmd_mux_010:src_startofpacket -> mm_to_mac_2_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                             // cmd_mux_010:src_endofpacket -> mm_to_mac_2_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_2_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_2_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_2_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_2_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_2_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_2_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_2_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_2_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_2_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_2_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_2_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_2_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                                   // cmd_mux_011:src_valid -> mm_to_phy_2_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_011_src_data;                                                                                    // cmd_mux_011:src_data -> mm_to_phy_2_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                                   // mm_to_phy_2_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [59:0] cmd_mux_011_src_channel;                                                                                 // cmd_mux_011:src_channel -> mm_to_phy_2_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                                           // cmd_mux_011:src_startofpacket -> mm_to_phy_2_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                             // cmd_mux_011:src_endofpacket -> mm_to_phy_2_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_2_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_2_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_2_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_2_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_2_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_2_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_2_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_2_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_2_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_2_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_2_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_2_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                                   // cmd_mux_012:src_valid -> rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_012_src_data;                                                                                    // cmd_mux_012:src_data -> rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                                                   // rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [59:0] cmd_mux_012_src_channel;                                                                                 // cmd_mux_012:src_channel -> rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                                           // cmd_mux_012:src_startofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                             // cmd_mux_012:src_endofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_2_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_2_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_2_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_2_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_2_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                                                   // cmd_mux_013:src_valid -> tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_013_src_data;                                                                                    // cmd_mux_013:src_data -> tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                                                   // tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [59:0] cmd_mux_013_src_channel;                                                                                 // cmd_mux_013:src_channel -> tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                                           // cmd_mux_013:src_startofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                             // cmd_mux_013:src_endofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_2_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_2_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_2_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_2_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_2_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                                                   // cmd_mux_014:src_valid -> eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_014_src_data;                                                                                    // cmd_mux_014:src_data -> eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                                                   // eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [59:0] cmd_mux_014_src_channel;                                                                                 // cmd_mux_014:src_channel -> eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                                                           // cmd_mux_014:src_startofpacket -> eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                             // cmd_mux_014:src_endofpacket -> eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_2_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_2_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_2_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_2_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_2_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_2_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_2_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                                   // cmd_mux_015:src_valid -> mm_to_mac_3_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_015_src_data;                                                                                    // cmd_mux_015:src_data -> mm_to_mac_3_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                                                   // mm_to_mac_3_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [59:0] cmd_mux_015_src_channel;                                                                                 // cmd_mux_015:src_channel -> mm_to_mac_3_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                                           // cmd_mux_015:src_startofpacket -> mm_to_mac_3_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                             // cmd_mux_015:src_endofpacket -> mm_to_mac_3_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_3_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_3_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_3_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_3_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_3_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_3_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_3_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_3_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_3_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_3_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_3_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_3_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                                                   // cmd_mux_016:src_valid -> mm_to_phy_3_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_016_src_data;                                                                                    // cmd_mux_016:src_data -> mm_to_phy_3_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                                                   // mm_to_phy_3_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [59:0] cmd_mux_016_src_channel;                                                                                 // cmd_mux_016:src_channel -> mm_to_phy_3_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                                                           // cmd_mux_016:src_startofpacket -> mm_to_phy_3_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                             // cmd_mux_016:src_endofpacket -> mm_to_phy_3_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_3_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_3_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_3_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_3_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_3_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_3_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_3_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_3_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_3_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_3_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_3_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_3_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                                                   // cmd_mux_017:src_valid -> rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_017_src_data;                                                                                    // cmd_mux_017:src_data -> rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                                                   // rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [59:0] cmd_mux_017_src_channel;                                                                                 // cmd_mux_017:src_channel -> rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                                                           // cmd_mux_017:src_startofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                             // cmd_mux_017:src_endofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_3_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_3_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_3_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_3_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_3_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                                                   // cmd_mux_018:src_valid -> tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_018_src_data;                                                                                    // cmd_mux_018:src_data -> tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                                                   // tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [59:0] cmd_mux_018_src_channel;                                                                                 // cmd_mux_018:src_channel -> tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                                                           // cmd_mux_018:src_startofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                             // cmd_mux_018:src_endofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_3_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_3_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_3_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_3_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_3_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                                                   // cmd_mux_019:src_valid -> eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_019_src_data;                                                                                    // cmd_mux_019:src_data -> eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                                                   // eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [59:0] cmd_mux_019_src_channel;                                                                                 // cmd_mux_019:src_channel -> eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                                                           // cmd_mux_019:src_startofpacket -> eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                             // cmd_mux_019:src_endofpacket -> eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_3_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_3_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_3_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_3_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_3_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_3_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_3_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                                                   // cmd_mux_020:src_valid -> mm_to_mac_4_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_020_src_data;                                                                                    // cmd_mux_020:src_data -> mm_to_mac_4_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_020_src_ready;                                                                                   // mm_to_mac_4_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire   [59:0] cmd_mux_020_src_channel;                                                                                 // cmd_mux_020:src_channel -> mm_to_mac_4_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_startofpacket;                                                                           // cmd_mux_020:src_startofpacket -> mm_to_mac_4_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                             // cmd_mux_020:src_endofpacket -> mm_to_mac_4_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_4_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_4_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_4_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_4_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_4_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_4_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_4_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_4_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_4_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_4_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_4_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_4_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_021_src_valid;                                                                                   // cmd_mux_021:src_valid -> mm_to_phy_4_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_021_src_data;                                                                                    // cmd_mux_021:src_data -> mm_to_phy_4_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_021_src_ready;                                                                                   // mm_to_phy_4_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire   [59:0] cmd_mux_021_src_channel;                                                                                 // cmd_mux_021:src_channel -> mm_to_phy_4_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_startofpacket;                                                                           // cmd_mux_021:src_startofpacket -> mm_to_phy_4_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                                             // cmd_mux_021:src_endofpacket -> mm_to_phy_4_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_4_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_4_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_4_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_4_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_4_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_4_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_4_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_4_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_4_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_4_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_4_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_4_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_022_src_valid;                                                                                   // cmd_mux_022:src_valid -> rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_022_src_data;                                                                                    // cmd_mux_022:src_data -> rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_022_src_ready;                                                                                   // rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_022:src_ready
	wire   [59:0] cmd_mux_022_src_channel;                                                                                 // cmd_mux_022:src_channel -> rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_022_src_startofpacket;                                                                           // cmd_mux_022:src_startofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                                             // cmd_mux_022:src_endofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_4_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_4_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_4_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_4_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_4_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_023_src_valid;                                                                                   // cmd_mux_023:src_valid -> tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_023_src_data;                                                                                    // cmd_mux_023:src_data -> tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_023_src_ready;                                                                                   // tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire   [59:0] cmd_mux_023_src_channel;                                                                                 // cmd_mux_023:src_channel -> tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_startofpacket;                                                                           // cmd_mux_023:src_startofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                                             // cmd_mux_023:src_endofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_4_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_4_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_4_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_4_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_4_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_024_src_valid;                                                                                   // cmd_mux_024:src_valid -> eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_024_src_data;                                                                                    // cmd_mux_024:src_data -> eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_024_src_ready;                                                                                   // eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_024:src_ready
	wire   [59:0] cmd_mux_024_src_channel;                                                                                 // cmd_mux_024:src_channel -> eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_024_src_startofpacket;                                                                           // cmd_mux_024:src_startofpacket -> eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                                             // cmd_mux_024:src_endofpacket -> eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_4_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_4_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_4_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_4_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_4_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_4_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_4_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_025_src_valid;                                                                                   // cmd_mux_025:src_valid -> mm_to_mac_5_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_025_src_data;                                                                                    // cmd_mux_025:src_data -> mm_to_mac_5_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_025_src_ready;                                                                                   // mm_to_mac_5_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire   [59:0] cmd_mux_025_src_channel;                                                                                 // cmd_mux_025:src_channel -> mm_to_mac_5_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_startofpacket;                                                                           // cmd_mux_025:src_startofpacket -> mm_to_mac_5_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                                             // cmd_mux_025:src_endofpacket -> mm_to_mac_5_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_5_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_5_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_5_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_5_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_5_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_5_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_5_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_5_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_5_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_5_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_5_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_5_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_026_src_valid;                                                                                   // cmd_mux_026:src_valid -> mm_to_phy_5_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_026_src_data;                                                                                    // cmd_mux_026:src_data -> mm_to_phy_5_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_026_src_ready;                                                                                   // mm_to_phy_5_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire   [59:0] cmd_mux_026_src_channel;                                                                                 // cmd_mux_026:src_channel -> mm_to_phy_5_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_startofpacket;                                                                           // cmd_mux_026:src_startofpacket -> mm_to_phy_5_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                                             // cmd_mux_026:src_endofpacket -> mm_to_phy_5_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_5_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_5_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_5_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_5_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_5_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_5_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_5_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_5_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_5_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_5_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_5_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_5_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_027_src_valid;                                                                                   // cmd_mux_027:src_valid -> rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_027_src_data;                                                                                    // cmd_mux_027:src_data -> rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_027_src_ready;                                                                                   // rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_027:src_ready
	wire   [59:0] cmd_mux_027_src_channel;                                                                                 // cmd_mux_027:src_channel -> rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_027_src_startofpacket;                                                                           // cmd_mux_027:src_startofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                                             // cmd_mux_027:src_endofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_5_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_5_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_5_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_5_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_5_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_028_src_valid;                                                                                   // cmd_mux_028:src_valid -> tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_028_src_data;                                                                                    // cmd_mux_028:src_data -> tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_028_src_ready;                                                                                   // tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_028:src_ready
	wire   [59:0] cmd_mux_028_src_channel;                                                                                 // cmd_mux_028:src_channel -> tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_028_src_startofpacket;                                                                           // cmd_mux_028:src_startofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                                             // cmd_mux_028:src_endofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_5_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_5_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_5_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_5_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_5_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_029_src_valid;                                                                                   // cmd_mux_029:src_valid -> eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_029_src_data;                                                                                    // cmd_mux_029:src_data -> eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_029_src_ready;                                                                                   // eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_029:src_ready
	wire   [59:0] cmd_mux_029_src_channel;                                                                                 // cmd_mux_029:src_channel -> eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_029_src_startofpacket;                                                                           // cmd_mux_029:src_startofpacket -> eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                                             // cmd_mux_029:src_endofpacket -> eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_5_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_5_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_5_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_5_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_5_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_5_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_5_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_030_src_valid;                                                                                   // cmd_mux_030:src_valid -> mm_to_mac_6_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_030_src_data;                                                                                    // cmd_mux_030:src_data -> mm_to_mac_6_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_030_src_ready;                                                                                   // mm_to_mac_6_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_030:src_ready
	wire   [59:0] cmd_mux_030_src_channel;                                                                                 // cmd_mux_030:src_channel -> mm_to_mac_6_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_030_src_startofpacket;                                                                           // cmd_mux_030:src_startofpacket -> mm_to_mac_6_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                                             // cmd_mux_030:src_endofpacket -> mm_to_mac_6_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_6_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_6_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_6_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_6_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_6_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_6_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_6_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_6_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_6_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_6_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_6_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_6_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_031_src_valid;                                                                                   // cmd_mux_031:src_valid -> mm_to_phy_6_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_031_src_data;                                                                                    // cmd_mux_031:src_data -> mm_to_phy_6_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_031_src_ready;                                                                                   // mm_to_phy_6_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_031:src_ready
	wire   [59:0] cmd_mux_031_src_channel;                                                                                 // cmd_mux_031:src_channel -> mm_to_phy_6_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_031_src_startofpacket;                                                                           // cmd_mux_031:src_startofpacket -> mm_to_phy_6_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                                             // cmd_mux_031:src_endofpacket -> mm_to_phy_6_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_6_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_6_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_6_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_6_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_6_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_6_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_6_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_6_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_6_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_6_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_6_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_6_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_032_src_valid;                                                                                   // cmd_mux_032:src_valid -> rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_032_src_data;                                                                                    // cmd_mux_032:src_data -> rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_032_src_ready;                                                                                   // rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_032:src_ready
	wire   [59:0] cmd_mux_032_src_channel;                                                                                 // cmd_mux_032:src_channel -> rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_032_src_startofpacket;                                                                           // cmd_mux_032:src_startofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                                             // cmd_mux_032:src_endofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_6_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_6_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_6_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_6_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_6_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_033_src_valid;                                                                                   // cmd_mux_033:src_valid -> tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_033_src_data;                                                                                    // cmd_mux_033:src_data -> tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_033_src_ready;                                                                                   // tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_033:src_ready
	wire   [59:0] cmd_mux_033_src_channel;                                                                                 // cmd_mux_033:src_channel -> tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_033_src_startofpacket;                                                                           // cmd_mux_033:src_startofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                                             // cmd_mux_033:src_endofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_6_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_6_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_6_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_6_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_6_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_034_src_valid;                                                                                   // cmd_mux_034:src_valid -> eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_034_src_data;                                                                                    // cmd_mux_034:src_data -> eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_034_src_ready;                                                                                   // eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_034:src_ready
	wire   [59:0] cmd_mux_034_src_channel;                                                                                 // cmd_mux_034:src_channel -> eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_034_src_startofpacket;                                                                           // cmd_mux_034:src_startofpacket -> eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                                             // cmd_mux_034:src_endofpacket -> eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_6_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_6_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_6_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_6_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_6_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_6_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_6_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_035_src_valid;                                                                                   // cmd_mux_035:src_valid -> mm_to_mac_7_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_035_src_data;                                                                                    // cmd_mux_035:src_data -> mm_to_mac_7_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_035_src_ready;                                                                                   // mm_to_mac_7_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_035:src_ready
	wire   [59:0] cmd_mux_035_src_channel;                                                                                 // cmd_mux_035:src_channel -> mm_to_mac_7_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_035_src_startofpacket;                                                                           // cmd_mux_035:src_startofpacket -> mm_to_mac_7_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                                             // cmd_mux_035:src_endofpacket -> mm_to_mac_7_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_7_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_7_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_7_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_7_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_7_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_7_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_7_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_7_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_7_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_7_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_7_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_7_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_036_src_valid;                                                                                   // cmd_mux_036:src_valid -> mm_to_phy_7_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_036_src_data;                                                                                    // cmd_mux_036:src_data -> mm_to_phy_7_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_036_src_ready;                                                                                   // mm_to_phy_7_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_036:src_ready
	wire   [59:0] cmd_mux_036_src_channel;                                                                                 // cmd_mux_036:src_channel -> mm_to_phy_7_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_036_src_startofpacket;                                                                           // cmd_mux_036:src_startofpacket -> mm_to_phy_7_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                                             // cmd_mux_036:src_endofpacket -> mm_to_phy_7_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_7_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_7_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_7_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_7_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_7_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_7_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_7_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_7_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_7_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_7_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_7_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_7_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_037_src_valid;                                                                                   // cmd_mux_037:src_valid -> rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_037_src_data;                                                                                    // cmd_mux_037:src_data -> rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_037_src_ready;                                                                                   // rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_037:src_ready
	wire   [59:0] cmd_mux_037_src_channel;                                                                                 // cmd_mux_037:src_channel -> rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_037_src_startofpacket;                                                                           // cmd_mux_037:src_startofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_037_src_endofpacket;                                                                             // cmd_mux_037:src_endofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_7_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_7_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_7_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_7_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_7_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_038_src_valid;                                                                                   // cmd_mux_038:src_valid -> tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_038_src_data;                                                                                    // cmd_mux_038:src_data -> tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_038_src_ready;                                                                                   // tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_038:src_ready
	wire   [59:0] cmd_mux_038_src_channel;                                                                                 // cmd_mux_038:src_channel -> tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_038_src_startofpacket;                                                                           // cmd_mux_038:src_startofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_038_src_endofpacket;                                                                             // cmd_mux_038:src_endofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_7_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_7_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_7_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_7_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_7_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_039_src_valid;                                                                                   // cmd_mux_039:src_valid -> eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_039_src_data;                                                                                    // cmd_mux_039:src_data -> eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_039_src_ready;                                                                                   // eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_039:src_ready
	wire   [59:0] cmd_mux_039_src_channel;                                                                                 // cmd_mux_039:src_channel -> eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_039_src_startofpacket;                                                                           // cmd_mux_039:src_startofpacket -> eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_039_src_endofpacket;                                                                             // cmd_mux_039:src_endofpacket -> eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_7_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_7_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_7_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_7_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_7_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_7_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_7_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_040_src_valid;                                                                                   // cmd_mux_040:src_valid -> mm_to_mac_8_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_040_src_data;                                                                                    // cmd_mux_040:src_data -> mm_to_mac_8_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_040_src_ready;                                                                                   // mm_to_mac_8_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_040:src_ready
	wire   [59:0] cmd_mux_040_src_channel;                                                                                 // cmd_mux_040:src_channel -> mm_to_mac_8_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_040_src_startofpacket;                                                                           // cmd_mux_040:src_startofpacket -> mm_to_mac_8_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_040_src_endofpacket;                                                                             // cmd_mux_040:src_endofpacket -> mm_to_mac_8_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_8_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_8_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_8_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_8_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_8_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_8_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_8_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_8_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_8_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_8_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_8_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_8_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_041_src_valid;                                                                                   // cmd_mux_041:src_valid -> mm_to_phy_8_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_041_src_data;                                                                                    // cmd_mux_041:src_data -> mm_to_phy_8_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_041_src_ready;                                                                                   // mm_to_phy_8_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_041:src_ready
	wire   [59:0] cmd_mux_041_src_channel;                                                                                 // cmd_mux_041:src_channel -> mm_to_phy_8_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_041_src_startofpacket;                                                                           // cmd_mux_041:src_startofpacket -> mm_to_phy_8_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_041_src_endofpacket;                                                                             // cmd_mux_041:src_endofpacket -> mm_to_phy_8_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_8_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_8_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_8_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_8_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_8_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_8_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_8_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_8_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_8_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_8_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_8_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_8_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_042_src_valid;                                                                                   // cmd_mux_042:src_valid -> rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_042_src_data;                                                                                    // cmd_mux_042:src_data -> rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_042_src_ready;                                                                                   // rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_042:src_ready
	wire   [59:0] cmd_mux_042_src_channel;                                                                                 // cmd_mux_042:src_channel -> rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_042_src_startofpacket;                                                                           // cmd_mux_042:src_startofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_042_src_endofpacket;                                                                             // cmd_mux_042:src_endofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_8_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_8_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_8_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_8_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_8_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_043_src_valid;                                                                                   // cmd_mux_043:src_valid -> tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_043_src_data;                                                                                    // cmd_mux_043:src_data -> tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_043_src_ready;                                                                                   // tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_043:src_ready
	wire   [59:0] cmd_mux_043_src_channel;                                                                                 // cmd_mux_043:src_channel -> tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_043_src_startofpacket;                                                                           // cmd_mux_043:src_startofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_043_src_endofpacket;                                                                             // cmd_mux_043:src_endofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_8_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_8_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_8_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_8_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_8_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_044_src_valid;                                                                                   // cmd_mux_044:src_valid -> eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_044_src_data;                                                                                    // cmd_mux_044:src_data -> eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_044_src_ready;                                                                                   // eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_044:src_ready
	wire   [59:0] cmd_mux_044_src_channel;                                                                                 // cmd_mux_044:src_channel -> eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_044_src_startofpacket;                                                                           // cmd_mux_044:src_startofpacket -> eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_044_src_endofpacket;                                                                             // cmd_mux_044:src_endofpacket -> eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_8_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_8_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_8_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_8_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_8_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_8_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_8_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_045_src_valid;                                                                                   // cmd_mux_045:src_valid -> mm_to_mac_9_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_045_src_data;                                                                                    // cmd_mux_045:src_data -> mm_to_mac_9_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_045_src_ready;                                                                                   // mm_to_mac_9_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_045:src_ready
	wire   [59:0] cmd_mux_045_src_channel;                                                                                 // cmd_mux_045:src_channel -> mm_to_mac_9_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_045_src_startofpacket;                                                                           // cmd_mux_045:src_startofpacket -> mm_to_mac_9_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_045_src_endofpacket;                                                                             // cmd_mux_045:src_endofpacket -> mm_to_mac_9_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_mac_9_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_9_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_mac_9_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_9_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_mac_9_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_9_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_mac_9_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_9_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_mac_9_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_9_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_mac_9_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_9_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_046_src_valid;                                                                                   // cmd_mux_046:src_valid -> mm_to_phy_9_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_046_src_data;                                                                                    // cmd_mux_046:src_data -> mm_to_phy_9_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_046_src_ready;                                                                                   // mm_to_phy_9_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_046:src_ready
	wire   [59:0] cmd_mux_046_src_channel;                                                                                 // cmd_mux_046:src_channel -> mm_to_phy_9_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_046_src_startofpacket;                                                                           // cmd_mux_046:src_startofpacket -> mm_to_phy_9_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_046_src_endofpacket;                                                                             // cmd_mux_046:src_endofpacket -> mm_to_phy_9_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_valid;                                        // mm_to_phy_9_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_9_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_data;                                         // mm_to_phy_9_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_9_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_ready;                                        // mm_to_phy_9_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_9_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_channel;                                      // mm_to_phy_9_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_9_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                                // mm_to_phy_9_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_9_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                  // mm_to_phy_9_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_9_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_047_src_valid;                                                                                   // cmd_mux_047:src_valid -> rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_047_src_data;                                                                                    // cmd_mux_047:src_data -> rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_047_src_ready;                                                                                   // rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_047:src_ready
	wire   [59:0] cmd_mux_047_src_channel;                                                                                 // cmd_mux_047:src_channel -> rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_047_src_startofpacket;                                                                           // cmd_mux_047:src_startofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_047_src_endofpacket;                                                                             // cmd_mux_047:src_endofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_9_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_data;                                        // rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_9_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // rx_sc_fifo_9_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_9_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_9_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_048_src_valid;                                                                                   // cmd_mux_048:src_valid -> tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_048_src_data;                                                                                    // cmd_mux_048:src_data -> tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_048_src_ready;                                                                                   // tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_048:src_ready
	wire   [59:0] cmd_mux_048_src_channel;                                                                                 // cmd_mux_048:src_channel -> tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_048_src_startofpacket;                                                                           // cmd_mux_048:src_startofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_048_src_endofpacket;                                                                             // cmd_mux_048:src_endofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_9_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_data;                                        // tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_9_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // tx_sc_fifo_9_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_9_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_9_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_049_src_valid;                                                                                   // cmd_mux_049:src_valid -> eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_049_src_data;                                                                                    // cmd_mux_049:src_data -> eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_049_src_ready;                                                                                   // eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_049:src_ready
	wire   [59:0] cmd_mux_049_src_channel;                                                                                 // cmd_mux_049:src_channel -> eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_049_src_startofpacket;                                                                           // cmd_mux_049:src_startofpacket -> eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_049_src_endofpacket;                                                                             // cmd_mux_049:src_endofpacket -> eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_9_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_data;                                       // eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_9_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // eth_gen_mon_9_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_9_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_9_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // eth_gen_mon_9_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_9_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_050_src_valid;                                                                                   // cmd_mux_050:src_valid -> mm_to_mac_10_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_050_src_data;                                                                                    // cmd_mux_050:src_data -> mm_to_mac_10_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_050_src_ready;                                                                                   // mm_to_mac_10_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_050:src_ready
	wire   [59:0] cmd_mux_050_src_channel;                                                                                 // cmd_mux_050:src_channel -> mm_to_mac_10_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_050_src_startofpacket;                                                                           // cmd_mux_050:src_startofpacket -> mm_to_mac_10_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_050_src_endofpacket;                                                                             // cmd_mux_050:src_endofpacket -> mm_to_mac_10_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // mm_to_mac_10_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_10_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_data;                                        // mm_to_mac_10_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_10_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // mm_to_mac_10_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_10_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // mm_to_mac_10_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_10_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // mm_to_mac_10_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_10_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // mm_to_mac_10_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_10_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_051_src_valid;                                                                                   // cmd_mux_051:src_valid -> mm_to_phy_10_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_051_src_data;                                                                                    // cmd_mux_051:src_data -> mm_to_phy_10_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_051_src_ready;                                                                                   // mm_to_phy_10_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_051:src_ready
	wire   [59:0] cmd_mux_051_src_channel;                                                                                 // cmd_mux_051:src_channel -> mm_to_phy_10_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_051_src_startofpacket;                                                                           // cmd_mux_051:src_startofpacket -> mm_to_phy_10_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_051_src_endofpacket;                                                                             // cmd_mux_051:src_endofpacket -> mm_to_phy_10_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // mm_to_phy_10_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_10_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_data;                                        // mm_to_phy_10_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_10_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // mm_to_phy_10_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_10_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // mm_to_phy_10_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_10_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // mm_to_phy_10_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_10_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // mm_to_phy_10_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_10_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_052_src_valid;                                                                                   // cmd_mux_052:src_valid -> rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_052_src_data;                                                                                    // cmd_mux_052:src_data -> rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_052_src_ready;                                                                                   // rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_052:src_ready
	wire   [59:0] cmd_mux_052_src_channel;                                                                                 // cmd_mux_052:src_channel -> rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_052_src_startofpacket;                                                                           // cmd_mux_052:src_startofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_052_src_endofpacket;                                                                             // cmd_mux_052:src_endofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_10_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_data;                                       // rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_10_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // rx_sc_fifo_10_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_10_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_10_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_053_src_valid;                                                                                   // cmd_mux_053:src_valid -> tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_053_src_data;                                                                                    // cmd_mux_053:src_data -> tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_053_src_ready;                                                                                   // tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_053:src_ready
	wire   [59:0] cmd_mux_053_src_channel;                                                                                 // cmd_mux_053:src_channel -> tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_053_src_startofpacket;                                                                           // cmd_mux_053:src_startofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_053_src_endofpacket;                                                                             // cmd_mux_053:src_endofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_10_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_data;                                       // tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_10_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // tx_sc_fifo_10_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_10_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_10_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_054_src_valid;                                                                                   // cmd_mux_054:src_valid -> eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_054_src_data;                                                                                    // cmd_mux_054:src_data -> eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_054_src_ready;                                                                                   // eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_054:src_ready
	wire   [59:0] cmd_mux_054_src_channel;                                                                                 // cmd_mux_054:src_channel -> eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_054_src_startofpacket;                                                                           // cmd_mux_054:src_startofpacket -> eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_054_src_endofpacket;                                                                             // cmd_mux_054:src_endofpacket -> eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_valid;                                     // eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_10_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_data;                                      // eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_10_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_ready;                                     // eth_gen_mon_10_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_channel;                                   // eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_10_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                             // eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_10_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                               // eth_gen_mon_10_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_10_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_055_src_valid;                                                                                   // cmd_mux_055:src_valid -> mm_to_mac_11_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_055_src_data;                                                                                    // cmd_mux_055:src_data -> mm_to_mac_11_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_055_src_ready;                                                                                   // mm_to_mac_11_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_055:src_ready
	wire   [59:0] cmd_mux_055_src_channel;                                                                                 // cmd_mux_055:src_channel -> mm_to_mac_11_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_055_src_startofpacket;                                                                           // cmd_mux_055:src_startofpacket -> mm_to_mac_11_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_055_src_endofpacket;                                                                             // cmd_mux_055:src_endofpacket -> mm_to_mac_11_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // mm_to_mac_11_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_mac_11_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_data;                                        // mm_to_mac_11_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_mac_11_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // mm_to_mac_11_avalon_universal_slave_0_agent:cp_ready -> mm_to_mac_11_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // mm_to_mac_11_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_mac_11_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // mm_to_mac_11_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_mac_11_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // mm_to_mac_11_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_mac_11_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_056_src_valid;                                                                                   // cmd_mux_056:src_valid -> mm_to_phy_11_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_056_src_data;                                                                                    // cmd_mux_056:src_data -> mm_to_phy_11_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_056_src_ready;                                                                                   // mm_to_phy_11_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_056:src_ready
	wire   [59:0] cmd_mux_056_src_channel;                                                                                 // cmd_mux_056:src_channel -> mm_to_phy_11_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_056_src_startofpacket;                                                                           // cmd_mux_056:src_startofpacket -> mm_to_phy_11_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_056_src_endofpacket;                                                                             // cmd_mux_056:src_endofpacket -> mm_to_phy_11_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_valid;                                       // mm_to_phy_11_avalon_universal_slave_0_burst_adapter:source0_valid -> mm_to_phy_11_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_data;                                        // mm_to_phy_11_avalon_universal_slave_0_burst_adapter:source0_data -> mm_to_phy_11_avalon_universal_slave_0_agent:cp_data
	wire          mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_ready;                                       // mm_to_phy_11_avalon_universal_slave_0_agent:cp_ready -> mm_to_phy_11_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_channel;                                     // mm_to_phy_11_avalon_universal_slave_0_burst_adapter:source0_channel -> mm_to_phy_11_avalon_universal_slave_0_agent:cp_channel
	wire          mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                               // mm_to_phy_11_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> mm_to_phy_11_avalon_universal_slave_0_agent:cp_startofpacket
	wire          mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                 // mm_to_phy_11_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> mm_to_phy_11_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_057_src_valid;                                                                                   // cmd_mux_057:src_valid -> rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_057_src_data;                                                                                    // cmd_mux_057:src_data -> rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_057_src_ready;                                                                                   // rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_057:src_ready
	wire   [59:0] cmd_mux_057_src_channel;                                                                                 // cmd_mux_057:src_channel -> rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_057_src_startofpacket;                                                                           // cmd_mux_057:src_startofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_057_src_endofpacket;                                                                             // cmd_mux_057:src_endofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_valid -> rx_sc_fifo_11_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_data;                                       // rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_data -> rx_sc_fifo_11_avalon_universal_slave_0_agent:cp_data
	wire          rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // rx_sc_fifo_11_avalon_universal_slave_0_agent:cp_ready -> rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_channel -> rx_sc_fifo_11_avalon_universal_slave_0_agent:cp_channel
	wire          rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_agent:cp_startofpacket
	wire          rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> rx_sc_fifo_11_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_058_src_valid;                                                                                   // cmd_mux_058:src_valid -> tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_058_src_data;                                                                                    // cmd_mux_058:src_data -> tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_058_src_ready;                                                                                   // tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_058:src_ready
	wire   [59:0] cmd_mux_058_src_channel;                                                                                 // cmd_mux_058:src_channel -> tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_058_src_startofpacket;                                                                           // cmd_mux_058:src_startofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_058_src_endofpacket;                                                                             // cmd_mux_058:src_endofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_valid;                                      // tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_valid -> tx_sc_fifo_11_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_data;                                       // tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_data -> tx_sc_fifo_11_avalon_universal_slave_0_agent:cp_data
	wire          tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_ready;                                      // tx_sc_fifo_11_avalon_universal_slave_0_agent:cp_ready -> tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_channel;                                    // tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_channel -> tx_sc_fifo_11_avalon_universal_slave_0_agent:cp_channel
	wire          tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                              // tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_agent:cp_startofpacket
	wire          tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                                // tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> tx_sc_fifo_11_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_mux_059_src_valid;                                                                                   // cmd_mux_059:src_valid -> eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:sink0_valid
	wire  [127:0] cmd_mux_059_src_data;                                                                                    // cmd_mux_059:src_data -> eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_059_src_ready;                                                                                   // eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:sink0_ready -> cmd_mux_059:src_ready
	wire   [59:0] cmd_mux_059_src_channel;                                                                                 // cmd_mux_059:src_channel -> eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_059_src_startofpacket;                                                                           // cmd_mux_059:src_startofpacket -> eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_059_src_endofpacket;                                                                             // cmd_mux_059:src_endofpacket -> eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:sink0_endofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_valid;                                     // eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:source0_valid -> eth_gen_mon_11_avalon_universal_slave_0_agent:cp_valid
	wire  [127:0] eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_data;                                      // eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:source0_data -> eth_gen_mon_11_avalon_universal_slave_0_agent:cp_data
	wire          eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_ready;                                     // eth_gen_mon_11_avalon_universal_slave_0_agent:cp_ready -> eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:source0_ready
	wire   [59:0] eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_channel;                                   // eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:source0_channel -> eth_gen_mon_11_avalon_universal_slave_0_agent:cp_channel
	wire          eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket;                             // eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:source0_startofpacket -> eth_gen_mon_11_avalon_universal_slave_0_agent:cp_startofpacket
	wire          eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket;                               // eth_gen_mon_11_avalon_universal_slave_0_burst_adapter:source0_endofpacket -> eth_gen_mon_11_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [127:0] cmd_demux_src0_data;                                                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [59:0] cmd_demux_src0_channel;                                                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [127:0] cmd_demux_src1_data;                                                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [59:0] cmd_demux_src1_channel;                                                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                                    // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [127:0] cmd_demux_src5_data;                                                                                     // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                                    // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [59:0] cmd_demux_src5_channel;                                                                                  // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                                            // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                              // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                                    // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [127:0] cmd_demux_src6_data;                                                                                     // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                                    // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [59:0] cmd_demux_src6_channel;                                                                                  // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                                            // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                              // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                                   // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [127:0] cmd_demux_src10_data;                                                                                    // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                                   // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [59:0] cmd_demux_src10_channel;                                                                                 // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                                           // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                                             // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                                   // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [127:0] cmd_demux_src11_data;                                                                                    // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                                   // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [59:0] cmd_demux_src11_channel;                                                                                 // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                                           // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                                             // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                                   // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [127:0] cmd_demux_src15_data;                                                                                    // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                                   // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [59:0] cmd_demux_src15_channel;                                                                                 // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                                           // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                                             // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                                   // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [127:0] cmd_demux_src16_data;                                                                                    // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                                   // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [59:0] cmd_demux_src16_channel;                                                                                 // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                                           // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                                             // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                                   // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [127:0] cmd_demux_src20_data;                                                                                    // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                                   // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [59:0] cmd_demux_src20_channel;                                                                                 // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                                           // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                                             // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                                                   // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [127:0] cmd_demux_src21_data;                                                                                    // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                                                   // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [59:0] cmd_demux_src21_channel;                                                                                 // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                                           // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                                             // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                                                   // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [127:0] cmd_demux_src25_data;                                                                                    // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                                                   // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [59:0] cmd_demux_src25_channel;                                                                                 // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                                                           // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                                             // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                                                   // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [127:0] cmd_demux_src26_data;                                                                                    // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                                                   // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [59:0] cmd_demux_src26_channel;                                                                                 // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                                                           // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                                             // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src30_valid;                                                                                   // cmd_demux:src30_valid -> cmd_mux_030:sink0_valid
	wire  [127:0] cmd_demux_src30_data;                                                                                    // cmd_demux:src30_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_src30_ready;                                                                                   // cmd_mux_030:sink0_ready -> cmd_demux:src30_ready
	wire   [59:0] cmd_demux_src30_channel;                                                                                 // cmd_demux:src30_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_src30_startofpacket;                                                                           // cmd_demux:src30_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_src30_endofpacket;                                                                             // cmd_demux:src30_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_src31_valid;                                                                                   // cmd_demux:src31_valid -> cmd_mux_031:sink0_valid
	wire  [127:0] cmd_demux_src31_data;                                                                                    // cmd_demux:src31_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_src31_ready;                                                                                   // cmd_mux_031:sink0_ready -> cmd_demux:src31_ready
	wire   [59:0] cmd_demux_src31_channel;                                                                                 // cmd_demux:src31_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_src31_startofpacket;                                                                           // cmd_demux:src31_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_src31_endofpacket;                                                                             // cmd_demux:src31_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_src35_valid;                                                                                   // cmd_demux:src35_valid -> cmd_mux_035:sink0_valid
	wire  [127:0] cmd_demux_src35_data;                                                                                    // cmd_demux:src35_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_src35_ready;                                                                                   // cmd_mux_035:sink0_ready -> cmd_demux:src35_ready
	wire   [59:0] cmd_demux_src35_channel;                                                                                 // cmd_demux:src35_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_src35_startofpacket;                                                                           // cmd_demux:src35_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_src35_endofpacket;                                                                             // cmd_demux:src35_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_src36_valid;                                                                                   // cmd_demux:src36_valid -> cmd_mux_036:sink0_valid
	wire  [127:0] cmd_demux_src36_data;                                                                                    // cmd_demux:src36_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_src36_ready;                                                                                   // cmd_mux_036:sink0_ready -> cmd_demux:src36_ready
	wire   [59:0] cmd_demux_src36_channel;                                                                                 // cmd_demux:src36_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_src36_startofpacket;                                                                           // cmd_demux:src36_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_src36_endofpacket;                                                                             // cmd_demux:src36_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_src40_valid;                                                                                   // cmd_demux:src40_valid -> cmd_mux_040:sink0_valid
	wire  [127:0] cmd_demux_src40_data;                                                                                    // cmd_demux:src40_data -> cmd_mux_040:sink0_data
	wire          cmd_demux_src40_ready;                                                                                   // cmd_mux_040:sink0_ready -> cmd_demux:src40_ready
	wire   [59:0] cmd_demux_src40_channel;                                                                                 // cmd_demux:src40_channel -> cmd_mux_040:sink0_channel
	wire          cmd_demux_src40_startofpacket;                                                                           // cmd_demux:src40_startofpacket -> cmd_mux_040:sink0_startofpacket
	wire          cmd_demux_src40_endofpacket;                                                                             // cmd_demux:src40_endofpacket -> cmd_mux_040:sink0_endofpacket
	wire          cmd_demux_src41_valid;                                                                                   // cmd_demux:src41_valid -> cmd_mux_041:sink0_valid
	wire  [127:0] cmd_demux_src41_data;                                                                                    // cmd_demux:src41_data -> cmd_mux_041:sink0_data
	wire          cmd_demux_src41_ready;                                                                                   // cmd_mux_041:sink0_ready -> cmd_demux:src41_ready
	wire   [59:0] cmd_demux_src41_channel;                                                                                 // cmd_demux:src41_channel -> cmd_mux_041:sink0_channel
	wire          cmd_demux_src41_startofpacket;                                                                           // cmd_demux:src41_startofpacket -> cmd_mux_041:sink0_startofpacket
	wire          cmd_demux_src41_endofpacket;                                                                             // cmd_demux:src41_endofpacket -> cmd_mux_041:sink0_endofpacket
	wire          cmd_demux_src45_valid;                                                                                   // cmd_demux:src45_valid -> cmd_mux_045:sink0_valid
	wire  [127:0] cmd_demux_src45_data;                                                                                    // cmd_demux:src45_data -> cmd_mux_045:sink0_data
	wire          cmd_demux_src45_ready;                                                                                   // cmd_mux_045:sink0_ready -> cmd_demux:src45_ready
	wire   [59:0] cmd_demux_src45_channel;                                                                                 // cmd_demux:src45_channel -> cmd_mux_045:sink0_channel
	wire          cmd_demux_src45_startofpacket;                                                                           // cmd_demux:src45_startofpacket -> cmd_mux_045:sink0_startofpacket
	wire          cmd_demux_src45_endofpacket;                                                                             // cmd_demux:src45_endofpacket -> cmd_mux_045:sink0_endofpacket
	wire          cmd_demux_src46_valid;                                                                                   // cmd_demux:src46_valid -> cmd_mux_046:sink0_valid
	wire  [127:0] cmd_demux_src46_data;                                                                                    // cmd_demux:src46_data -> cmd_mux_046:sink0_data
	wire          cmd_demux_src46_ready;                                                                                   // cmd_mux_046:sink0_ready -> cmd_demux:src46_ready
	wire   [59:0] cmd_demux_src46_channel;                                                                                 // cmd_demux:src46_channel -> cmd_mux_046:sink0_channel
	wire          cmd_demux_src46_startofpacket;                                                                           // cmd_demux:src46_startofpacket -> cmd_mux_046:sink0_startofpacket
	wire          cmd_demux_src46_endofpacket;                                                                             // cmd_demux:src46_endofpacket -> cmd_mux_046:sink0_endofpacket
	wire          cmd_demux_src50_valid;                                                                                   // cmd_demux:src50_valid -> cmd_mux_050:sink0_valid
	wire  [127:0] cmd_demux_src50_data;                                                                                    // cmd_demux:src50_data -> cmd_mux_050:sink0_data
	wire          cmd_demux_src50_ready;                                                                                   // cmd_mux_050:sink0_ready -> cmd_demux:src50_ready
	wire   [59:0] cmd_demux_src50_channel;                                                                                 // cmd_demux:src50_channel -> cmd_mux_050:sink0_channel
	wire          cmd_demux_src50_startofpacket;                                                                           // cmd_demux:src50_startofpacket -> cmd_mux_050:sink0_startofpacket
	wire          cmd_demux_src50_endofpacket;                                                                             // cmd_demux:src50_endofpacket -> cmd_mux_050:sink0_endofpacket
	wire          cmd_demux_src51_valid;                                                                                   // cmd_demux:src51_valid -> cmd_mux_051:sink0_valid
	wire  [127:0] cmd_demux_src51_data;                                                                                    // cmd_demux:src51_data -> cmd_mux_051:sink0_data
	wire          cmd_demux_src51_ready;                                                                                   // cmd_mux_051:sink0_ready -> cmd_demux:src51_ready
	wire   [59:0] cmd_demux_src51_channel;                                                                                 // cmd_demux:src51_channel -> cmd_mux_051:sink0_channel
	wire          cmd_demux_src51_startofpacket;                                                                           // cmd_demux:src51_startofpacket -> cmd_mux_051:sink0_startofpacket
	wire          cmd_demux_src51_endofpacket;                                                                             // cmd_demux:src51_endofpacket -> cmd_mux_051:sink0_endofpacket
	wire          cmd_demux_src55_valid;                                                                                   // cmd_demux:src55_valid -> cmd_mux_055:sink0_valid
	wire  [127:0] cmd_demux_src55_data;                                                                                    // cmd_demux:src55_data -> cmd_mux_055:sink0_data
	wire          cmd_demux_src55_ready;                                                                                   // cmd_mux_055:sink0_ready -> cmd_demux:src55_ready
	wire   [59:0] cmd_demux_src55_channel;                                                                                 // cmd_demux:src55_channel -> cmd_mux_055:sink0_channel
	wire          cmd_demux_src55_startofpacket;                                                                           // cmd_demux:src55_startofpacket -> cmd_mux_055:sink0_startofpacket
	wire          cmd_demux_src55_endofpacket;                                                                             // cmd_demux:src55_endofpacket -> cmd_mux_055:sink0_endofpacket
	wire          cmd_demux_src56_valid;                                                                                   // cmd_demux:src56_valid -> cmd_mux_056:sink0_valid
	wire  [127:0] cmd_demux_src56_data;                                                                                    // cmd_demux:src56_data -> cmd_mux_056:sink0_data
	wire          cmd_demux_src56_ready;                                                                                   // cmd_mux_056:sink0_ready -> cmd_demux:src56_ready
	wire   [59:0] cmd_demux_src56_channel;                                                                                 // cmd_demux:src56_channel -> cmd_mux_056:sink0_channel
	wire          cmd_demux_src56_startofpacket;                                                                           // cmd_demux:src56_startofpacket -> cmd_mux_056:sink0_startofpacket
	wire          cmd_demux_src56_endofpacket;                                                                             // cmd_demux:src56_endofpacket -> cmd_mux_056:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [127:0] rsp_demux_src0_data;                                                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [59:0] rsp_demux_src0_channel;                                                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [127:0] rsp_demux_001_src0_data;                                                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [59:0] rsp_demux_001_src0_channel;                                                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                                // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [127:0] rsp_demux_005_src0_data;                                                                                 // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                                // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [59:0] rsp_demux_005_src0_channel;                                                                              // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                        // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                          // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                                // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [127:0] rsp_demux_006_src0_data;                                                                                 // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                                // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [59:0] rsp_demux_006_src0_channel;                                                                              // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                        // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                          // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                                // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [127:0] rsp_demux_010_src0_data;                                                                                 // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                                // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [59:0] rsp_demux_010_src0_channel;                                                                              // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                        // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                          // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                                // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [127:0] rsp_demux_011_src0_data;                                                                                 // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                                // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [59:0] rsp_demux_011_src0_channel;                                                                              // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                        // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                          // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                                // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [127:0] rsp_demux_015_src0_data;                                                                                 // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                                // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [59:0] rsp_demux_015_src0_channel;                                                                              // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                                        // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                          // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                                // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [127:0] rsp_demux_016_src0_data;                                                                                 // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                                // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [59:0] rsp_demux_016_src0_channel;                                                                              // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                                        // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                                          // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                                // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [127:0] rsp_demux_020_src0_data;                                                                                 // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                                // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [59:0] rsp_demux_020_src0_channel;                                                                              // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                                        // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                                          // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                                // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [127:0] rsp_demux_021_src0_data;                                                                                 // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                                                // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [59:0] rsp_demux_021_src0_channel;                                                                              // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                                        // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                                          // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_025_src0_valid;                                                                                // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [127:0] rsp_demux_025_src0_data;                                                                                 // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                                                // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [59:0] rsp_demux_025_src0_channel;                                                                              // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                                        // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                                          // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                                                // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [127:0] rsp_demux_026_src0_data;                                                                                 // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                                                // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [59:0] rsp_demux_026_src0_channel;                                                                              // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                                        // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                                          // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_030_src0_valid;                                                                                // rsp_demux_030:src0_valid -> rsp_mux:sink30_valid
	wire  [127:0] rsp_demux_030_src0_data;                                                                                 // rsp_demux_030:src0_data -> rsp_mux:sink30_data
	wire          rsp_demux_030_src0_ready;                                                                                // rsp_mux:sink30_ready -> rsp_demux_030:src0_ready
	wire   [59:0] rsp_demux_030_src0_channel;                                                                              // rsp_demux_030:src0_channel -> rsp_mux:sink30_channel
	wire          rsp_demux_030_src0_startofpacket;                                                                        // rsp_demux_030:src0_startofpacket -> rsp_mux:sink30_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                                          // rsp_demux_030:src0_endofpacket -> rsp_mux:sink30_endofpacket
	wire          rsp_demux_031_src0_valid;                                                                                // rsp_demux_031:src0_valid -> rsp_mux:sink31_valid
	wire  [127:0] rsp_demux_031_src0_data;                                                                                 // rsp_demux_031:src0_data -> rsp_mux:sink31_data
	wire          rsp_demux_031_src0_ready;                                                                                // rsp_mux:sink31_ready -> rsp_demux_031:src0_ready
	wire   [59:0] rsp_demux_031_src0_channel;                                                                              // rsp_demux_031:src0_channel -> rsp_mux:sink31_channel
	wire          rsp_demux_031_src0_startofpacket;                                                                        // rsp_demux_031:src0_startofpacket -> rsp_mux:sink31_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                                          // rsp_demux_031:src0_endofpacket -> rsp_mux:sink31_endofpacket
	wire          rsp_demux_035_src0_valid;                                                                                // rsp_demux_035:src0_valid -> rsp_mux:sink35_valid
	wire  [127:0] rsp_demux_035_src0_data;                                                                                 // rsp_demux_035:src0_data -> rsp_mux:sink35_data
	wire          rsp_demux_035_src0_ready;                                                                                // rsp_mux:sink35_ready -> rsp_demux_035:src0_ready
	wire   [59:0] rsp_demux_035_src0_channel;                                                                              // rsp_demux_035:src0_channel -> rsp_mux:sink35_channel
	wire          rsp_demux_035_src0_startofpacket;                                                                        // rsp_demux_035:src0_startofpacket -> rsp_mux:sink35_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                                                          // rsp_demux_035:src0_endofpacket -> rsp_mux:sink35_endofpacket
	wire          rsp_demux_036_src0_valid;                                                                                // rsp_demux_036:src0_valid -> rsp_mux:sink36_valid
	wire  [127:0] rsp_demux_036_src0_data;                                                                                 // rsp_demux_036:src0_data -> rsp_mux:sink36_data
	wire          rsp_demux_036_src0_ready;                                                                                // rsp_mux:sink36_ready -> rsp_demux_036:src0_ready
	wire   [59:0] rsp_demux_036_src0_channel;                                                                              // rsp_demux_036:src0_channel -> rsp_mux:sink36_channel
	wire          rsp_demux_036_src0_startofpacket;                                                                        // rsp_demux_036:src0_startofpacket -> rsp_mux:sink36_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                                                          // rsp_demux_036:src0_endofpacket -> rsp_mux:sink36_endofpacket
	wire          rsp_demux_040_src0_valid;                                                                                // rsp_demux_040:src0_valid -> rsp_mux:sink40_valid
	wire  [127:0] rsp_demux_040_src0_data;                                                                                 // rsp_demux_040:src0_data -> rsp_mux:sink40_data
	wire          rsp_demux_040_src0_ready;                                                                                // rsp_mux:sink40_ready -> rsp_demux_040:src0_ready
	wire   [59:0] rsp_demux_040_src0_channel;                                                                              // rsp_demux_040:src0_channel -> rsp_mux:sink40_channel
	wire          rsp_demux_040_src0_startofpacket;                                                                        // rsp_demux_040:src0_startofpacket -> rsp_mux:sink40_startofpacket
	wire          rsp_demux_040_src0_endofpacket;                                                                          // rsp_demux_040:src0_endofpacket -> rsp_mux:sink40_endofpacket
	wire          rsp_demux_041_src0_valid;                                                                                // rsp_demux_041:src0_valid -> rsp_mux:sink41_valid
	wire  [127:0] rsp_demux_041_src0_data;                                                                                 // rsp_demux_041:src0_data -> rsp_mux:sink41_data
	wire          rsp_demux_041_src0_ready;                                                                                // rsp_mux:sink41_ready -> rsp_demux_041:src0_ready
	wire   [59:0] rsp_demux_041_src0_channel;                                                                              // rsp_demux_041:src0_channel -> rsp_mux:sink41_channel
	wire          rsp_demux_041_src0_startofpacket;                                                                        // rsp_demux_041:src0_startofpacket -> rsp_mux:sink41_startofpacket
	wire          rsp_demux_041_src0_endofpacket;                                                                          // rsp_demux_041:src0_endofpacket -> rsp_mux:sink41_endofpacket
	wire          rsp_demux_045_src0_valid;                                                                                // rsp_demux_045:src0_valid -> rsp_mux:sink45_valid
	wire  [127:0] rsp_demux_045_src0_data;                                                                                 // rsp_demux_045:src0_data -> rsp_mux:sink45_data
	wire          rsp_demux_045_src0_ready;                                                                                // rsp_mux:sink45_ready -> rsp_demux_045:src0_ready
	wire   [59:0] rsp_demux_045_src0_channel;                                                                              // rsp_demux_045:src0_channel -> rsp_mux:sink45_channel
	wire          rsp_demux_045_src0_startofpacket;                                                                        // rsp_demux_045:src0_startofpacket -> rsp_mux:sink45_startofpacket
	wire          rsp_demux_045_src0_endofpacket;                                                                          // rsp_demux_045:src0_endofpacket -> rsp_mux:sink45_endofpacket
	wire          rsp_demux_046_src0_valid;                                                                                // rsp_demux_046:src0_valid -> rsp_mux:sink46_valid
	wire  [127:0] rsp_demux_046_src0_data;                                                                                 // rsp_demux_046:src0_data -> rsp_mux:sink46_data
	wire          rsp_demux_046_src0_ready;                                                                                // rsp_mux:sink46_ready -> rsp_demux_046:src0_ready
	wire   [59:0] rsp_demux_046_src0_channel;                                                                              // rsp_demux_046:src0_channel -> rsp_mux:sink46_channel
	wire          rsp_demux_046_src0_startofpacket;                                                                        // rsp_demux_046:src0_startofpacket -> rsp_mux:sink46_startofpacket
	wire          rsp_demux_046_src0_endofpacket;                                                                          // rsp_demux_046:src0_endofpacket -> rsp_mux:sink46_endofpacket
	wire          rsp_demux_050_src0_valid;                                                                                // rsp_demux_050:src0_valid -> rsp_mux:sink50_valid
	wire  [127:0] rsp_demux_050_src0_data;                                                                                 // rsp_demux_050:src0_data -> rsp_mux:sink50_data
	wire          rsp_demux_050_src0_ready;                                                                                // rsp_mux:sink50_ready -> rsp_demux_050:src0_ready
	wire   [59:0] rsp_demux_050_src0_channel;                                                                              // rsp_demux_050:src0_channel -> rsp_mux:sink50_channel
	wire          rsp_demux_050_src0_startofpacket;                                                                        // rsp_demux_050:src0_startofpacket -> rsp_mux:sink50_startofpacket
	wire          rsp_demux_050_src0_endofpacket;                                                                          // rsp_demux_050:src0_endofpacket -> rsp_mux:sink50_endofpacket
	wire          rsp_demux_051_src0_valid;                                                                                // rsp_demux_051:src0_valid -> rsp_mux:sink51_valid
	wire  [127:0] rsp_demux_051_src0_data;                                                                                 // rsp_demux_051:src0_data -> rsp_mux:sink51_data
	wire          rsp_demux_051_src0_ready;                                                                                // rsp_mux:sink51_ready -> rsp_demux_051:src0_ready
	wire   [59:0] rsp_demux_051_src0_channel;                                                                              // rsp_demux_051:src0_channel -> rsp_mux:sink51_channel
	wire          rsp_demux_051_src0_startofpacket;                                                                        // rsp_demux_051:src0_startofpacket -> rsp_mux:sink51_startofpacket
	wire          rsp_demux_051_src0_endofpacket;                                                                          // rsp_demux_051:src0_endofpacket -> rsp_mux:sink51_endofpacket
	wire          rsp_demux_055_src0_valid;                                                                                // rsp_demux_055:src0_valid -> rsp_mux:sink55_valid
	wire  [127:0] rsp_demux_055_src0_data;                                                                                 // rsp_demux_055:src0_data -> rsp_mux:sink55_data
	wire          rsp_demux_055_src0_ready;                                                                                // rsp_mux:sink55_ready -> rsp_demux_055:src0_ready
	wire   [59:0] rsp_demux_055_src0_channel;                                                                              // rsp_demux_055:src0_channel -> rsp_mux:sink55_channel
	wire          rsp_demux_055_src0_startofpacket;                                                                        // rsp_demux_055:src0_startofpacket -> rsp_mux:sink55_startofpacket
	wire          rsp_demux_055_src0_endofpacket;                                                                          // rsp_demux_055:src0_endofpacket -> rsp_mux:sink55_endofpacket
	wire          rsp_demux_056_src0_valid;                                                                                // rsp_demux_056:src0_valid -> rsp_mux:sink56_valid
	wire  [127:0] rsp_demux_056_src0_data;                                                                                 // rsp_demux_056:src0_data -> rsp_mux:sink56_data
	wire          rsp_demux_056_src0_ready;                                                                                // rsp_mux:sink56_ready -> rsp_demux_056:src0_ready
	wire   [59:0] rsp_demux_056_src0_channel;                                                                              // rsp_demux_056:src0_channel -> rsp_mux:sink56_channel
	wire          rsp_demux_056_src0_startofpacket;                                                                        // rsp_demux_056:src0_startofpacket -> rsp_mux:sink56_startofpacket
	wire          rsp_demux_056_src0_endofpacket;                                                                          // rsp_demux_056:src0_endofpacket -> rsp_mux:sink56_endofpacket
	wire          cmd_demux_src2_valid;                                                                                    // cmd_demux:src2_valid -> crosser:in_valid
	wire  [127:0] cmd_demux_src2_data;                                                                                     // cmd_demux:src2_data -> crosser:in_data
	wire          cmd_demux_src2_ready;                                                                                    // crosser:in_ready -> cmd_demux:src2_ready
	wire   [59:0] cmd_demux_src2_channel;                                                                                  // cmd_demux:src2_channel -> crosser:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                            // cmd_demux:src2_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                              // cmd_demux:src2_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                                       // crosser:out_valid -> cmd_mux_002:sink0_valid
	wire  [127:0] crosser_out_data;                                                                                        // crosser:out_data -> cmd_mux_002:sink0_data
	wire          crosser_out_ready;                                                                                       // cmd_mux_002:sink0_ready -> crosser:out_ready
	wire   [59:0] crosser_out_channel;                                                                                     // crosser:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_out_startofpacket;                                                                               // crosser:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                                 // crosser:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                                    // cmd_demux:src3_valid -> crosser_001:in_valid
	wire  [127:0] cmd_demux_src3_data;                                                                                     // cmd_demux:src3_data -> crosser_001:in_data
	wire          cmd_demux_src3_ready;                                                                                    // crosser_001:in_ready -> cmd_demux:src3_ready
	wire   [59:0] cmd_demux_src3_channel;                                                                                  // cmd_demux:src3_channel -> crosser_001:in_channel
	wire          cmd_demux_src3_startofpacket;                                                                            // cmd_demux:src3_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                              // cmd_demux:src3_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                                   // crosser_001:out_valid -> cmd_mux_003:sink0_valid
	wire  [127:0] crosser_001_out_data;                                                                                    // crosser_001:out_data -> cmd_mux_003:sink0_data
	wire          crosser_001_out_ready;                                                                                   // cmd_mux_003:sink0_ready -> crosser_001:out_ready
	wire   [59:0] crosser_001_out_channel;                                                                                 // crosser_001:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                           // crosser_001:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                             // crosser_001:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                                    // cmd_demux:src4_valid -> crosser_002:in_valid
	wire  [127:0] cmd_demux_src4_data;                                                                                     // cmd_demux:src4_data -> crosser_002:in_data
	wire          cmd_demux_src4_ready;                                                                                    // crosser_002:in_ready -> cmd_demux:src4_ready
	wire   [59:0] cmd_demux_src4_channel;                                                                                  // cmd_demux:src4_channel -> crosser_002:in_channel
	wire          cmd_demux_src4_startofpacket;                                                                            // cmd_demux:src4_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                              // cmd_demux:src4_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                                   // crosser_002:out_valid -> cmd_mux_004:sink0_valid
	wire  [127:0] crosser_002_out_data;                                                                                    // crosser_002:out_data -> cmd_mux_004:sink0_data
	wire          crosser_002_out_ready;                                                                                   // cmd_mux_004:sink0_ready -> crosser_002:out_ready
	wire   [59:0] crosser_002_out_channel;                                                                                 // crosser_002:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_002_out_startofpacket;                                                                           // crosser_002:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                             // crosser_002:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                                    // cmd_demux:src7_valid -> crosser_003:in_valid
	wire  [127:0] cmd_demux_src7_data;                                                                                     // cmd_demux:src7_data -> crosser_003:in_data
	wire          cmd_demux_src7_ready;                                                                                    // crosser_003:in_ready -> cmd_demux:src7_ready
	wire   [59:0] cmd_demux_src7_channel;                                                                                  // cmd_demux:src7_channel -> crosser_003:in_channel
	wire          cmd_demux_src7_startofpacket;                                                                            // cmd_demux:src7_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                              // cmd_demux:src7_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                                   // crosser_003:out_valid -> cmd_mux_007:sink0_valid
	wire  [127:0] crosser_003_out_data;                                                                                    // crosser_003:out_data -> cmd_mux_007:sink0_data
	wire          crosser_003_out_ready;                                                                                   // cmd_mux_007:sink0_ready -> crosser_003:out_ready
	wire   [59:0] crosser_003_out_channel;                                                                                 // crosser_003:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_003_out_startofpacket;                                                                           // crosser_003:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                                             // crosser_003:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                                    // cmd_demux:src8_valid -> crosser_004:in_valid
	wire  [127:0] cmd_demux_src8_data;                                                                                     // cmd_demux:src8_data -> crosser_004:in_data
	wire          cmd_demux_src8_ready;                                                                                    // crosser_004:in_ready -> cmd_demux:src8_ready
	wire   [59:0] cmd_demux_src8_channel;                                                                                  // cmd_demux:src8_channel -> crosser_004:in_channel
	wire          cmd_demux_src8_startofpacket;                                                                            // cmd_demux:src8_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                              // cmd_demux:src8_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                                   // crosser_004:out_valid -> cmd_mux_008:sink0_valid
	wire  [127:0] crosser_004_out_data;                                                                                    // crosser_004:out_data -> cmd_mux_008:sink0_data
	wire          crosser_004_out_ready;                                                                                   // cmd_mux_008:sink0_ready -> crosser_004:out_ready
	wire   [59:0] crosser_004_out_channel;                                                                                 // crosser_004:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_004_out_startofpacket;                                                                           // crosser_004:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                                             // crosser_004:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                                    // cmd_demux:src9_valid -> crosser_005:in_valid
	wire  [127:0] cmd_demux_src9_data;                                                                                     // cmd_demux:src9_data -> crosser_005:in_data
	wire          cmd_demux_src9_ready;                                                                                    // crosser_005:in_ready -> cmd_demux:src9_ready
	wire   [59:0] cmd_demux_src9_channel;                                                                                  // cmd_demux:src9_channel -> crosser_005:in_channel
	wire          cmd_demux_src9_startofpacket;                                                                            // cmd_demux:src9_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                              // cmd_demux:src9_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                                   // crosser_005:out_valid -> cmd_mux_009:sink0_valid
	wire  [127:0] crosser_005_out_data;                                                                                    // crosser_005:out_data -> cmd_mux_009:sink0_data
	wire          crosser_005_out_ready;                                                                                   // cmd_mux_009:sink0_ready -> crosser_005:out_ready
	wire   [59:0] crosser_005_out_channel;                                                                                 // crosser_005:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_005_out_startofpacket;                                                                           // crosser_005:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                                             // crosser_005:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                                   // cmd_demux:src12_valid -> crosser_006:in_valid
	wire  [127:0] cmd_demux_src12_data;                                                                                    // cmd_demux:src12_data -> crosser_006:in_data
	wire          cmd_demux_src12_ready;                                                                                   // crosser_006:in_ready -> cmd_demux:src12_ready
	wire   [59:0] cmd_demux_src12_channel;                                                                                 // cmd_demux:src12_channel -> crosser_006:in_channel
	wire          cmd_demux_src12_startofpacket;                                                                           // cmd_demux:src12_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                                             // cmd_demux:src12_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                                   // crosser_006:out_valid -> cmd_mux_012:sink0_valid
	wire  [127:0] crosser_006_out_data;                                                                                    // crosser_006:out_data -> cmd_mux_012:sink0_data
	wire          crosser_006_out_ready;                                                                                   // cmd_mux_012:sink0_ready -> crosser_006:out_ready
	wire   [59:0] crosser_006_out_channel;                                                                                 // crosser_006:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_006_out_startofpacket;                                                                           // crosser_006:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                                             // crosser_006:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                                   // cmd_demux:src13_valid -> crosser_007:in_valid
	wire  [127:0] cmd_demux_src13_data;                                                                                    // cmd_demux:src13_data -> crosser_007:in_data
	wire          cmd_demux_src13_ready;                                                                                   // crosser_007:in_ready -> cmd_demux:src13_ready
	wire   [59:0] cmd_demux_src13_channel;                                                                                 // cmd_demux:src13_channel -> crosser_007:in_channel
	wire          cmd_demux_src13_startofpacket;                                                                           // cmd_demux:src13_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                                             // cmd_demux:src13_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                                   // crosser_007:out_valid -> cmd_mux_013:sink0_valid
	wire  [127:0] crosser_007_out_data;                                                                                    // crosser_007:out_data -> cmd_mux_013:sink0_data
	wire          crosser_007_out_ready;                                                                                   // cmd_mux_013:sink0_ready -> crosser_007:out_ready
	wire   [59:0] crosser_007_out_channel;                                                                                 // crosser_007:out_channel -> cmd_mux_013:sink0_channel
	wire          crosser_007_out_startofpacket;                                                                           // crosser_007:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                                             // crosser_007:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                                   // cmd_demux:src14_valid -> crosser_008:in_valid
	wire  [127:0] cmd_demux_src14_data;                                                                                    // cmd_demux:src14_data -> crosser_008:in_data
	wire          cmd_demux_src14_ready;                                                                                   // crosser_008:in_ready -> cmd_demux:src14_ready
	wire   [59:0] cmd_demux_src14_channel;                                                                                 // cmd_demux:src14_channel -> crosser_008:in_channel
	wire          cmd_demux_src14_startofpacket;                                                                           // cmd_demux:src14_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                                             // cmd_demux:src14_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                                   // crosser_008:out_valid -> cmd_mux_014:sink0_valid
	wire  [127:0] crosser_008_out_data;                                                                                    // crosser_008:out_data -> cmd_mux_014:sink0_data
	wire          crosser_008_out_ready;                                                                                   // cmd_mux_014:sink0_ready -> crosser_008:out_ready
	wire   [59:0] crosser_008_out_channel;                                                                                 // crosser_008:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_008_out_startofpacket;                                                                           // crosser_008:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                                                                             // crosser_008:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                                   // cmd_demux:src17_valid -> crosser_009:in_valid
	wire  [127:0] cmd_demux_src17_data;                                                                                    // cmd_demux:src17_data -> crosser_009:in_data
	wire          cmd_demux_src17_ready;                                                                                   // crosser_009:in_ready -> cmd_demux:src17_ready
	wire   [59:0] cmd_demux_src17_channel;                                                                                 // cmd_demux:src17_channel -> crosser_009:in_channel
	wire          cmd_demux_src17_startofpacket;                                                                           // cmd_demux:src17_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                                             // cmd_demux:src17_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                                   // crosser_009:out_valid -> cmd_mux_017:sink0_valid
	wire  [127:0] crosser_009_out_data;                                                                                    // crosser_009:out_data -> cmd_mux_017:sink0_data
	wire          crosser_009_out_ready;                                                                                   // cmd_mux_017:sink0_ready -> crosser_009:out_ready
	wire   [59:0] crosser_009_out_channel;                                                                                 // crosser_009:out_channel -> cmd_mux_017:sink0_channel
	wire          crosser_009_out_startofpacket;                                                                           // crosser_009:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                                                             // crosser_009:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                                   // cmd_demux:src18_valid -> crosser_010:in_valid
	wire  [127:0] cmd_demux_src18_data;                                                                                    // cmd_demux:src18_data -> crosser_010:in_data
	wire          cmd_demux_src18_ready;                                                                                   // crosser_010:in_ready -> cmd_demux:src18_ready
	wire   [59:0] cmd_demux_src18_channel;                                                                                 // cmd_demux:src18_channel -> crosser_010:in_channel
	wire          cmd_demux_src18_startofpacket;                                                                           // cmd_demux:src18_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                                             // cmd_demux:src18_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                                   // crosser_010:out_valid -> cmd_mux_018:sink0_valid
	wire  [127:0] crosser_010_out_data;                                                                                    // crosser_010:out_data -> cmd_mux_018:sink0_data
	wire          crosser_010_out_ready;                                                                                   // cmd_mux_018:sink0_ready -> crosser_010:out_ready
	wire   [59:0] crosser_010_out_channel;                                                                                 // crosser_010:out_channel -> cmd_mux_018:sink0_channel
	wire          crosser_010_out_startofpacket;                                                                           // crosser_010:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                                                             // crosser_010:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                                   // cmd_demux:src19_valid -> crosser_011:in_valid
	wire  [127:0] cmd_demux_src19_data;                                                                                    // cmd_demux:src19_data -> crosser_011:in_data
	wire          cmd_demux_src19_ready;                                                                                   // crosser_011:in_ready -> cmd_demux:src19_ready
	wire   [59:0] cmd_demux_src19_channel;                                                                                 // cmd_demux:src19_channel -> crosser_011:in_channel
	wire          cmd_demux_src19_startofpacket;                                                                           // cmd_demux:src19_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                                             // cmd_demux:src19_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                                   // crosser_011:out_valid -> cmd_mux_019:sink0_valid
	wire  [127:0] crosser_011_out_data;                                                                                    // crosser_011:out_data -> cmd_mux_019:sink0_data
	wire          crosser_011_out_ready;                                                                                   // cmd_mux_019:sink0_ready -> crosser_011:out_ready
	wire   [59:0] crosser_011_out_channel;                                                                                 // crosser_011:out_channel -> cmd_mux_019:sink0_channel
	wire          crosser_011_out_startofpacket;                                                                           // crosser_011:out_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                                                             // crosser_011:out_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                                                   // cmd_demux:src22_valid -> crosser_012:in_valid
	wire  [127:0] cmd_demux_src22_data;                                                                                    // cmd_demux:src22_data -> crosser_012:in_data
	wire          cmd_demux_src22_ready;                                                                                   // crosser_012:in_ready -> cmd_demux:src22_ready
	wire   [59:0] cmd_demux_src22_channel;                                                                                 // cmd_demux:src22_channel -> crosser_012:in_channel
	wire          cmd_demux_src22_startofpacket;                                                                           // cmd_demux:src22_startofpacket -> crosser_012:in_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                                             // cmd_demux:src22_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                                                   // crosser_012:out_valid -> cmd_mux_022:sink0_valid
	wire  [127:0] crosser_012_out_data;                                                                                    // crosser_012:out_data -> cmd_mux_022:sink0_data
	wire          crosser_012_out_ready;                                                                                   // cmd_mux_022:sink0_ready -> crosser_012:out_ready
	wire   [59:0] crosser_012_out_channel;                                                                                 // crosser_012:out_channel -> cmd_mux_022:sink0_channel
	wire          crosser_012_out_startofpacket;                                                                           // crosser_012:out_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                                                             // crosser_012:out_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                                                   // cmd_demux:src23_valid -> crosser_013:in_valid
	wire  [127:0] cmd_demux_src23_data;                                                                                    // cmd_demux:src23_data -> crosser_013:in_data
	wire          cmd_demux_src23_ready;                                                                                   // crosser_013:in_ready -> cmd_demux:src23_ready
	wire   [59:0] cmd_demux_src23_channel;                                                                                 // cmd_demux:src23_channel -> crosser_013:in_channel
	wire          cmd_demux_src23_startofpacket;                                                                           // cmd_demux:src23_startofpacket -> crosser_013:in_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                                             // cmd_demux:src23_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                                                   // crosser_013:out_valid -> cmd_mux_023:sink0_valid
	wire  [127:0] crosser_013_out_data;                                                                                    // crosser_013:out_data -> cmd_mux_023:sink0_data
	wire          crosser_013_out_ready;                                                                                   // cmd_mux_023:sink0_ready -> crosser_013:out_ready
	wire   [59:0] crosser_013_out_channel;                                                                                 // crosser_013:out_channel -> cmd_mux_023:sink0_channel
	wire          crosser_013_out_startofpacket;                                                                           // crosser_013:out_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                                                             // crosser_013:out_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                                                   // cmd_demux:src24_valid -> crosser_014:in_valid
	wire  [127:0] cmd_demux_src24_data;                                                                                    // cmd_demux:src24_data -> crosser_014:in_data
	wire          cmd_demux_src24_ready;                                                                                   // crosser_014:in_ready -> cmd_demux:src24_ready
	wire   [59:0] cmd_demux_src24_channel;                                                                                 // cmd_demux:src24_channel -> crosser_014:in_channel
	wire          cmd_demux_src24_startofpacket;                                                                           // cmd_demux:src24_startofpacket -> crosser_014:in_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                                             // cmd_demux:src24_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                                                   // crosser_014:out_valid -> cmd_mux_024:sink0_valid
	wire  [127:0] crosser_014_out_data;                                                                                    // crosser_014:out_data -> cmd_mux_024:sink0_data
	wire          crosser_014_out_ready;                                                                                   // cmd_mux_024:sink0_ready -> crosser_014:out_ready
	wire   [59:0] crosser_014_out_channel;                                                                                 // crosser_014:out_channel -> cmd_mux_024:sink0_channel
	wire          crosser_014_out_startofpacket;                                                                           // crosser_014:out_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          crosser_014_out_endofpacket;                                                                             // crosser_014:out_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                                                   // cmd_demux:src27_valid -> crosser_015:in_valid
	wire  [127:0] cmd_demux_src27_data;                                                                                    // cmd_demux:src27_data -> crosser_015:in_data
	wire          cmd_demux_src27_ready;                                                                                   // crosser_015:in_ready -> cmd_demux:src27_ready
	wire   [59:0] cmd_demux_src27_channel;                                                                                 // cmd_demux:src27_channel -> crosser_015:in_channel
	wire          cmd_demux_src27_startofpacket;                                                                           // cmd_demux:src27_startofpacket -> crosser_015:in_startofpacket
	wire          cmd_demux_src27_endofpacket;                                                                             // cmd_demux:src27_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                                                   // crosser_015:out_valid -> cmd_mux_027:sink0_valid
	wire  [127:0] crosser_015_out_data;                                                                                    // crosser_015:out_data -> cmd_mux_027:sink0_data
	wire          crosser_015_out_ready;                                                                                   // cmd_mux_027:sink0_ready -> crosser_015:out_ready
	wire   [59:0] crosser_015_out_channel;                                                                                 // crosser_015:out_channel -> cmd_mux_027:sink0_channel
	wire          crosser_015_out_startofpacket;                                                                           // crosser_015:out_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          crosser_015_out_endofpacket;                                                                             // crosser_015:out_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_src28_valid;                                                                                   // cmd_demux:src28_valid -> crosser_016:in_valid
	wire  [127:0] cmd_demux_src28_data;                                                                                    // cmd_demux:src28_data -> crosser_016:in_data
	wire          cmd_demux_src28_ready;                                                                                   // crosser_016:in_ready -> cmd_demux:src28_ready
	wire   [59:0] cmd_demux_src28_channel;                                                                                 // cmd_demux:src28_channel -> crosser_016:in_channel
	wire          cmd_demux_src28_startofpacket;                                                                           // cmd_demux:src28_startofpacket -> crosser_016:in_startofpacket
	wire          cmd_demux_src28_endofpacket;                                                                             // cmd_demux:src28_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                                                   // crosser_016:out_valid -> cmd_mux_028:sink0_valid
	wire  [127:0] crosser_016_out_data;                                                                                    // crosser_016:out_data -> cmd_mux_028:sink0_data
	wire          crosser_016_out_ready;                                                                                   // cmd_mux_028:sink0_ready -> crosser_016:out_ready
	wire   [59:0] crosser_016_out_channel;                                                                                 // crosser_016:out_channel -> cmd_mux_028:sink0_channel
	wire          crosser_016_out_startofpacket;                                                                           // crosser_016:out_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          crosser_016_out_endofpacket;                                                                             // crosser_016:out_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_src29_valid;                                                                                   // cmd_demux:src29_valid -> crosser_017:in_valid
	wire  [127:0] cmd_demux_src29_data;                                                                                    // cmd_demux:src29_data -> crosser_017:in_data
	wire          cmd_demux_src29_ready;                                                                                   // crosser_017:in_ready -> cmd_demux:src29_ready
	wire   [59:0] cmd_demux_src29_channel;                                                                                 // cmd_demux:src29_channel -> crosser_017:in_channel
	wire          cmd_demux_src29_startofpacket;                                                                           // cmd_demux:src29_startofpacket -> crosser_017:in_startofpacket
	wire          cmd_demux_src29_endofpacket;                                                                             // cmd_demux:src29_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                                                   // crosser_017:out_valid -> cmd_mux_029:sink0_valid
	wire  [127:0] crosser_017_out_data;                                                                                    // crosser_017:out_data -> cmd_mux_029:sink0_data
	wire          crosser_017_out_ready;                                                                                   // cmd_mux_029:sink0_ready -> crosser_017:out_ready
	wire   [59:0] crosser_017_out_channel;                                                                                 // crosser_017:out_channel -> cmd_mux_029:sink0_channel
	wire          crosser_017_out_startofpacket;                                                                           // crosser_017:out_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          crosser_017_out_endofpacket;                                                                             // crosser_017:out_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_src32_valid;                                                                                   // cmd_demux:src32_valid -> crosser_018:in_valid
	wire  [127:0] cmd_demux_src32_data;                                                                                    // cmd_demux:src32_data -> crosser_018:in_data
	wire          cmd_demux_src32_ready;                                                                                   // crosser_018:in_ready -> cmd_demux:src32_ready
	wire   [59:0] cmd_demux_src32_channel;                                                                                 // cmd_demux:src32_channel -> crosser_018:in_channel
	wire          cmd_demux_src32_startofpacket;                                                                           // cmd_demux:src32_startofpacket -> crosser_018:in_startofpacket
	wire          cmd_demux_src32_endofpacket;                                                                             // cmd_demux:src32_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                                                   // crosser_018:out_valid -> cmd_mux_032:sink0_valid
	wire  [127:0] crosser_018_out_data;                                                                                    // crosser_018:out_data -> cmd_mux_032:sink0_data
	wire          crosser_018_out_ready;                                                                                   // cmd_mux_032:sink0_ready -> crosser_018:out_ready
	wire   [59:0] crosser_018_out_channel;                                                                                 // crosser_018:out_channel -> cmd_mux_032:sink0_channel
	wire          crosser_018_out_startofpacket;                                                                           // crosser_018:out_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          crosser_018_out_endofpacket;                                                                             // crosser_018:out_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_src33_valid;                                                                                   // cmd_demux:src33_valid -> crosser_019:in_valid
	wire  [127:0] cmd_demux_src33_data;                                                                                    // cmd_demux:src33_data -> crosser_019:in_data
	wire          cmd_demux_src33_ready;                                                                                   // crosser_019:in_ready -> cmd_demux:src33_ready
	wire   [59:0] cmd_demux_src33_channel;                                                                                 // cmd_demux:src33_channel -> crosser_019:in_channel
	wire          cmd_demux_src33_startofpacket;                                                                           // cmd_demux:src33_startofpacket -> crosser_019:in_startofpacket
	wire          cmd_demux_src33_endofpacket;                                                                             // cmd_demux:src33_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                                                   // crosser_019:out_valid -> cmd_mux_033:sink0_valid
	wire  [127:0] crosser_019_out_data;                                                                                    // crosser_019:out_data -> cmd_mux_033:sink0_data
	wire          crosser_019_out_ready;                                                                                   // cmd_mux_033:sink0_ready -> crosser_019:out_ready
	wire   [59:0] crosser_019_out_channel;                                                                                 // crosser_019:out_channel -> cmd_mux_033:sink0_channel
	wire          crosser_019_out_startofpacket;                                                                           // crosser_019:out_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          crosser_019_out_endofpacket;                                                                             // crosser_019:out_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_src34_valid;                                                                                   // cmd_demux:src34_valid -> crosser_020:in_valid
	wire  [127:0] cmd_demux_src34_data;                                                                                    // cmd_demux:src34_data -> crosser_020:in_data
	wire          cmd_demux_src34_ready;                                                                                   // crosser_020:in_ready -> cmd_demux:src34_ready
	wire   [59:0] cmd_demux_src34_channel;                                                                                 // cmd_demux:src34_channel -> crosser_020:in_channel
	wire          cmd_demux_src34_startofpacket;                                                                           // cmd_demux:src34_startofpacket -> crosser_020:in_startofpacket
	wire          cmd_demux_src34_endofpacket;                                                                             // cmd_demux:src34_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                                                   // crosser_020:out_valid -> cmd_mux_034:sink0_valid
	wire  [127:0] crosser_020_out_data;                                                                                    // crosser_020:out_data -> cmd_mux_034:sink0_data
	wire          crosser_020_out_ready;                                                                                   // cmd_mux_034:sink0_ready -> crosser_020:out_ready
	wire   [59:0] crosser_020_out_channel;                                                                                 // crosser_020:out_channel -> cmd_mux_034:sink0_channel
	wire          crosser_020_out_startofpacket;                                                                           // crosser_020:out_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          crosser_020_out_endofpacket;                                                                             // crosser_020:out_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_src37_valid;                                                                                   // cmd_demux:src37_valid -> crosser_021:in_valid
	wire  [127:0] cmd_demux_src37_data;                                                                                    // cmd_demux:src37_data -> crosser_021:in_data
	wire          cmd_demux_src37_ready;                                                                                   // crosser_021:in_ready -> cmd_demux:src37_ready
	wire   [59:0] cmd_demux_src37_channel;                                                                                 // cmd_demux:src37_channel -> crosser_021:in_channel
	wire          cmd_demux_src37_startofpacket;                                                                           // cmd_demux:src37_startofpacket -> crosser_021:in_startofpacket
	wire          cmd_demux_src37_endofpacket;                                                                             // cmd_demux:src37_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                                                   // crosser_021:out_valid -> cmd_mux_037:sink0_valid
	wire  [127:0] crosser_021_out_data;                                                                                    // crosser_021:out_data -> cmd_mux_037:sink0_data
	wire          crosser_021_out_ready;                                                                                   // cmd_mux_037:sink0_ready -> crosser_021:out_ready
	wire   [59:0] crosser_021_out_channel;                                                                                 // crosser_021:out_channel -> cmd_mux_037:sink0_channel
	wire          crosser_021_out_startofpacket;                                                                           // crosser_021:out_startofpacket -> cmd_mux_037:sink0_startofpacket
	wire          crosser_021_out_endofpacket;                                                                             // crosser_021:out_endofpacket -> cmd_mux_037:sink0_endofpacket
	wire          cmd_demux_src38_valid;                                                                                   // cmd_demux:src38_valid -> crosser_022:in_valid
	wire  [127:0] cmd_demux_src38_data;                                                                                    // cmd_demux:src38_data -> crosser_022:in_data
	wire          cmd_demux_src38_ready;                                                                                   // crosser_022:in_ready -> cmd_demux:src38_ready
	wire   [59:0] cmd_demux_src38_channel;                                                                                 // cmd_demux:src38_channel -> crosser_022:in_channel
	wire          cmd_demux_src38_startofpacket;                                                                           // cmd_demux:src38_startofpacket -> crosser_022:in_startofpacket
	wire          cmd_demux_src38_endofpacket;                                                                             // cmd_demux:src38_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                                                   // crosser_022:out_valid -> cmd_mux_038:sink0_valid
	wire  [127:0] crosser_022_out_data;                                                                                    // crosser_022:out_data -> cmd_mux_038:sink0_data
	wire          crosser_022_out_ready;                                                                                   // cmd_mux_038:sink0_ready -> crosser_022:out_ready
	wire   [59:0] crosser_022_out_channel;                                                                                 // crosser_022:out_channel -> cmd_mux_038:sink0_channel
	wire          crosser_022_out_startofpacket;                                                                           // crosser_022:out_startofpacket -> cmd_mux_038:sink0_startofpacket
	wire          crosser_022_out_endofpacket;                                                                             // crosser_022:out_endofpacket -> cmd_mux_038:sink0_endofpacket
	wire          cmd_demux_src39_valid;                                                                                   // cmd_demux:src39_valid -> crosser_023:in_valid
	wire  [127:0] cmd_demux_src39_data;                                                                                    // cmd_demux:src39_data -> crosser_023:in_data
	wire          cmd_demux_src39_ready;                                                                                   // crosser_023:in_ready -> cmd_demux:src39_ready
	wire   [59:0] cmd_demux_src39_channel;                                                                                 // cmd_demux:src39_channel -> crosser_023:in_channel
	wire          cmd_demux_src39_startofpacket;                                                                           // cmd_demux:src39_startofpacket -> crosser_023:in_startofpacket
	wire          cmd_demux_src39_endofpacket;                                                                             // cmd_demux:src39_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                                                   // crosser_023:out_valid -> cmd_mux_039:sink0_valid
	wire  [127:0] crosser_023_out_data;                                                                                    // crosser_023:out_data -> cmd_mux_039:sink0_data
	wire          crosser_023_out_ready;                                                                                   // cmd_mux_039:sink0_ready -> crosser_023:out_ready
	wire   [59:0] crosser_023_out_channel;                                                                                 // crosser_023:out_channel -> cmd_mux_039:sink0_channel
	wire          crosser_023_out_startofpacket;                                                                           // crosser_023:out_startofpacket -> cmd_mux_039:sink0_startofpacket
	wire          crosser_023_out_endofpacket;                                                                             // crosser_023:out_endofpacket -> cmd_mux_039:sink0_endofpacket
	wire          cmd_demux_src42_valid;                                                                                   // cmd_demux:src42_valid -> crosser_024:in_valid
	wire  [127:0] cmd_demux_src42_data;                                                                                    // cmd_demux:src42_data -> crosser_024:in_data
	wire          cmd_demux_src42_ready;                                                                                   // crosser_024:in_ready -> cmd_demux:src42_ready
	wire   [59:0] cmd_demux_src42_channel;                                                                                 // cmd_demux:src42_channel -> crosser_024:in_channel
	wire          cmd_demux_src42_startofpacket;                                                                           // cmd_demux:src42_startofpacket -> crosser_024:in_startofpacket
	wire          cmd_demux_src42_endofpacket;                                                                             // cmd_demux:src42_endofpacket -> crosser_024:in_endofpacket
	wire          crosser_024_out_valid;                                                                                   // crosser_024:out_valid -> cmd_mux_042:sink0_valid
	wire  [127:0] crosser_024_out_data;                                                                                    // crosser_024:out_data -> cmd_mux_042:sink0_data
	wire          crosser_024_out_ready;                                                                                   // cmd_mux_042:sink0_ready -> crosser_024:out_ready
	wire   [59:0] crosser_024_out_channel;                                                                                 // crosser_024:out_channel -> cmd_mux_042:sink0_channel
	wire          crosser_024_out_startofpacket;                                                                           // crosser_024:out_startofpacket -> cmd_mux_042:sink0_startofpacket
	wire          crosser_024_out_endofpacket;                                                                             // crosser_024:out_endofpacket -> cmd_mux_042:sink0_endofpacket
	wire          cmd_demux_src43_valid;                                                                                   // cmd_demux:src43_valid -> crosser_025:in_valid
	wire  [127:0] cmd_demux_src43_data;                                                                                    // cmd_demux:src43_data -> crosser_025:in_data
	wire          cmd_demux_src43_ready;                                                                                   // crosser_025:in_ready -> cmd_demux:src43_ready
	wire   [59:0] cmd_demux_src43_channel;                                                                                 // cmd_demux:src43_channel -> crosser_025:in_channel
	wire          cmd_demux_src43_startofpacket;                                                                           // cmd_demux:src43_startofpacket -> crosser_025:in_startofpacket
	wire          cmd_demux_src43_endofpacket;                                                                             // cmd_demux:src43_endofpacket -> crosser_025:in_endofpacket
	wire          crosser_025_out_valid;                                                                                   // crosser_025:out_valid -> cmd_mux_043:sink0_valid
	wire  [127:0] crosser_025_out_data;                                                                                    // crosser_025:out_data -> cmd_mux_043:sink0_data
	wire          crosser_025_out_ready;                                                                                   // cmd_mux_043:sink0_ready -> crosser_025:out_ready
	wire   [59:0] crosser_025_out_channel;                                                                                 // crosser_025:out_channel -> cmd_mux_043:sink0_channel
	wire          crosser_025_out_startofpacket;                                                                           // crosser_025:out_startofpacket -> cmd_mux_043:sink0_startofpacket
	wire          crosser_025_out_endofpacket;                                                                             // crosser_025:out_endofpacket -> cmd_mux_043:sink0_endofpacket
	wire          cmd_demux_src44_valid;                                                                                   // cmd_demux:src44_valid -> crosser_026:in_valid
	wire  [127:0] cmd_demux_src44_data;                                                                                    // cmd_demux:src44_data -> crosser_026:in_data
	wire          cmd_demux_src44_ready;                                                                                   // crosser_026:in_ready -> cmd_demux:src44_ready
	wire   [59:0] cmd_demux_src44_channel;                                                                                 // cmd_demux:src44_channel -> crosser_026:in_channel
	wire          cmd_demux_src44_startofpacket;                                                                           // cmd_demux:src44_startofpacket -> crosser_026:in_startofpacket
	wire          cmd_demux_src44_endofpacket;                                                                             // cmd_demux:src44_endofpacket -> crosser_026:in_endofpacket
	wire          crosser_026_out_valid;                                                                                   // crosser_026:out_valid -> cmd_mux_044:sink0_valid
	wire  [127:0] crosser_026_out_data;                                                                                    // crosser_026:out_data -> cmd_mux_044:sink0_data
	wire          crosser_026_out_ready;                                                                                   // cmd_mux_044:sink0_ready -> crosser_026:out_ready
	wire   [59:0] crosser_026_out_channel;                                                                                 // crosser_026:out_channel -> cmd_mux_044:sink0_channel
	wire          crosser_026_out_startofpacket;                                                                           // crosser_026:out_startofpacket -> cmd_mux_044:sink0_startofpacket
	wire          crosser_026_out_endofpacket;                                                                             // crosser_026:out_endofpacket -> cmd_mux_044:sink0_endofpacket
	wire          cmd_demux_src47_valid;                                                                                   // cmd_demux:src47_valid -> crosser_027:in_valid
	wire  [127:0] cmd_demux_src47_data;                                                                                    // cmd_demux:src47_data -> crosser_027:in_data
	wire          cmd_demux_src47_ready;                                                                                   // crosser_027:in_ready -> cmd_demux:src47_ready
	wire   [59:0] cmd_demux_src47_channel;                                                                                 // cmd_demux:src47_channel -> crosser_027:in_channel
	wire          cmd_demux_src47_startofpacket;                                                                           // cmd_demux:src47_startofpacket -> crosser_027:in_startofpacket
	wire          cmd_demux_src47_endofpacket;                                                                             // cmd_demux:src47_endofpacket -> crosser_027:in_endofpacket
	wire          crosser_027_out_valid;                                                                                   // crosser_027:out_valid -> cmd_mux_047:sink0_valid
	wire  [127:0] crosser_027_out_data;                                                                                    // crosser_027:out_data -> cmd_mux_047:sink0_data
	wire          crosser_027_out_ready;                                                                                   // cmd_mux_047:sink0_ready -> crosser_027:out_ready
	wire   [59:0] crosser_027_out_channel;                                                                                 // crosser_027:out_channel -> cmd_mux_047:sink0_channel
	wire          crosser_027_out_startofpacket;                                                                           // crosser_027:out_startofpacket -> cmd_mux_047:sink0_startofpacket
	wire          crosser_027_out_endofpacket;                                                                             // crosser_027:out_endofpacket -> cmd_mux_047:sink0_endofpacket
	wire          cmd_demux_src48_valid;                                                                                   // cmd_demux:src48_valid -> crosser_028:in_valid
	wire  [127:0] cmd_demux_src48_data;                                                                                    // cmd_demux:src48_data -> crosser_028:in_data
	wire          cmd_demux_src48_ready;                                                                                   // crosser_028:in_ready -> cmd_demux:src48_ready
	wire   [59:0] cmd_demux_src48_channel;                                                                                 // cmd_demux:src48_channel -> crosser_028:in_channel
	wire          cmd_demux_src48_startofpacket;                                                                           // cmd_demux:src48_startofpacket -> crosser_028:in_startofpacket
	wire          cmd_demux_src48_endofpacket;                                                                             // cmd_demux:src48_endofpacket -> crosser_028:in_endofpacket
	wire          crosser_028_out_valid;                                                                                   // crosser_028:out_valid -> cmd_mux_048:sink0_valid
	wire  [127:0] crosser_028_out_data;                                                                                    // crosser_028:out_data -> cmd_mux_048:sink0_data
	wire          crosser_028_out_ready;                                                                                   // cmd_mux_048:sink0_ready -> crosser_028:out_ready
	wire   [59:0] crosser_028_out_channel;                                                                                 // crosser_028:out_channel -> cmd_mux_048:sink0_channel
	wire          crosser_028_out_startofpacket;                                                                           // crosser_028:out_startofpacket -> cmd_mux_048:sink0_startofpacket
	wire          crosser_028_out_endofpacket;                                                                             // crosser_028:out_endofpacket -> cmd_mux_048:sink0_endofpacket
	wire          cmd_demux_src49_valid;                                                                                   // cmd_demux:src49_valid -> crosser_029:in_valid
	wire  [127:0] cmd_demux_src49_data;                                                                                    // cmd_demux:src49_data -> crosser_029:in_data
	wire          cmd_demux_src49_ready;                                                                                   // crosser_029:in_ready -> cmd_demux:src49_ready
	wire   [59:0] cmd_demux_src49_channel;                                                                                 // cmd_demux:src49_channel -> crosser_029:in_channel
	wire          cmd_demux_src49_startofpacket;                                                                           // cmd_demux:src49_startofpacket -> crosser_029:in_startofpacket
	wire          cmd_demux_src49_endofpacket;                                                                             // cmd_demux:src49_endofpacket -> crosser_029:in_endofpacket
	wire          crosser_029_out_valid;                                                                                   // crosser_029:out_valid -> cmd_mux_049:sink0_valid
	wire  [127:0] crosser_029_out_data;                                                                                    // crosser_029:out_data -> cmd_mux_049:sink0_data
	wire          crosser_029_out_ready;                                                                                   // cmd_mux_049:sink0_ready -> crosser_029:out_ready
	wire   [59:0] crosser_029_out_channel;                                                                                 // crosser_029:out_channel -> cmd_mux_049:sink0_channel
	wire          crosser_029_out_startofpacket;                                                                           // crosser_029:out_startofpacket -> cmd_mux_049:sink0_startofpacket
	wire          crosser_029_out_endofpacket;                                                                             // crosser_029:out_endofpacket -> cmd_mux_049:sink0_endofpacket
	wire          cmd_demux_src52_valid;                                                                                   // cmd_demux:src52_valid -> crosser_030:in_valid
	wire  [127:0] cmd_demux_src52_data;                                                                                    // cmd_demux:src52_data -> crosser_030:in_data
	wire          cmd_demux_src52_ready;                                                                                   // crosser_030:in_ready -> cmd_demux:src52_ready
	wire   [59:0] cmd_demux_src52_channel;                                                                                 // cmd_demux:src52_channel -> crosser_030:in_channel
	wire          cmd_demux_src52_startofpacket;                                                                           // cmd_demux:src52_startofpacket -> crosser_030:in_startofpacket
	wire          cmd_demux_src52_endofpacket;                                                                             // cmd_demux:src52_endofpacket -> crosser_030:in_endofpacket
	wire          crosser_030_out_valid;                                                                                   // crosser_030:out_valid -> cmd_mux_052:sink0_valid
	wire  [127:0] crosser_030_out_data;                                                                                    // crosser_030:out_data -> cmd_mux_052:sink0_data
	wire          crosser_030_out_ready;                                                                                   // cmd_mux_052:sink0_ready -> crosser_030:out_ready
	wire   [59:0] crosser_030_out_channel;                                                                                 // crosser_030:out_channel -> cmd_mux_052:sink0_channel
	wire          crosser_030_out_startofpacket;                                                                           // crosser_030:out_startofpacket -> cmd_mux_052:sink0_startofpacket
	wire          crosser_030_out_endofpacket;                                                                             // crosser_030:out_endofpacket -> cmd_mux_052:sink0_endofpacket
	wire          cmd_demux_src53_valid;                                                                                   // cmd_demux:src53_valid -> crosser_031:in_valid
	wire  [127:0] cmd_demux_src53_data;                                                                                    // cmd_demux:src53_data -> crosser_031:in_data
	wire          cmd_demux_src53_ready;                                                                                   // crosser_031:in_ready -> cmd_demux:src53_ready
	wire   [59:0] cmd_demux_src53_channel;                                                                                 // cmd_demux:src53_channel -> crosser_031:in_channel
	wire          cmd_demux_src53_startofpacket;                                                                           // cmd_demux:src53_startofpacket -> crosser_031:in_startofpacket
	wire          cmd_demux_src53_endofpacket;                                                                             // cmd_demux:src53_endofpacket -> crosser_031:in_endofpacket
	wire          crosser_031_out_valid;                                                                                   // crosser_031:out_valid -> cmd_mux_053:sink0_valid
	wire  [127:0] crosser_031_out_data;                                                                                    // crosser_031:out_data -> cmd_mux_053:sink0_data
	wire          crosser_031_out_ready;                                                                                   // cmd_mux_053:sink0_ready -> crosser_031:out_ready
	wire   [59:0] crosser_031_out_channel;                                                                                 // crosser_031:out_channel -> cmd_mux_053:sink0_channel
	wire          crosser_031_out_startofpacket;                                                                           // crosser_031:out_startofpacket -> cmd_mux_053:sink0_startofpacket
	wire          crosser_031_out_endofpacket;                                                                             // crosser_031:out_endofpacket -> cmd_mux_053:sink0_endofpacket
	wire          cmd_demux_src54_valid;                                                                                   // cmd_demux:src54_valid -> crosser_032:in_valid
	wire  [127:0] cmd_demux_src54_data;                                                                                    // cmd_demux:src54_data -> crosser_032:in_data
	wire          cmd_demux_src54_ready;                                                                                   // crosser_032:in_ready -> cmd_demux:src54_ready
	wire   [59:0] cmd_demux_src54_channel;                                                                                 // cmd_demux:src54_channel -> crosser_032:in_channel
	wire          cmd_demux_src54_startofpacket;                                                                           // cmd_demux:src54_startofpacket -> crosser_032:in_startofpacket
	wire          cmd_demux_src54_endofpacket;                                                                             // cmd_demux:src54_endofpacket -> crosser_032:in_endofpacket
	wire          crosser_032_out_valid;                                                                                   // crosser_032:out_valid -> cmd_mux_054:sink0_valid
	wire  [127:0] crosser_032_out_data;                                                                                    // crosser_032:out_data -> cmd_mux_054:sink0_data
	wire          crosser_032_out_ready;                                                                                   // cmd_mux_054:sink0_ready -> crosser_032:out_ready
	wire   [59:0] crosser_032_out_channel;                                                                                 // crosser_032:out_channel -> cmd_mux_054:sink0_channel
	wire          crosser_032_out_startofpacket;                                                                           // crosser_032:out_startofpacket -> cmd_mux_054:sink0_startofpacket
	wire          crosser_032_out_endofpacket;                                                                             // crosser_032:out_endofpacket -> cmd_mux_054:sink0_endofpacket
	wire          cmd_demux_src57_valid;                                                                                   // cmd_demux:src57_valid -> crosser_033:in_valid
	wire  [127:0] cmd_demux_src57_data;                                                                                    // cmd_demux:src57_data -> crosser_033:in_data
	wire          cmd_demux_src57_ready;                                                                                   // crosser_033:in_ready -> cmd_demux:src57_ready
	wire   [59:0] cmd_demux_src57_channel;                                                                                 // cmd_demux:src57_channel -> crosser_033:in_channel
	wire          cmd_demux_src57_startofpacket;                                                                           // cmd_demux:src57_startofpacket -> crosser_033:in_startofpacket
	wire          cmd_demux_src57_endofpacket;                                                                             // cmd_demux:src57_endofpacket -> crosser_033:in_endofpacket
	wire          crosser_033_out_valid;                                                                                   // crosser_033:out_valid -> cmd_mux_057:sink0_valid
	wire  [127:0] crosser_033_out_data;                                                                                    // crosser_033:out_data -> cmd_mux_057:sink0_data
	wire          crosser_033_out_ready;                                                                                   // cmd_mux_057:sink0_ready -> crosser_033:out_ready
	wire   [59:0] crosser_033_out_channel;                                                                                 // crosser_033:out_channel -> cmd_mux_057:sink0_channel
	wire          crosser_033_out_startofpacket;                                                                           // crosser_033:out_startofpacket -> cmd_mux_057:sink0_startofpacket
	wire          crosser_033_out_endofpacket;                                                                             // crosser_033:out_endofpacket -> cmd_mux_057:sink0_endofpacket
	wire          cmd_demux_src58_valid;                                                                                   // cmd_demux:src58_valid -> crosser_034:in_valid
	wire  [127:0] cmd_demux_src58_data;                                                                                    // cmd_demux:src58_data -> crosser_034:in_data
	wire          cmd_demux_src58_ready;                                                                                   // crosser_034:in_ready -> cmd_demux:src58_ready
	wire   [59:0] cmd_demux_src58_channel;                                                                                 // cmd_demux:src58_channel -> crosser_034:in_channel
	wire          cmd_demux_src58_startofpacket;                                                                           // cmd_demux:src58_startofpacket -> crosser_034:in_startofpacket
	wire          cmd_demux_src58_endofpacket;                                                                             // cmd_demux:src58_endofpacket -> crosser_034:in_endofpacket
	wire          crosser_034_out_valid;                                                                                   // crosser_034:out_valid -> cmd_mux_058:sink0_valid
	wire  [127:0] crosser_034_out_data;                                                                                    // crosser_034:out_data -> cmd_mux_058:sink0_data
	wire          crosser_034_out_ready;                                                                                   // cmd_mux_058:sink0_ready -> crosser_034:out_ready
	wire   [59:0] crosser_034_out_channel;                                                                                 // crosser_034:out_channel -> cmd_mux_058:sink0_channel
	wire          crosser_034_out_startofpacket;                                                                           // crosser_034:out_startofpacket -> cmd_mux_058:sink0_startofpacket
	wire          crosser_034_out_endofpacket;                                                                             // crosser_034:out_endofpacket -> cmd_mux_058:sink0_endofpacket
	wire          cmd_demux_src59_valid;                                                                                   // cmd_demux:src59_valid -> crosser_035:in_valid
	wire  [127:0] cmd_demux_src59_data;                                                                                    // cmd_demux:src59_data -> crosser_035:in_data
	wire          cmd_demux_src59_ready;                                                                                   // crosser_035:in_ready -> cmd_demux:src59_ready
	wire   [59:0] cmd_demux_src59_channel;                                                                                 // cmd_demux:src59_channel -> crosser_035:in_channel
	wire          cmd_demux_src59_startofpacket;                                                                           // cmd_demux:src59_startofpacket -> crosser_035:in_startofpacket
	wire          cmd_demux_src59_endofpacket;                                                                             // cmd_demux:src59_endofpacket -> crosser_035:in_endofpacket
	wire          crosser_035_out_valid;                                                                                   // crosser_035:out_valid -> cmd_mux_059:sink0_valid
	wire  [127:0] crosser_035_out_data;                                                                                    // crosser_035:out_data -> cmd_mux_059:sink0_data
	wire          crosser_035_out_ready;                                                                                   // cmd_mux_059:sink0_ready -> crosser_035:out_ready
	wire   [59:0] crosser_035_out_channel;                                                                                 // crosser_035:out_channel -> cmd_mux_059:sink0_channel
	wire          crosser_035_out_startofpacket;                                                                           // crosser_035:out_startofpacket -> cmd_mux_059:sink0_startofpacket
	wire          crosser_035_out_endofpacket;                                                                             // crosser_035:out_endofpacket -> cmd_mux_059:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                // rsp_demux_002:src0_valid -> crosser_036:in_valid
	wire  [127:0] rsp_demux_002_src0_data;                                                                                 // rsp_demux_002:src0_data -> crosser_036:in_data
	wire          rsp_demux_002_src0_ready;                                                                                // crosser_036:in_ready -> rsp_demux_002:src0_ready
	wire   [59:0] rsp_demux_002_src0_channel;                                                                              // rsp_demux_002:src0_channel -> crosser_036:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                        // rsp_demux_002:src0_startofpacket -> crosser_036:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                          // rsp_demux_002:src0_endofpacket -> crosser_036:in_endofpacket
	wire          crosser_036_out_valid;                                                                                   // crosser_036:out_valid -> rsp_mux:sink2_valid
	wire  [127:0] crosser_036_out_data;                                                                                    // crosser_036:out_data -> rsp_mux:sink2_data
	wire          crosser_036_out_ready;                                                                                   // rsp_mux:sink2_ready -> crosser_036:out_ready
	wire   [59:0] crosser_036_out_channel;                                                                                 // crosser_036:out_channel -> rsp_mux:sink2_channel
	wire          crosser_036_out_startofpacket;                                                                           // crosser_036:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_036_out_endofpacket;                                                                             // crosser_036:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                // rsp_demux_003:src0_valid -> crosser_037:in_valid
	wire  [127:0] rsp_demux_003_src0_data;                                                                                 // rsp_demux_003:src0_data -> crosser_037:in_data
	wire          rsp_demux_003_src0_ready;                                                                                // crosser_037:in_ready -> rsp_demux_003:src0_ready
	wire   [59:0] rsp_demux_003_src0_channel;                                                                              // rsp_demux_003:src0_channel -> crosser_037:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                        // rsp_demux_003:src0_startofpacket -> crosser_037:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                          // rsp_demux_003:src0_endofpacket -> crosser_037:in_endofpacket
	wire          crosser_037_out_valid;                                                                                   // crosser_037:out_valid -> rsp_mux:sink3_valid
	wire  [127:0] crosser_037_out_data;                                                                                    // crosser_037:out_data -> rsp_mux:sink3_data
	wire          crosser_037_out_ready;                                                                                   // rsp_mux:sink3_ready -> crosser_037:out_ready
	wire   [59:0] crosser_037_out_channel;                                                                                 // crosser_037:out_channel -> rsp_mux:sink3_channel
	wire          crosser_037_out_startofpacket;                                                                           // crosser_037:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_037_out_endofpacket;                                                                             // crosser_037:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                // rsp_demux_004:src0_valid -> crosser_038:in_valid
	wire  [127:0] rsp_demux_004_src0_data;                                                                                 // rsp_demux_004:src0_data -> crosser_038:in_data
	wire          rsp_demux_004_src0_ready;                                                                                // crosser_038:in_ready -> rsp_demux_004:src0_ready
	wire   [59:0] rsp_demux_004_src0_channel;                                                                              // rsp_demux_004:src0_channel -> crosser_038:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                        // rsp_demux_004:src0_startofpacket -> crosser_038:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                          // rsp_demux_004:src0_endofpacket -> crosser_038:in_endofpacket
	wire          crosser_038_out_valid;                                                                                   // crosser_038:out_valid -> rsp_mux:sink4_valid
	wire  [127:0] crosser_038_out_data;                                                                                    // crosser_038:out_data -> rsp_mux:sink4_data
	wire          crosser_038_out_ready;                                                                                   // rsp_mux:sink4_ready -> crosser_038:out_ready
	wire   [59:0] crosser_038_out_channel;                                                                                 // crosser_038:out_channel -> rsp_mux:sink4_channel
	wire          crosser_038_out_startofpacket;                                                                           // crosser_038:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_038_out_endofpacket;                                                                             // crosser_038:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                                // rsp_demux_007:src0_valid -> crosser_039:in_valid
	wire  [127:0] rsp_demux_007_src0_data;                                                                                 // rsp_demux_007:src0_data -> crosser_039:in_data
	wire          rsp_demux_007_src0_ready;                                                                                // crosser_039:in_ready -> rsp_demux_007:src0_ready
	wire   [59:0] rsp_demux_007_src0_channel;                                                                              // rsp_demux_007:src0_channel -> crosser_039:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                        // rsp_demux_007:src0_startofpacket -> crosser_039:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                          // rsp_demux_007:src0_endofpacket -> crosser_039:in_endofpacket
	wire          crosser_039_out_valid;                                                                                   // crosser_039:out_valid -> rsp_mux:sink7_valid
	wire  [127:0] crosser_039_out_data;                                                                                    // crosser_039:out_data -> rsp_mux:sink7_data
	wire          crosser_039_out_ready;                                                                                   // rsp_mux:sink7_ready -> crosser_039:out_ready
	wire   [59:0] crosser_039_out_channel;                                                                                 // crosser_039:out_channel -> rsp_mux:sink7_channel
	wire          crosser_039_out_startofpacket;                                                                           // crosser_039:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_039_out_endofpacket;                                                                             // crosser_039:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                                // rsp_demux_008:src0_valid -> crosser_040:in_valid
	wire  [127:0] rsp_demux_008_src0_data;                                                                                 // rsp_demux_008:src0_data -> crosser_040:in_data
	wire          rsp_demux_008_src0_ready;                                                                                // crosser_040:in_ready -> rsp_demux_008:src0_ready
	wire   [59:0] rsp_demux_008_src0_channel;                                                                              // rsp_demux_008:src0_channel -> crosser_040:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                        // rsp_demux_008:src0_startofpacket -> crosser_040:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                          // rsp_demux_008:src0_endofpacket -> crosser_040:in_endofpacket
	wire          crosser_040_out_valid;                                                                                   // crosser_040:out_valid -> rsp_mux:sink8_valid
	wire  [127:0] crosser_040_out_data;                                                                                    // crosser_040:out_data -> rsp_mux:sink8_data
	wire          crosser_040_out_ready;                                                                                   // rsp_mux:sink8_ready -> crosser_040:out_ready
	wire   [59:0] crosser_040_out_channel;                                                                                 // crosser_040:out_channel -> rsp_mux:sink8_channel
	wire          crosser_040_out_startofpacket;                                                                           // crosser_040:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_040_out_endofpacket;                                                                             // crosser_040:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                                // rsp_demux_009:src0_valid -> crosser_041:in_valid
	wire  [127:0] rsp_demux_009_src0_data;                                                                                 // rsp_demux_009:src0_data -> crosser_041:in_data
	wire          rsp_demux_009_src0_ready;                                                                                // crosser_041:in_ready -> rsp_demux_009:src0_ready
	wire   [59:0] rsp_demux_009_src0_channel;                                                                              // rsp_demux_009:src0_channel -> crosser_041:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                        // rsp_demux_009:src0_startofpacket -> crosser_041:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                          // rsp_demux_009:src0_endofpacket -> crosser_041:in_endofpacket
	wire          crosser_041_out_valid;                                                                                   // crosser_041:out_valid -> rsp_mux:sink9_valid
	wire  [127:0] crosser_041_out_data;                                                                                    // crosser_041:out_data -> rsp_mux:sink9_data
	wire          crosser_041_out_ready;                                                                                   // rsp_mux:sink9_ready -> crosser_041:out_ready
	wire   [59:0] crosser_041_out_channel;                                                                                 // crosser_041:out_channel -> rsp_mux:sink9_channel
	wire          crosser_041_out_startofpacket;                                                                           // crosser_041:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_041_out_endofpacket;                                                                             // crosser_041:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                                // rsp_demux_012:src0_valid -> crosser_042:in_valid
	wire  [127:0] rsp_demux_012_src0_data;                                                                                 // rsp_demux_012:src0_data -> crosser_042:in_data
	wire          rsp_demux_012_src0_ready;                                                                                // crosser_042:in_ready -> rsp_demux_012:src0_ready
	wire   [59:0] rsp_demux_012_src0_channel;                                                                              // rsp_demux_012:src0_channel -> crosser_042:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                                        // rsp_demux_012:src0_startofpacket -> crosser_042:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                          // rsp_demux_012:src0_endofpacket -> crosser_042:in_endofpacket
	wire          crosser_042_out_valid;                                                                                   // crosser_042:out_valid -> rsp_mux:sink12_valid
	wire  [127:0] crosser_042_out_data;                                                                                    // crosser_042:out_data -> rsp_mux:sink12_data
	wire          crosser_042_out_ready;                                                                                   // rsp_mux:sink12_ready -> crosser_042:out_ready
	wire   [59:0] crosser_042_out_channel;                                                                                 // crosser_042:out_channel -> rsp_mux:sink12_channel
	wire          crosser_042_out_startofpacket;                                                                           // crosser_042:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          crosser_042_out_endofpacket;                                                                             // crosser_042:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                                // rsp_demux_013:src0_valid -> crosser_043:in_valid
	wire  [127:0] rsp_demux_013_src0_data;                                                                                 // rsp_demux_013:src0_data -> crosser_043:in_data
	wire          rsp_demux_013_src0_ready;                                                                                // crosser_043:in_ready -> rsp_demux_013:src0_ready
	wire   [59:0] rsp_demux_013_src0_channel;                                                                              // rsp_demux_013:src0_channel -> crosser_043:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                                                        // rsp_demux_013:src0_startofpacket -> crosser_043:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                          // rsp_demux_013:src0_endofpacket -> crosser_043:in_endofpacket
	wire          crosser_043_out_valid;                                                                                   // crosser_043:out_valid -> rsp_mux:sink13_valid
	wire  [127:0] crosser_043_out_data;                                                                                    // crosser_043:out_data -> rsp_mux:sink13_data
	wire          crosser_043_out_ready;                                                                                   // rsp_mux:sink13_ready -> crosser_043:out_ready
	wire   [59:0] crosser_043_out_channel;                                                                                 // crosser_043:out_channel -> rsp_mux:sink13_channel
	wire          crosser_043_out_startofpacket;                                                                           // crosser_043:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          crosser_043_out_endofpacket;                                                                             // crosser_043:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                                // rsp_demux_014:src0_valid -> crosser_044:in_valid
	wire  [127:0] rsp_demux_014_src0_data;                                                                                 // rsp_demux_014:src0_data -> crosser_044:in_data
	wire          rsp_demux_014_src0_ready;                                                                                // crosser_044:in_ready -> rsp_demux_014:src0_ready
	wire   [59:0] rsp_demux_014_src0_channel;                                                                              // rsp_demux_014:src0_channel -> crosser_044:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                                        // rsp_demux_014:src0_startofpacket -> crosser_044:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                          // rsp_demux_014:src0_endofpacket -> crosser_044:in_endofpacket
	wire          crosser_044_out_valid;                                                                                   // crosser_044:out_valid -> rsp_mux:sink14_valid
	wire  [127:0] crosser_044_out_data;                                                                                    // crosser_044:out_data -> rsp_mux:sink14_data
	wire          crosser_044_out_ready;                                                                                   // rsp_mux:sink14_ready -> crosser_044:out_ready
	wire   [59:0] crosser_044_out_channel;                                                                                 // crosser_044:out_channel -> rsp_mux:sink14_channel
	wire          crosser_044_out_startofpacket;                                                                           // crosser_044:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire          crosser_044_out_endofpacket;                                                                             // crosser_044:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                                // rsp_demux_017:src0_valid -> crosser_045:in_valid
	wire  [127:0] rsp_demux_017_src0_data;                                                                                 // rsp_demux_017:src0_data -> crosser_045:in_data
	wire          rsp_demux_017_src0_ready;                                                                                // crosser_045:in_ready -> rsp_demux_017:src0_ready
	wire   [59:0] rsp_demux_017_src0_channel;                                                                              // rsp_demux_017:src0_channel -> crosser_045:in_channel
	wire          rsp_demux_017_src0_startofpacket;                                                                        // rsp_demux_017:src0_startofpacket -> crosser_045:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                                          // rsp_demux_017:src0_endofpacket -> crosser_045:in_endofpacket
	wire          crosser_045_out_valid;                                                                                   // crosser_045:out_valid -> rsp_mux:sink17_valid
	wire  [127:0] crosser_045_out_data;                                                                                    // crosser_045:out_data -> rsp_mux:sink17_data
	wire          crosser_045_out_ready;                                                                                   // rsp_mux:sink17_ready -> crosser_045:out_ready
	wire   [59:0] crosser_045_out_channel;                                                                                 // crosser_045:out_channel -> rsp_mux:sink17_channel
	wire          crosser_045_out_startofpacket;                                                                           // crosser_045:out_startofpacket -> rsp_mux:sink17_startofpacket
	wire          crosser_045_out_endofpacket;                                                                             // crosser_045:out_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                                // rsp_demux_018:src0_valid -> crosser_046:in_valid
	wire  [127:0] rsp_demux_018_src0_data;                                                                                 // rsp_demux_018:src0_data -> crosser_046:in_data
	wire          rsp_demux_018_src0_ready;                                                                                // crosser_046:in_ready -> rsp_demux_018:src0_ready
	wire   [59:0] rsp_demux_018_src0_channel;                                                                              // rsp_demux_018:src0_channel -> crosser_046:in_channel
	wire          rsp_demux_018_src0_startofpacket;                                                                        // rsp_demux_018:src0_startofpacket -> crosser_046:in_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                                          // rsp_demux_018:src0_endofpacket -> crosser_046:in_endofpacket
	wire          crosser_046_out_valid;                                                                                   // crosser_046:out_valid -> rsp_mux:sink18_valid
	wire  [127:0] crosser_046_out_data;                                                                                    // crosser_046:out_data -> rsp_mux:sink18_data
	wire          crosser_046_out_ready;                                                                                   // rsp_mux:sink18_ready -> crosser_046:out_ready
	wire   [59:0] crosser_046_out_channel;                                                                                 // crosser_046:out_channel -> rsp_mux:sink18_channel
	wire          crosser_046_out_startofpacket;                                                                           // crosser_046:out_startofpacket -> rsp_mux:sink18_startofpacket
	wire          crosser_046_out_endofpacket;                                                                             // crosser_046:out_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                                // rsp_demux_019:src0_valid -> crosser_047:in_valid
	wire  [127:0] rsp_demux_019_src0_data;                                                                                 // rsp_demux_019:src0_data -> crosser_047:in_data
	wire          rsp_demux_019_src0_ready;                                                                                // crosser_047:in_ready -> rsp_demux_019:src0_ready
	wire   [59:0] rsp_demux_019_src0_channel;                                                                              // rsp_demux_019:src0_channel -> crosser_047:in_channel
	wire          rsp_demux_019_src0_startofpacket;                                                                        // rsp_demux_019:src0_startofpacket -> crosser_047:in_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                                          // rsp_demux_019:src0_endofpacket -> crosser_047:in_endofpacket
	wire          crosser_047_out_valid;                                                                                   // crosser_047:out_valid -> rsp_mux:sink19_valid
	wire  [127:0] crosser_047_out_data;                                                                                    // crosser_047:out_data -> rsp_mux:sink19_data
	wire          crosser_047_out_ready;                                                                                   // rsp_mux:sink19_ready -> crosser_047:out_ready
	wire   [59:0] crosser_047_out_channel;                                                                                 // crosser_047:out_channel -> rsp_mux:sink19_channel
	wire          crosser_047_out_startofpacket;                                                                           // crosser_047:out_startofpacket -> rsp_mux:sink19_startofpacket
	wire          crosser_047_out_endofpacket;                                                                             // crosser_047:out_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                                // rsp_demux_022:src0_valid -> crosser_048:in_valid
	wire  [127:0] rsp_demux_022_src0_data;                                                                                 // rsp_demux_022:src0_data -> crosser_048:in_data
	wire          rsp_demux_022_src0_ready;                                                                                // crosser_048:in_ready -> rsp_demux_022:src0_ready
	wire   [59:0] rsp_demux_022_src0_channel;                                                                              // rsp_demux_022:src0_channel -> crosser_048:in_channel
	wire          rsp_demux_022_src0_startofpacket;                                                                        // rsp_demux_022:src0_startofpacket -> crosser_048:in_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                                          // rsp_demux_022:src0_endofpacket -> crosser_048:in_endofpacket
	wire          crosser_048_out_valid;                                                                                   // crosser_048:out_valid -> rsp_mux:sink22_valid
	wire  [127:0] crosser_048_out_data;                                                                                    // crosser_048:out_data -> rsp_mux:sink22_data
	wire          crosser_048_out_ready;                                                                                   // rsp_mux:sink22_ready -> crosser_048:out_ready
	wire   [59:0] crosser_048_out_channel;                                                                                 // crosser_048:out_channel -> rsp_mux:sink22_channel
	wire          crosser_048_out_startofpacket;                                                                           // crosser_048:out_startofpacket -> rsp_mux:sink22_startofpacket
	wire          crosser_048_out_endofpacket;                                                                             // crosser_048:out_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                                // rsp_demux_023:src0_valid -> crosser_049:in_valid
	wire  [127:0] rsp_demux_023_src0_data;                                                                                 // rsp_demux_023:src0_data -> crosser_049:in_data
	wire          rsp_demux_023_src0_ready;                                                                                // crosser_049:in_ready -> rsp_demux_023:src0_ready
	wire   [59:0] rsp_demux_023_src0_channel;                                                                              // rsp_demux_023:src0_channel -> crosser_049:in_channel
	wire          rsp_demux_023_src0_startofpacket;                                                                        // rsp_demux_023:src0_startofpacket -> crosser_049:in_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                                          // rsp_demux_023:src0_endofpacket -> crosser_049:in_endofpacket
	wire          crosser_049_out_valid;                                                                                   // crosser_049:out_valid -> rsp_mux:sink23_valid
	wire  [127:0] crosser_049_out_data;                                                                                    // crosser_049:out_data -> rsp_mux:sink23_data
	wire          crosser_049_out_ready;                                                                                   // rsp_mux:sink23_ready -> crosser_049:out_ready
	wire   [59:0] crosser_049_out_channel;                                                                                 // crosser_049:out_channel -> rsp_mux:sink23_channel
	wire          crosser_049_out_startofpacket;                                                                           // crosser_049:out_startofpacket -> rsp_mux:sink23_startofpacket
	wire          crosser_049_out_endofpacket;                                                                             // crosser_049:out_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                                // rsp_demux_024:src0_valid -> crosser_050:in_valid
	wire  [127:0] rsp_demux_024_src0_data;                                                                                 // rsp_demux_024:src0_data -> crosser_050:in_data
	wire          rsp_demux_024_src0_ready;                                                                                // crosser_050:in_ready -> rsp_demux_024:src0_ready
	wire   [59:0] rsp_demux_024_src0_channel;                                                                              // rsp_demux_024:src0_channel -> crosser_050:in_channel
	wire          rsp_demux_024_src0_startofpacket;                                                                        // rsp_demux_024:src0_startofpacket -> crosser_050:in_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                                          // rsp_demux_024:src0_endofpacket -> crosser_050:in_endofpacket
	wire          crosser_050_out_valid;                                                                                   // crosser_050:out_valid -> rsp_mux:sink24_valid
	wire  [127:0] crosser_050_out_data;                                                                                    // crosser_050:out_data -> rsp_mux:sink24_data
	wire          crosser_050_out_ready;                                                                                   // rsp_mux:sink24_ready -> crosser_050:out_ready
	wire   [59:0] crosser_050_out_channel;                                                                                 // crosser_050:out_channel -> rsp_mux:sink24_channel
	wire          crosser_050_out_startofpacket;                                                                           // crosser_050:out_startofpacket -> rsp_mux:sink24_startofpacket
	wire          crosser_050_out_endofpacket;                                                                             // crosser_050:out_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_027_src0_valid;                                                                                // rsp_demux_027:src0_valid -> crosser_051:in_valid
	wire  [127:0] rsp_demux_027_src0_data;                                                                                 // rsp_demux_027:src0_data -> crosser_051:in_data
	wire          rsp_demux_027_src0_ready;                                                                                // crosser_051:in_ready -> rsp_demux_027:src0_ready
	wire   [59:0] rsp_demux_027_src0_channel;                                                                              // rsp_demux_027:src0_channel -> crosser_051:in_channel
	wire          rsp_demux_027_src0_startofpacket;                                                                        // rsp_demux_027:src0_startofpacket -> crosser_051:in_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                                          // rsp_demux_027:src0_endofpacket -> crosser_051:in_endofpacket
	wire          crosser_051_out_valid;                                                                                   // crosser_051:out_valid -> rsp_mux:sink27_valid
	wire  [127:0] crosser_051_out_data;                                                                                    // crosser_051:out_data -> rsp_mux:sink27_data
	wire          crosser_051_out_ready;                                                                                   // rsp_mux:sink27_ready -> crosser_051:out_ready
	wire   [59:0] crosser_051_out_channel;                                                                                 // crosser_051:out_channel -> rsp_mux:sink27_channel
	wire          crosser_051_out_startofpacket;                                                                           // crosser_051:out_startofpacket -> rsp_mux:sink27_startofpacket
	wire          crosser_051_out_endofpacket;                                                                             // crosser_051:out_endofpacket -> rsp_mux:sink27_endofpacket
	wire          rsp_demux_028_src0_valid;                                                                                // rsp_demux_028:src0_valid -> crosser_052:in_valid
	wire  [127:0] rsp_demux_028_src0_data;                                                                                 // rsp_demux_028:src0_data -> crosser_052:in_data
	wire          rsp_demux_028_src0_ready;                                                                                // crosser_052:in_ready -> rsp_demux_028:src0_ready
	wire   [59:0] rsp_demux_028_src0_channel;                                                                              // rsp_demux_028:src0_channel -> crosser_052:in_channel
	wire          rsp_demux_028_src0_startofpacket;                                                                        // rsp_demux_028:src0_startofpacket -> crosser_052:in_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                                          // rsp_demux_028:src0_endofpacket -> crosser_052:in_endofpacket
	wire          crosser_052_out_valid;                                                                                   // crosser_052:out_valid -> rsp_mux:sink28_valid
	wire  [127:0] crosser_052_out_data;                                                                                    // crosser_052:out_data -> rsp_mux:sink28_data
	wire          crosser_052_out_ready;                                                                                   // rsp_mux:sink28_ready -> crosser_052:out_ready
	wire   [59:0] crosser_052_out_channel;                                                                                 // crosser_052:out_channel -> rsp_mux:sink28_channel
	wire          crosser_052_out_startofpacket;                                                                           // crosser_052:out_startofpacket -> rsp_mux:sink28_startofpacket
	wire          crosser_052_out_endofpacket;                                                                             // crosser_052:out_endofpacket -> rsp_mux:sink28_endofpacket
	wire          rsp_demux_029_src0_valid;                                                                                // rsp_demux_029:src0_valid -> crosser_053:in_valid
	wire  [127:0] rsp_demux_029_src0_data;                                                                                 // rsp_demux_029:src0_data -> crosser_053:in_data
	wire          rsp_demux_029_src0_ready;                                                                                // crosser_053:in_ready -> rsp_demux_029:src0_ready
	wire   [59:0] rsp_demux_029_src0_channel;                                                                              // rsp_demux_029:src0_channel -> crosser_053:in_channel
	wire          rsp_demux_029_src0_startofpacket;                                                                        // rsp_demux_029:src0_startofpacket -> crosser_053:in_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                                          // rsp_demux_029:src0_endofpacket -> crosser_053:in_endofpacket
	wire          crosser_053_out_valid;                                                                                   // crosser_053:out_valid -> rsp_mux:sink29_valid
	wire  [127:0] crosser_053_out_data;                                                                                    // crosser_053:out_data -> rsp_mux:sink29_data
	wire          crosser_053_out_ready;                                                                                   // rsp_mux:sink29_ready -> crosser_053:out_ready
	wire   [59:0] crosser_053_out_channel;                                                                                 // crosser_053:out_channel -> rsp_mux:sink29_channel
	wire          crosser_053_out_startofpacket;                                                                           // crosser_053:out_startofpacket -> rsp_mux:sink29_startofpacket
	wire          crosser_053_out_endofpacket;                                                                             // crosser_053:out_endofpacket -> rsp_mux:sink29_endofpacket
	wire          rsp_demux_032_src0_valid;                                                                                // rsp_demux_032:src0_valid -> crosser_054:in_valid
	wire  [127:0] rsp_demux_032_src0_data;                                                                                 // rsp_demux_032:src0_data -> crosser_054:in_data
	wire          rsp_demux_032_src0_ready;                                                                                // crosser_054:in_ready -> rsp_demux_032:src0_ready
	wire   [59:0] rsp_demux_032_src0_channel;                                                                              // rsp_demux_032:src0_channel -> crosser_054:in_channel
	wire          rsp_demux_032_src0_startofpacket;                                                                        // rsp_demux_032:src0_startofpacket -> crosser_054:in_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                                                          // rsp_demux_032:src0_endofpacket -> crosser_054:in_endofpacket
	wire          crosser_054_out_valid;                                                                                   // crosser_054:out_valid -> rsp_mux:sink32_valid
	wire  [127:0] crosser_054_out_data;                                                                                    // crosser_054:out_data -> rsp_mux:sink32_data
	wire          crosser_054_out_ready;                                                                                   // rsp_mux:sink32_ready -> crosser_054:out_ready
	wire   [59:0] crosser_054_out_channel;                                                                                 // crosser_054:out_channel -> rsp_mux:sink32_channel
	wire          crosser_054_out_startofpacket;                                                                           // crosser_054:out_startofpacket -> rsp_mux:sink32_startofpacket
	wire          crosser_054_out_endofpacket;                                                                             // crosser_054:out_endofpacket -> rsp_mux:sink32_endofpacket
	wire          rsp_demux_033_src0_valid;                                                                                // rsp_demux_033:src0_valid -> crosser_055:in_valid
	wire  [127:0] rsp_demux_033_src0_data;                                                                                 // rsp_demux_033:src0_data -> crosser_055:in_data
	wire          rsp_demux_033_src0_ready;                                                                                // crosser_055:in_ready -> rsp_demux_033:src0_ready
	wire   [59:0] rsp_demux_033_src0_channel;                                                                              // rsp_demux_033:src0_channel -> crosser_055:in_channel
	wire          rsp_demux_033_src0_startofpacket;                                                                        // rsp_demux_033:src0_startofpacket -> crosser_055:in_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                                                          // rsp_demux_033:src0_endofpacket -> crosser_055:in_endofpacket
	wire          crosser_055_out_valid;                                                                                   // crosser_055:out_valid -> rsp_mux:sink33_valid
	wire  [127:0] crosser_055_out_data;                                                                                    // crosser_055:out_data -> rsp_mux:sink33_data
	wire          crosser_055_out_ready;                                                                                   // rsp_mux:sink33_ready -> crosser_055:out_ready
	wire   [59:0] crosser_055_out_channel;                                                                                 // crosser_055:out_channel -> rsp_mux:sink33_channel
	wire          crosser_055_out_startofpacket;                                                                           // crosser_055:out_startofpacket -> rsp_mux:sink33_startofpacket
	wire          crosser_055_out_endofpacket;                                                                             // crosser_055:out_endofpacket -> rsp_mux:sink33_endofpacket
	wire          rsp_demux_034_src0_valid;                                                                                // rsp_demux_034:src0_valid -> crosser_056:in_valid
	wire  [127:0] rsp_demux_034_src0_data;                                                                                 // rsp_demux_034:src0_data -> crosser_056:in_data
	wire          rsp_demux_034_src0_ready;                                                                                // crosser_056:in_ready -> rsp_demux_034:src0_ready
	wire   [59:0] rsp_demux_034_src0_channel;                                                                              // rsp_demux_034:src0_channel -> crosser_056:in_channel
	wire          rsp_demux_034_src0_startofpacket;                                                                        // rsp_demux_034:src0_startofpacket -> crosser_056:in_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                                                          // rsp_demux_034:src0_endofpacket -> crosser_056:in_endofpacket
	wire          crosser_056_out_valid;                                                                                   // crosser_056:out_valid -> rsp_mux:sink34_valid
	wire  [127:0] crosser_056_out_data;                                                                                    // crosser_056:out_data -> rsp_mux:sink34_data
	wire          crosser_056_out_ready;                                                                                   // rsp_mux:sink34_ready -> crosser_056:out_ready
	wire   [59:0] crosser_056_out_channel;                                                                                 // crosser_056:out_channel -> rsp_mux:sink34_channel
	wire          crosser_056_out_startofpacket;                                                                           // crosser_056:out_startofpacket -> rsp_mux:sink34_startofpacket
	wire          crosser_056_out_endofpacket;                                                                             // crosser_056:out_endofpacket -> rsp_mux:sink34_endofpacket
	wire          rsp_demux_037_src0_valid;                                                                                // rsp_demux_037:src0_valid -> crosser_057:in_valid
	wire  [127:0] rsp_demux_037_src0_data;                                                                                 // rsp_demux_037:src0_data -> crosser_057:in_data
	wire          rsp_demux_037_src0_ready;                                                                                // crosser_057:in_ready -> rsp_demux_037:src0_ready
	wire   [59:0] rsp_demux_037_src0_channel;                                                                              // rsp_demux_037:src0_channel -> crosser_057:in_channel
	wire          rsp_demux_037_src0_startofpacket;                                                                        // rsp_demux_037:src0_startofpacket -> crosser_057:in_startofpacket
	wire          rsp_demux_037_src0_endofpacket;                                                                          // rsp_demux_037:src0_endofpacket -> crosser_057:in_endofpacket
	wire          crosser_057_out_valid;                                                                                   // crosser_057:out_valid -> rsp_mux:sink37_valid
	wire  [127:0] crosser_057_out_data;                                                                                    // crosser_057:out_data -> rsp_mux:sink37_data
	wire          crosser_057_out_ready;                                                                                   // rsp_mux:sink37_ready -> crosser_057:out_ready
	wire   [59:0] crosser_057_out_channel;                                                                                 // crosser_057:out_channel -> rsp_mux:sink37_channel
	wire          crosser_057_out_startofpacket;                                                                           // crosser_057:out_startofpacket -> rsp_mux:sink37_startofpacket
	wire          crosser_057_out_endofpacket;                                                                             // crosser_057:out_endofpacket -> rsp_mux:sink37_endofpacket
	wire          rsp_demux_038_src0_valid;                                                                                // rsp_demux_038:src0_valid -> crosser_058:in_valid
	wire  [127:0] rsp_demux_038_src0_data;                                                                                 // rsp_demux_038:src0_data -> crosser_058:in_data
	wire          rsp_demux_038_src0_ready;                                                                                // crosser_058:in_ready -> rsp_demux_038:src0_ready
	wire   [59:0] rsp_demux_038_src0_channel;                                                                              // rsp_demux_038:src0_channel -> crosser_058:in_channel
	wire          rsp_demux_038_src0_startofpacket;                                                                        // rsp_demux_038:src0_startofpacket -> crosser_058:in_startofpacket
	wire          rsp_demux_038_src0_endofpacket;                                                                          // rsp_demux_038:src0_endofpacket -> crosser_058:in_endofpacket
	wire          crosser_058_out_valid;                                                                                   // crosser_058:out_valid -> rsp_mux:sink38_valid
	wire  [127:0] crosser_058_out_data;                                                                                    // crosser_058:out_data -> rsp_mux:sink38_data
	wire          crosser_058_out_ready;                                                                                   // rsp_mux:sink38_ready -> crosser_058:out_ready
	wire   [59:0] crosser_058_out_channel;                                                                                 // crosser_058:out_channel -> rsp_mux:sink38_channel
	wire          crosser_058_out_startofpacket;                                                                           // crosser_058:out_startofpacket -> rsp_mux:sink38_startofpacket
	wire          crosser_058_out_endofpacket;                                                                             // crosser_058:out_endofpacket -> rsp_mux:sink38_endofpacket
	wire          rsp_demux_039_src0_valid;                                                                                // rsp_demux_039:src0_valid -> crosser_059:in_valid
	wire  [127:0] rsp_demux_039_src0_data;                                                                                 // rsp_demux_039:src0_data -> crosser_059:in_data
	wire          rsp_demux_039_src0_ready;                                                                                // crosser_059:in_ready -> rsp_demux_039:src0_ready
	wire   [59:0] rsp_demux_039_src0_channel;                                                                              // rsp_demux_039:src0_channel -> crosser_059:in_channel
	wire          rsp_demux_039_src0_startofpacket;                                                                        // rsp_demux_039:src0_startofpacket -> crosser_059:in_startofpacket
	wire          rsp_demux_039_src0_endofpacket;                                                                          // rsp_demux_039:src0_endofpacket -> crosser_059:in_endofpacket
	wire          crosser_059_out_valid;                                                                                   // crosser_059:out_valid -> rsp_mux:sink39_valid
	wire  [127:0] crosser_059_out_data;                                                                                    // crosser_059:out_data -> rsp_mux:sink39_data
	wire          crosser_059_out_ready;                                                                                   // rsp_mux:sink39_ready -> crosser_059:out_ready
	wire   [59:0] crosser_059_out_channel;                                                                                 // crosser_059:out_channel -> rsp_mux:sink39_channel
	wire          crosser_059_out_startofpacket;                                                                           // crosser_059:out_startofpacket -> rsp_mux:sink39_startofpacket
	wire          crosser_059_out_endofpacket;                                                                             // crosser_059:out_endofpacket -> rsp_mux:sink39_endofpacket
	wire          rsp_demux_042_src0_valid;                                                                                // rsp_demux_042:src0_valid -> crosser_060:in_valid
	wire  [127:0] rsp_demux_042_src0_data;                                                                                 // rsp_demux_042:src0_data -> crosser_060:in_data
	wire          rsp_demux_042_src0_ready;                                                                                // crosser_060:in_ready -> rsp_demux_042:src0_ready
	wire   [59:0] rsp_demux_042_src0_channel;                                                                              // rsp_demux_042:src0_channel -> crosser_060:in_channel
	wire          rsp_demux_042_src0_startofpacket;                                                                        // rsp_demux_042:src0_startofpacket -> crosser_060:in_startofpacket
	wire          rsp_demux_042_src0_endofpacket;                                                                          // rsp_demux_042:src0_endofpacket -> crosser_060:in_endofpacket
	wire          crosser_060_out_valid;                                                                                   // crosser_060:out_valid -> rsp_mux:sink42_valid
	wire  [127:0] crosser_060_out_data;                                                                                    // crosser_060:out_data -> rsp_mux:sink42_data
	wire          crosser_060_out_ready;                                                                                   // rsp_mux:sink42_ready -> crosser_060:out_ready
	wire   [59:0] crosser_060_out_channel;                                                                                 // crosser_060:out_channel -> rsp_mux:sink42_channel
	wire          crosser_060_out_startofpacket;                                                                           // crosser_060:out_startofpacket -> rsp_mux:sink42_startofpacket
	wire          crosser_060_out_endofpacket;                                                                             // crosser_060:out_endofpacket -> rsp_mux:sink42_endofpacket
	wire          rsp_demux_043_src0_valid;                                                                                // rsp_demux_043:src0_valid -> crosser_061:in_valid
	wire  [127:0] rsp_demux_043_src0_data;                                                                                 // rsp_demux_043:src0_data -> crosser_061:in_data
	wire          rsp_demux_043_src0_ready;                                                                                // crosser_061:in_ready -> rsp_demux_043:src0_ready
	wire   [59:0] rsp_demux_043_src0_channel;                                                                              // rsp_demux_043:src0_channel -> crosser_061:in_channel
	wire          rsp_demux_043_src0_startofpacket;                                                                        // rsp_demux_043:src0_startofpacket -> crosser_061:in_startofpacket
	wire          rsp_demux_043_src0_endofpacket;                                                                          // rsp_demux_043:src0_endofpacket -> crosser_061:in_endofpacket
	wire          crosser_061_out_valid;                                                                                   // crosser_061:out_valid -> rsp_mux:sink43_valid
	wire  [127:0] crosser_061_out_data;                                                                                    // crosser_061:out_data -> rsp_mux:sink43_data
	wire          crosser_061_out_ready;                                                                                   // rsp_mux:sink43_ready -> crosser_061:out_ready
	wire   [59:0] crosser_061_out_channel;                                                                                 // crosser_061:out_channel -> rsp_mux:sink43_channel
	wire          crosser_061_out_startofpacket;                                                                           // crosser_061:out_startofpacket -> rsp_mux:sink43_startofpacket
	wire          crosser_061_out_endofpacket;                                                                             // crosser_061:out_endofpacket -> rsp_mux:sink43_endofpacket
	wire          rsp_demux_044_src0_valid;                                                                                // rsp_demux_044:src0_valid -> crosser_062:in_valid
	wire  [127:0] rsp_demux_044_src0_data;                                                                                 // rsp_demux_044:src0_data -> crosser_062:in_data
	wire          rsp_demux_044_src0_ready;                                                                                // crosser_062:in_ready -> rsp_demux_044:src0_ready
	wire   [59:0] rsp_demux_044_src0_channel;                                                                              // rsp_demux_044:src0_channel -> crosser_062:in_channel
	wire          rsp_demux_044_src0_startofpacket;                                                                        // rsp_demux_044:src0_startofpacket -> crosser_062:in_startofpacket
	wire          rsp_demux_044_src0_endofpacket;                                                                          // rsp_demux_044:src0_endofpacket -> crosser_062:in_endofpacket
	wire          crosser_062_out_valid;                                                                                   // crosser_062:out_valid -> rsp_mux:sink44_valid
	wire  [127:0] crosser_062_out_data;                                                                                    // crosser_062:out_data -> rsp_mux:sink44_data
	wire          crosser_062_out_ready;                                                                                   // rsp_mux:sink44_ready -> crosser_062:out_ready
	wire   [59:0] crosser_062_out_channel;                                                                                 // crosser_062:out_channel -> rsp_mux:sink44_channel
	wire          crosser_062_out_startofpacket;                                                                           // crosser_062:out_startofpacket -> rsp_mux:sink44_startofpacket
	wire          crosser_062_out_endofpacket;                                                                             // crosser_062:out_endofpacket -> rsp_mux:sink44_endofpacket
	wire          rsp_demux_047_src0_valid;                                                                                // rsp_demux_047:src0_valid -> crosser_063:in_valid
	wire  [127:0] rsp_demux_047_src0_data;                                                                                 // rsp_demux_047:src0_data -> crosser_063:in_data
	wire          rsp_demux_047_src0_ready;                                                                                // crosser_063:in_ready -> rsp_demux_047:src0_ready
	wire   [59:0] rsp_demux_047_src0_channel;                                                                              // rsp_demux_047:src0_channel -> crosser_063:in_channel
	wire          rsp_demux_047_src0_startofpacket;                                                                        // rsp_demux_047:src0_startofpacket -> crosser_063:in_startofpacket
	wire          rsp_demux_047_src0_endofpacket;                                                                          // rsp_demux_047:src0_endofpacket -> crosser_063:in_endofpacket
	wire          crosser_063_out_valid;                                                                                   // crosser_063:out_valid -> rsp_mux:sink47_valid
	wire  [127:0] crosser_063_out_data;                                                                                    // crosser_063:out_data -> rsp_mux:sink47_data
	wire          crosser_063_out_ready;                                                                                   // rsp_mux:sink47_ready -> crosser_063:out_ready
	wire   [59:0] crosser_063_out_channel;                                                                                 // crosser_063:out_channel -> rsp_mux:sink47_channel
	wire          crosser_063_out_startofpacket;                                                                           // crosser_063:out_startofpacket -> rsp_mux:sink47_startofpacket
	wire          crosser_063_out_endofpacket;                                                                             // crosser_063:out_endofpacket -> rsp_mux:sink47_endofpacket
	wire          rsp_demux_048_src0_valid;                                                                                // rsp_demux_048:src0_valid -> crosser_064:in_valid
	wire  [127:0] rsp_demux_048_src0_data;                                                                                 // rsp_demux_048:src0_data -> crosser_064:in_data
	wire          rsp_demux_048_src0_ready;                                                                                // crosser_064:in_ready -> rsp_demux_048:src0_ready
	wire   [59:0] rsp_demux_048_src0_channel;                                                                              // rsp_demux_048:src0_channel -> crosser_064:in_channel
	wire          rsp_demux_048_src0_startofpacket;                                                                        // rsp_demux_048:src0_startofpacket -> crosser_064:in_startofpacket
	wire          rsp_demux_048_src0_endofpacket;                                                                          // rsp_demux_048:src0_endofpacket -> crosser_064:in_endofpacket
	wire          crosser_064_out_valid;                                                                                   // crosser_064:out_valid -> rsp_mux:sink48_valid
	wire  [127:0] crosser_064_out_data;                                                                                    // crosser_064:out_data -> rsp_mux:sink48_data
	wire          crosser_064_out_ready;                                                                                   // rsp_mux:sink48_ready -> crosser_064:out_ready
	wire   [59:0] crosser_064_out_channel;                                                                                 // crosser_064:out_channel -> rsp_mux:sink48_channel
	wire          crosser_064_out_startofpacket;                                                                           // crosser_064:out_startofpacket -> rsp_mux:sink48_startofpacket
	wire          crosser_064_out_endofpacket;                                                                             // crosser_064:out_endofpacket -> rsp_mux:sink48_endofpacket
	wire          rsp_demux_049_src0_valid;                                                                                // rsp_demux_049:src0_valid -> crosser_065:in_valid
	wire  [127:0] rsp_demux_049_src0_data;                                                                                 // rsp_demux_049:src0_data -> crosser_065:in_data
	wire          rsp_demux_049_src0_ready;                                                                                // crosser_065:in_ready -> rsp_demux_049:src0_ready
	wire   [59:0] rsp_demux_049_src0_channel;                                                                              // rsp_demux_049:src0_channel -> crosser_065:in_channel
	wire          rsp_demux_049_src0_startofpacket;                                                                        // rsp_demux_049:src0_startofpacket -> crosser_065:in_startofpacket
	wire          rsp_demux_049_src0_endofpacket;                                                                          // rsp_demux_049:src0_endofpacket -> crosser_065:in_endofpacket
	wire          crosser_065_out_valid;                                                                                   // crosser_065:out_valid -> rsp_mux:sink49_valid
	wire  [127:0] crosser_065_out_data;                                                                                    // crosser_065:out_data -> rsp_mux:sink49_data
	wire          crosser_065_out_ready;                                                                                   // rsp_mux:sink49_ready -> crosser_065:out_ready
	wire   [59:0] crosser_065_out_channel;                                                                                 // crosser_065:out_channel -> rsp_mux:sink49_channel
	wire          crosser_065_out_startofpacket;                                                                           // crosser_065:out_startofpacket -> rsp_mux:sink49_startofpacket
	wire          crosser_065_out_endofpacket;                                                                             // crosser_065:out_endofpacket -> rsp_mux:sink49_endofpacket
	wire          rsp_demux_052_src0_valid;                                                                                // rsp_demux_052:src0_valid -> crosser_066:in_valid
	wire  [127:0] rsp_demux_052_src0_data;                                                                                 // rsp_demux_052:src0_data -> crosser_066:in_data
	wire          rsp_demux_052_src0_ready;                                                                                // crosser_066:in_ready -> rsp_demux_052:src0_ready
	wire   [59:0] rsp_demux_052_src0_channel;                                                                              // rsp_demux_052:src0_channel -> crosser_066:in_channel
	wire          rsp_demux_052_src0_startofpacket;                                                                        // rsp_demux_052:src0_startofpacket -> crosser_066:in_startofpacket
	wire          rsp_demux_052_src0_endofpacket;                                                                          // rsp_demux_052:src0_endofpacket -> crosser_066:in_endofpacket
	wire          crosser_066_out_valid;                                                                                   // crosser_066:out_valid -> rsp_mux:sink52_valid
	wire  [127:0] crosser_066_out_data;                                                                                    // crosser_066:out_data -> rsp_mux:sink52_data
	wire          crosser_066_out_ready;                                                                                   // rsp_mux:sink52_ready -> crosser_066:out_ready
	wire   [59:0] crosser_066_out_channel;                                                                                 // crosser_066:out_channel -> rsp_mux:sink52_channel
	wire          crosser_066_out_startofpacket;                                                                           // crosser_066:out_startofpacket -> rsp_mux:sink52_startofpacket
	wire          crosser_066_out_endofpacket;                                                                             // crosser_066:out_endofpacket -> rsp_mux:sink52_endofpacket
	wire          rsp_demux_053_src0_valid;                                                                                // rsp_demux_053:src0_valid -> crosser_067:in_valid
	wire  [127:0] rsp_demux_053_src0_data;                                                                                 // rsp_demux_053:src0_data -> crosser_067:in_data
	wire          rsp_demux_053_src0_ready;                                                                                // crosser_067:in_ready -> rsp_demux_053:src0_ready
	wire   [59:0] rsp_demux_053_src0_channel;                                                                              // rsp_demux_053:src0_channel -> crosser_067:in_channel
	wire          rsp_demux_053_src0_startofpacket;                                                                        // rsp_demux_053:src0_startofpacket -> crosser_067:in_startofpacket
	wire          rsp_demux_053_src0_endofpacket;                                                                          // rsp_demux_053:src0_endofpacket -> crosser_067:in_endofpacket
	wire          crosser_067_out_valid;                                                                                   // crosser_067:out_valid -> rsp_mux:sink53_valid
	wire  [127:0] crosser_067_out_data;                                                                                    // crosser_067:out_data -> rsp_mux:sink53_data
	wire          crosser_067_out_ready;                                                                                   // rsp_mux:sink53_ready -> crosser_067:out_ready
	wire   [59:0] crosser_067_out_channel;                                                                                 // crosser_067:out_channel -> rsp_mux:sink53_channel
	wire          crosser_067_out_startofpacket;                                                                           // crosser_067:out_startofpacket -> rsp_mux:sink53_startofpacket
	wire          crosser_067_out_endofpacket;                                                                             // crosser_067:out_endofpacket -> rsp_mux:sink53_endofpacket
	wire          rsp_demux_054_src0_valid;                                                                                // rsp_demux_054:src0_valid -> crosser_068:in_valid
	wire  [127:0] rsp_demux_054_src0_data;                                                                                 // rsp_demux_054:src0_data -> crosser_068:in_data
	wire          rsp_demux_054_src0_ready;                                                                                // crosser_068:in_ready -> rsp_demux_054:src0_ready
	wire   [59:0] rsp_demux_054_src0_channel;                                                                              // rsp_demux_054:src0_channel -> crosser_068:in_channel
	wire          rsp_demux_054_src0_startofpacket;                                                                        // rsp_demux_054:src0_startofpacket -> crosser_068:in_startofpacket
	wire          rsp_demux_054_src0_endofpacket;                                                                          // rsp_demux_054:src0_endofpacket -> crosser_068:in_endofpacket
	wire          crosser_068_out_valid;                                                                                   // crosser_068:out_valid -> rsp_mux:sink54_valid
	wire  [127:0] crosser_068_out_data;                                                                                    // crosser_068:out_data -> rsp_mux:sink54_data
	wire          crosser_068_out_ready;                                                                                   // rsp_mux:sink54_ready -> crosser_068:out_ready
	wire   [59:0] crosser_068_out_channel;                                                                                 // crosser_068:out_channel -> rsp_mux:sink54_channel
	wire          crosser_068_out_startofpacket;                                                                           // crosser_068:out_startofpacket -> rsp_mux:sink54_startofpacket
	wire          crosser_068_out_endofpacket;                                                                             // crosser_068:out_endofpacket -> rsp_mux:sink54_endofpacket
	wire          rsp_demux_057_src0_valid;                                                                                // rsp_demux_057:src0_valid -> crosser_069:in_valid
	wire  [127:0] rsp_demux_057_src0_data;                                                                                 // rsp_demux_057:src0_data -> crosser_069:in_data
	wire          rsp_demux_057_src0_ready;                                                                                // crosser_069:in_ready -> rsp_demux_057:src0_ready
	wire   [59:0] rsp_demux_057_src0_channel;                                                                              // rsp_demux_057:src0_channel -> crosser_069:in_channel
	wire          rsp_demux_057_src0_startofpacket;                                                                        // rsp_demux_057:src0_startofpacket -> crosser_069:in_startofpacket
	wire          rsp_demux_057_src0_endofpacket;                                                                          // rsp_demux_057:src0_endofpacket -> crosser_069:in_endofpacket
	wire          crosser_069_out_valid;                                                                                   // crosser_069:out_valid -> rsp_mux:sink57_valid
	wire  [127:0] crosser_069_out_data;                                                                                    // crosser_069:out_data -> rsp_mux:sink57_data
	wire          crosser_069_out_ready;                                                                                   // rsp_mux:sink57_ready -> crosser_069:out_ready
	wire   [59:0] crosser_069_out_channel;                                                                                 // crosser_069:out_channel -> rsp_mux:sink57_channel
	wire          crosser_069_out_startofpacket;                                                                           // crosser_069:out_startofpacket -> rsp_mux:sink57_startofpacket
	wire          crosser_069_out_endofpacket;                                                                             // crosser_069:out_endofpacket -> rsp_mux:sink57_endofpacket
	wire          rsp_demux_058_src0_valid;                                                                                // rsp_demux_058:src0_valid -> crosser_070:in_valid
	wire  [127:0] rsp_demux_058_src0_data;                                                                                 // rsp_demux_058:src0_data -> crosser_070:in_data
	wire          rsp_demux_058_src0_ready;                                                                                // crosser_070:in_ready -> rsp_demux_058:src0_ready
	wire   [59:0] rsp_demux_058_src0_channel;                                                                              // rsp_demux_058:src0_channel -> crosser_070:in_channel
	wire          rsp_demux_058_src0_startofpacket;                                                                        // rsp_demux_058:src0_startofpacket -> crosser_070:in_startofpacket
	wire          rsp_demux_058_src0_endofpacket;                                                                          // rsp_demux_058:src0_endofpacket -> crosser_070:in_endofpacket
	wire          crosser_070_out_valid;                                                                                   // crosser_070:out_valid -> rsp_mux:sink58_valid
	wire  [127:0] crosser_070_out_data;                                                                                    // crosser_070:out_data -> rsp_mux:sink58_data
	wire          crosser_070_out_ready;                                                                                   // rsp_mux:sink58_ready -> crosser_070:out_ready
	wire   [59:0] crosser_070_out_channel;                                                                                 // crosser_070:out_channel -> rsp_mux:sink58_channel
	wire          crosser_070_out_startofpacket;                                                                           // crosser_070:out_startofpacket -> rsp_mux:sink58_startofpacket
	wire          crosser_070_out_endofpacket;                                                                             // crosser_070:out_endofpacket -> rsp_mux:sink58_endofpacket
	wire          rsp_demux_059_src0_valid;                                                                                // rsp_demux_059:src0_valid -> crosser_071:in_valid
	wire  [127:0] rsp_demux_059_src0_data;                                                                                 // rsp_demux_059:src0_data -> crosser_071:in_data
	wire          rsp_demux_059_src0_ready;                                                                                // crosser_071:in_ready -> rsp_demux_059:src0_ready
	wire   [59:0] rsp_demux_059_src0_channel;                                                                              // rsp_demux_059:src0_channel -> crosser_071:in_channel
	wire          rsp_demux_059_src0_startofpacket;                                                                        // rsp_demux_059:src0_startofpacket -> crosser_071:in_startofpacket
	wire          rsp_demux_059_src0_endofpacket;                                                                          // rsp_demux_059:src0_endofpacket -> crosser_071:in_endofpacket
	wire          crosser_071_out_valid;                                                                                   // crosser_071:out_valid -> rsp_mux:sink59_valid
	wire  [127:0] crosser_071_out_data;                                                                                    // crosser_071:out_data -> rsp_mux:sink59_data
	wire          crosser_071_out_ready;                                                                                   // rsp_mux:sink59_ready -> crosser_071:out_ready
	wire   [59:0] crosser_071_out_channel;                                                                                 // crosser_071:out_channel -> rsp_mux:sink59_channel
	wire          crosser_071_out_startofpacket;                                                                           // crosser_071:out_startofpacket -> rsp_mux:sink59_startofpacket
	wire          crosser_071_out_endofpacket;                                                                             // crosser_071:out_endofpacket -> rsp_mux:sink59_endofpacket
	wire   [59:0] merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_valid_data;                             // merlin_master_translator_0_avalon_universal_master_0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	address_decode_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (10),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (1),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) merlin_master_translator_0_avalon_universal_master_0_translator (
		.clk                    (clk_csr_clk_clk),                                                                                         //   input,   width = 1,                       clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                                            //   input,   width = 1,                     reset.reset
		.uav_address            (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //  output,  width = 10,                          .burstcount
		.uav_read               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (merlin_master_translator_0_avalon_universal_master_0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (merlin_master_translator_0_avalon_universal_master_0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (merlin_master_translator_0_avalon_universal_master_0_burstcount),                                         //   input,  width = 10,                          .burstcount
		.av_byteenable          (merlin_master_translator_0_avalon_universal_master_0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (merlin_master_translator_0_avalon_universal_master_0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (merlin_master_translator_0_avalon_universal_master_0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (merlin_master_translator_0_avalon_universal_master_0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (merlin_master_translator_0_avalon_universal_master_0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (merlin_master_translator_0_avalon_universal_master_0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_lock                (merlin_master_translator_0_avalon_universal_master_0_lock),                                               //   input,   width = 1,                          .lock
		.av_debugaccess         (merlin_master_translator_0_avalon_universal_master_0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                                                    // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                                    // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                                    // (terminated),                                        
		.uav_clken              (),                                                                                                        // (terminated),                                        
		.av_clken               (1'b1),                                                                                                    // (terminated),                                        
		.uav_response           (2'b00),                                                                                                   // (terminated),                                        
		.av_response            (),                                                                                                        // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                                    // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                                         // (terminated),                                        
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_0_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_0_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_0_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_0_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_0_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_0_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_0_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_0_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_0_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_0_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_0_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_0_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_0_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_0_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_0_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_0_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_0_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_0_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_0_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_0_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_0_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_0_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_0_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_0_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_0_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_0_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_0_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_0_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_0_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_0_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_0_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_0_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_0_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_0_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_0_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_0_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_0_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_0_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_0_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_0_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_0_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_0_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_0_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_0_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_0_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_0_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_0_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_0_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_0_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_0_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_0_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_0_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_0_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_0_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_0_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_0_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_0_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_0_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_0_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_0_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_0_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_0_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_0_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_0_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_0_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_0_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_0_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_0_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_0_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_0_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_0_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_0_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_0_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_0_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_0_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_0_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_0_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_0_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_0_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_0_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_0_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_0_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_1_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_1_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_1_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_1_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_1_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_1_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_1_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_1_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_1_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_1_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_1_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_1_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_1_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_1_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_1_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_1_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_1_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_1_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_1_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_1_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_1_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_1_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_1_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_1_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_1_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_1_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_1_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_1_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_1_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_1_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_1_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_1_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_1_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_1_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_1_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_1_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_1_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_1_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_1_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_1_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_1_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_1_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_1_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_1_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_1_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_1_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_1_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_1_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_1_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_1_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_1_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_1_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_1_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_1_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_1_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_1_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_1_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_1_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_1_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_1_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_1_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_1_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_1_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_1_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_1_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_1_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_1_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_1_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_1_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_1_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_1_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_1_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_1_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_1_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_1_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_1_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_1_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_1_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_1_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_1_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_1_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_1_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_2_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_2_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_2_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_2_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_2_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_2_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_2_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_2_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_2_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_2_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_2_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_2_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_2_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_2_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_2_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_2_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_2_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_2_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_2_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_2_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_2_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_2_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_2_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_2_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_2_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_2_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_2_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_2_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_2_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_2_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_2_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_2_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_2_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_2_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_2_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_2_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_2_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_2_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_2_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_2_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_2_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_2_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_2_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_2_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_2_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_2_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_2_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_2_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_2_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_2_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_2_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_2_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_2_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_2_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_2_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_2_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_2_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_2_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_2_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_2_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_2_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_2_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_2_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_2_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_2_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_2_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_2_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_2_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_2_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_2_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_2_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_2_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_2_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_2_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_2_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_2_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_2_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_2_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_2_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_2_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_2_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_2_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_3_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_3_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_3_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_3_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_3_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_3_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_3_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_3_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_3_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_3_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_3_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_3_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_3_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_3_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_3_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_3_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_3_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_3_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_3_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_3_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_3_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_3_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_3_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_3_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_3_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_3_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_3_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_3_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_3_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_3_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_3_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_3_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_3_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_3_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_3_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_3_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_3_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_3_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_3_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_3_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_3_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_3_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_3_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_3_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_3_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_3_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_3_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_3_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_3_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_3_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_3_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_3_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_3_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_3_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_3_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_3_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_3_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_3_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_3_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_3_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_3_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_3_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_3_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_3_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_3_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_3_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_3_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_3_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_3_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_3_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_3_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_3_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_3_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_3_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_3_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_3_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_3_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_3_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_3_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_3_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_3_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_3_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_4_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_4_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_4_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_4_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_4_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_4_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_4_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_4_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_4_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_4_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_4_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_4_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_4_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_4_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_4_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_4_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_4_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_4_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_4_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_4_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_4_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_4_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_4_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_4_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_4_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_4_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_4_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_4_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_4_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_4_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_4_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_4_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_4_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_4_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_4_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_4_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_4_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_4_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_4_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_4_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_4_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_4_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_4_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_4_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_4_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_4_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_4_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_4_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_4_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_4_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_4_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_4_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_4_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_4_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_4_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_4_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_4_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_4_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_4_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_4_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_4_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_4_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_4_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_4_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_4_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_4_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_4_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_4_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_4_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_4_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_4_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_4_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_4_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_4_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_4_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_4_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_4_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_4_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_4_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_4_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_4_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_4_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_5_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_5_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_5_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_5_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_5_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_5_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_5_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_5_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_5_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_5_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_5_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_5_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_5_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_5_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_5_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_5_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_5_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_5_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_5_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_5_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_5_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_5_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_5_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_5_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_5_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_5_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_5_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_5_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_5_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_5_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_5_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_5_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_5_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_5_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_5_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_5_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_5_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_5_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_5_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_5_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_5_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_5_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_5_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_5_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_5_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_5_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_5_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_5_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_5_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_5_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_5_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_5_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_5_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_5_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_5_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_5_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_5_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_5_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_5_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_5_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_5_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_5_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_5_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_5_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_5_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_5_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_5_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_5_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_5_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_5_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_5_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_5_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_5_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_5_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_5_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_5_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_5_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_5_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_5_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_5_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_5_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_5_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_6_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_6_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_6_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_6_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_6_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_6_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_6_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_6_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_6_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_6_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_6_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_6_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_6_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_6_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_6_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_6_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_6_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_6_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_6_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_6_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_6_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_6_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_6_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_6_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_6_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_6_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_6_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_6_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_6_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_6_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_6_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_6_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_6_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_6_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_6_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_6_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_6_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_6_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_6_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_6_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_6_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_6_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_6_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_6_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_6_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_6_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_6_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_6_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_6_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_6_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_6_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_6_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_6_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_6_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_6_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_6_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_6_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_6_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_6_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_6_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_6_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_6_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_6_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_6_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_6_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_6_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_6_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_6_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_6_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_6_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_6_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_6_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_6_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_6_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_6_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_6_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_6_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_6_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_6_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_6_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_6_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_6_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_7_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_7_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_7_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_7_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_7_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_7_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_7_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_7_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_7_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_7_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_7_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_7_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_7_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_7_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_7_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_7_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_7_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_7_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_7_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_7_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_7_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_7_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_7_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_7_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_7_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_7_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_7_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_7_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_7_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_7_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_7_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_7_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_7_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_7_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_7_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_7_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_7_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_7_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_7_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_7_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_7_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_7_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_7_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_7_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_7_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_7_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_7_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_7_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_7_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_7_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_7_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_7_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_7_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_7_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_7_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_7_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_7_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_7_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_7_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_7_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_7_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_7_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_7_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_7_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_7_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_7_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_7_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_7_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_7_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_7_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_7_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_7_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_7_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_7_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_7_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_7_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_7_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_7_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_7_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_7_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_7_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_7_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_8_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_8_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_8_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_8_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_8_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_8_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_8_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_8_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_8_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_8_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_8_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_8_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_8_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_8_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_8_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_8_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_8_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_8_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_8_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_8_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_8_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_8_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_8_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_8_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_8_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_8_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_8_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_8_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_8_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_8_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_8_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_8_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_8_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_8_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_8_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_8_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_8_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_8_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_8_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_8_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_8_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_8_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_8_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_8_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_8_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_8_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_8_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_8_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_8_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_8_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_8_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_8_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_8_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_8_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_8_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_8_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_8_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_8_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_8_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_8_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_8_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_8_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_8_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_8_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_8_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_8_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_8_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_8_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_8_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_8_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_8_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_8_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_8_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_8_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_8_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_8_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_8_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_8_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_8_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_8_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_8_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_8_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_9_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_9_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_9_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_9_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_9_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_9_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_9_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_9_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_9_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_9_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_9_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_9_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_9_avalon_universal_slave_0_address),                 //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_9_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_9_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_9_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_9_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_9_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_9_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_9_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_9_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_9_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_9_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_9_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_9_avalon_universal_slave_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_9_avalon_universal_slave_0_agent_m0_burstcount),     //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_9_avalon_universal_slave_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_9_avalon_universal_slave_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_9_avalon_universal_slave_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_9_avalon_universal_slave_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_9_avalon_universal_slave_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_9_avalon_universal_slave_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_9_avalon_universal_slave_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_9_avalon_universal_slave_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_9_avalon_universal_slave_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_9_avalon_universal_slave_0_address),                 //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_9_avalon_universal_slave_0_write),                   //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_9_avalon_universal_slave_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_9_avalon_universal_slave_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_9_avalon_universal_slave_0_writedata),               //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_9_avalon_universal_slave_0_burstcount),              //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_9_avalon_universal_slave_0_byteenable),              //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_9_avalon_universal_slave_0_readdatavalid),           //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_9_avalon_universal_slave_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_9_avalon_universal_slave_0_lock),                    //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_9_avalon_universal_slave_0_debugaccess),             //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_9_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_9_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_9_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_9_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_9_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_9_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_9_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_9_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_9_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_9_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_9_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_9_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_9_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_9_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_9_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_9_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_9_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_9_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_9_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_9_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_9_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_9_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_9_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_9_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_9_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_9_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_9_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_9_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_9_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_9_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_9_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_9_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_9_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_9_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_9_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_9_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_10_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_10_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_10_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_10_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_10_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_10_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_10_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_10_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_10_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_10_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_10_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_10_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_10_avalon_universal_slave_0_address),                //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_10_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_10_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_10_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_10_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_10_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_10_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_10_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_10_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_10_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_10_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_10_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_10_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_10_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_10_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_10_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_10_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_10_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_10_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_10_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_10_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_10_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_10_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_10_avalon_universal_slave_0_address),                //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_10_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_10_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_10_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_10_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_10_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_10_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_10_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_10_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_10_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_10_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_10_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_10_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_10_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_10_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_10_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_10_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_10_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_10_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_10_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_10_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_10_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_10_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_10_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_10_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_10_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_10_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_10_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_10_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_10_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_10_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_10_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_10_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_10_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_10_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_10_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                       //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                 //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_10_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_10_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_10_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_10_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_10_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_10_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_10_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_10_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_10_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_10_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_10_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                                               // (terminated),                                       
		.av_writebyteenable     (),                                                               // (terminated),                                       
		.av_chipselect          (),                                                               // (terminated),                                       
		.av_clken               (),                                                               // (terminated),                                       
		.uav_clken              (1'b0),                                                           // (terminated),                                       
		.av_outputenable        (),                                                               // (terminated),                                       
		.uav_response           (),                                                               // (terminated),                                       
		.av_response            (2'b00),                                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                            // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_mac_11_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_mac_11_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_mac_11_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_mac_11_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (mm_to_mac_11_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_mac_11_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_mac_11_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_mac_11_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_mac_11_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_mac_11_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_mac_11_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_mac_11_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_mac_11_avalon_universal_slave_0_address),                //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mm_to_mac_11_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (mm_to_mac_11_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (mm_to_mac_11_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_mac_11_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_mac_11_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_mac_11_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_mac_11_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_mac_11_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_mac_11_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_mac_11_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_to_phy_11_avalon_universal_slave_0_translator (
		.clk                    (clk_csr_clk_clk),                                              //   input,   width = 1,                      clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mm_to_phy_11_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_to_phy_11_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (mm_to_phy_11_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (mm_to_phy_11_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_to_phy_11_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_to_phy_11_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_to_phy_11_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_to_phy_11_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_to_phy_11_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (mm_to_phy_11_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_to_phy_11_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (mm_to_phy_11_avalon_universal_slave_0_address),                //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (mm_to_phy_11_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (mm_to_phy_11_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (mm_to_phy_11_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (mm_to_phy_11_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_to_phy_11_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (mm_to_phy_11_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_to_phy_11_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_to_phy_11_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (mm_to_phy_11_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (mm_to_phy_11_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) rx_sc_fifo_11_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (rx_sc_fifo_11_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (rx_sc_fifo_11_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (rx_sc_fifo_11_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (rx_sc_fifo_11_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (rx_sc_fifo_11_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (rx_sc_fifo_11_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (rx_sc_fifo_11_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (rx_sc_fifo_11_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (rx_sc_fifo_11_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (rx_sc_fifo_11_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (rx_sc_fifo_11_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_sc_fifo_11_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_sc_fifo_11_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (tx_sc_fifo_11_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_sc_fifo_11_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_sc_fifo_11_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_sc_fifo_11_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_sc_fifo_11_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (tx_sc_fifo_11_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_sc_fifo_11_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_sc_fifo_11_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_sc_fifo_11_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_sc_fifo_11_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decode_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) eth_gen_mon_11_avalon_universal_slave_0_translator (
		.clk                    (tx_xcvr_half_clk_clk_clk),                                       //   input,   width = 1,                      clk.clk
		.reset                  (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                 //   input,   width = 1,                    reset.reset
		.uav_address            (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (eth_gen_mon_11_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (eth_gen_mon_11_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (eth_gen_mon_11_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (eth_gen_mon_11_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (eth_gen_mon_11_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (eth_gen_mon_11_avalon_universal_slave_0_burstcount),             //  output,   width = 4,                         .burstcount
		.av_byteenable          (eth_gen_mon_11_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (eth_gen_mon_11_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (eth_gen_mon_11_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (eth_gen_mon_11_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (eth_gen_mon_11_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                                               // (terminated),                                       
		.av_writebyteenable     (),                                                               // (terminated),                                       
		.av_chipselect          (),                                                               // (terminated),                                       
		.av_clken               (),                                                               // (terminated),                                       
		.uav_clken              (1'b0),                                                           // (terminated),                                       
		.av_outputenable        (),                                                               // (terminated),                                       
		.uav_response           (),                                                               // (terminated),                                       
		.av_response            (2'b00),                                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                            // (terminated),                                       
	);

	address_decode_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (127),
		.PKT_DOMAIN_H              (126),
		.PKT_DOMAIN_L              (125),
		.PKT_SNOOP_H               (124),
		.PKT_SNOOP_L               (121),
		.PKT_BARRIER_H             (120),
		.PKT_BARRIER_L             (119),
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (106),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) merlin_master_translator_0_avalon_universal_master_0_agent (
		.clk                   (clk_csr_clk_clk),                                                                                         //   input,    width = 1,       clk.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                                            //   input,    width = 1, clk_reset.reset
		.av_address            (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (merlin_master_translator_0_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (merlin_master_translator_0_avalon_universal_master_0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (merlin_master_translator_0_avalon_universal_master_0_agent_cp_data),                                      //  output,  width = 128,          .data
		.cp_startofpacket      (merlin_master_translator_0_avalon_universal_master_0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (merlin_master_translator_0_avalon_universal_master_0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (merlin_master_translator_0_avalon_universal_master_0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_data),                               //   input,  width = 128,          .data
		.rp_channel            (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_channel),                            //   input,   width = 60,          .channel
		.rp_startofpacket      (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                                                        // (terminated),                         
		.av_writeresponsevalid ()                                                                                                         // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_0_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_0_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_0_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_0_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_0_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_0_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_0_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_0_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_0_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_0_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_0_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_0_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_0_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_0_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_0_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_0_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_0_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_0_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_0_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_0_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_0_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_0_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_0_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_0_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_0_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_0_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_0_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_0_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_0_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_0_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_0_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_0_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_0_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_0_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_0_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_0_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_0_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_0_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_0_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_0_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_0_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_0_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_0_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_0_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_0_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_0_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_1_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_1_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_1_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_1_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_1_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_1_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_1_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_1_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_1_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_1_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_1_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_1_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_1_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_1_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_1_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_1_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_1_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_1_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_1_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_1_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_1_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_1_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_1_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_1_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_1_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_1_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_1_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_1_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_1_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_1_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_1_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_1_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_1_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_1_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_1_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_1_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_1_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_1_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_1_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_1_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_1_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_1_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_1_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_1_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_1_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_1_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_2_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_2_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_2_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_2_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_2_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_2_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_2_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_2_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_2_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_2_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_2_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_2_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_2_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_2_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_2_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_2_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_2_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_2_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_2_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_2_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_2_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_2_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_2_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_2_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_2_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_2_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_2_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_2_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_2_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_2_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_2_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_2_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_2_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_2_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_2_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_2_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_2_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_2_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_2_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_2_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_2_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_2_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_2_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_2_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_2_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_2_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_3_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_3_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_3_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_3_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_3_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_3_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_3_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_3_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_3_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_3_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_3_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_3_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_3_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_3_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_3_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_3_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_3_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_3_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_3_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_3_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_3_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_3_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_3_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_3_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_3_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_3_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_3_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_3_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_3_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_3_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_3_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_3_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_3_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_3_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_3_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_3_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_3_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_3_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_3_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_3_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_3_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_3_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_3_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_3_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_3_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_3_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_4_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_4_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_4_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_4_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_4_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_4_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_4_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_4_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_4_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_4_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_4_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_4_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_4_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_4_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_4_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_4_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_4_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_4_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_4_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_4_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_4_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_4_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_4_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_4_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_4_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_4_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_4_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_4_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_4_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_4_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_4_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_4_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_4_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_4_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_4_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_4_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_4_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_4_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_4_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_4_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_4_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_4_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_4_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_4_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_4_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_4_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_5_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_5_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_5_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_5_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_5_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_5_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_5_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_5_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_5_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_5_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_5_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_5_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_5_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_5_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_5_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_5_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_5_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_5_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_5_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_5_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_5_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_5_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_5_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_5_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_5_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_5_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_5_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_5_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_5_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_5_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_5_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_5_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_5_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_5_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_5_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_5_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_5_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_5_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_5_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_5_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_5_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_5_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_5_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_5_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_5_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_5_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_6_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_6_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_6_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_6_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_6_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_6_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_6_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_6_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_6_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_6_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_6_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_6_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_6_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_6_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_6_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_6_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_6_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_6_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_6_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_6_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_6_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_6_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_6_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_6_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_6_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_6_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_6_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_6_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_6_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_6_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_6_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_6_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_6_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_6_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_6_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_6_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_6_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_6_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_6_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_6_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_6_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_6_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_6_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_6_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_6_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_6_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_7_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_7_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_7_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_7_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_7_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_7_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_7_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_7_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_7_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_7_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_7_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_7_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_7_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_7_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_7_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_7_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_7_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_7_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_7_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_7_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_7_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_7_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_7_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_7_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_7_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_7_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_7_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_7_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_7_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_7_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_7_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_7_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_7_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_7_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_7_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_7_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_7_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_7_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_7_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_7_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_7_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_7_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_7_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_7_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_7_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_7_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_8_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_8_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_8_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_8_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_8_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_8_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_8_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_8_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_8_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_8_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_8_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_8_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_8_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_8_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_8_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_8_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_8_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_8_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_8_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_8_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_8_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_8_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_8_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_8_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_8_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_8_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_8_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_8_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_8_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_8_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_8_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_8_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_8_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_8_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_8_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_8_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_8_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_8_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_8_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_8_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_8_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_8_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_8_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_8_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_8_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_8_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_9_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_9_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_9_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_9_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_9_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_9_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_9_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_9_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_9_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_9_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_9_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_9_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_9_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_9_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_9_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_9_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_9_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_9_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_9_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_9_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_9_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_9_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_9_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_9_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_9_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_9_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_9_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_9_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_9_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_9_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_9_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_9_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_9_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_9_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_9_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_9_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                  // (terminated),                         
		.csr_readdata      (),                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated),                         
		.almost_full_data  (),                                                                      // (terminated),                         
		.almost_empty_data (),                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                  // (terminated),                         
		.out_empty         (),                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                  // (terminated),                         
		.out_error         (),                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                  // (terminated),                         
		.out_channel       ()                                                                       // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_9_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_9_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_9_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_9_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_9_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                         //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_9_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_9_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_9_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_9_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_9_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_10_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                           //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_10_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_10_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_10_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_10_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_10_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_10_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_10_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_10_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_10_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_10_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_10_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_10_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_10_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_10_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_10_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_10_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_10_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_10_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                           //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_10_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_10_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_10_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_10_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_10_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_10_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_10_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_10_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_10_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_10_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_10_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_10_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_10_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_10_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_10_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_10_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_10_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_10_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_10_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_10_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_10_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_10_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_10_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                    //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_10_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                         // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_10_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_10_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                           //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_10_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                              // (terminated),                        
		.csr_read          (1'b0),                                                               // (terminated),                        
		.csr_write         (1'b0),                                                               // (terminated),                        
		.csr_readdata      (),                                                                   // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated),                        
		.almost_full_data  (),                                                                   // (terminated),                        
		.almost_empty_data (),                                                                   // (terminated),                        
		.in_startofpacket  (1'b0),                                                               // (terminated),                        
		.in_endofpacket    (1'b0),                                                               // (terminated),                        
		.out_startofpacket (),                                                                   // (terminated),                        
		.out_endofpacket   (),                                                                   // (terminated),                        
		.in_empty          (1'b0),                                                               // (terminated),                        
		.out_empty         (),                                                                   // (terminated),                        
		.in_error          (1'b0),                                                               // (terminated),                        
		.out_error         (),                                                                   // (terminated),                        
		.in_channel        (1'b0),                                                               // (terminated),                        
		.out_channel       ()                                                                    // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_mac_11_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                           //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_mac_11_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_mac_11_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_mac_11_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_mac_11_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_mac_11_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_mac_11_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_mac_11_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_mac_11_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_mac_11_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_mac_11_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_mac_11_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_mac_11_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_mac_11_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_mac_11_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_mac_11_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_mac_11_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_mac_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_mac_11_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_mac_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mm_to_phy_11_avalon_universal_slave_0_agent (
		.clk                     (clk_csr_clk_clk),                                                           //   input,    width = 1,             clk.clk
		.reset                   (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_to_phy_11_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_to_phy_11_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (mm_to_phy_11_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_to_phy_11_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_to_phy_11_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (mm_to_phy_11_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_to_phy_11_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_to_phy_11_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (mm_to_phy_11_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_to_phy_11_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (mm_to_phy_11_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (mm_to_phy_11_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_to_phy_11_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (mm_to_phy_11_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (mm_to_phy_11_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (mm_to_phy_11_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_to_phy_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                       // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_csr_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset             (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_to_phy_11_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_to_phy_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) rx_sc_fifo_11_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (rx_sc_fifo_11_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (rx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_sc_fifo_11_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (tx_sc_fifo_11_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_sc_fifo_11_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_sc_fifo_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1, clk_reset.reset
		.in_data           (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	address_decode_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (60),
		.ST_DATA_W                 (128),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) eth_gen_mon_11_avalon_universal_slave_0_agent (
		.clk                     (tx_xcvr_half_clk_clk_clk),                                                    //   input,    width = 1,             clk.clk
		.reset                   (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1,       clk_reset.reset
		.m0_address              (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (eth_gen_mon_11_avalon_universal_slave_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 128,                .data
		.rp_startofpacket        (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_data),          //   input,  width = 128,                .data
		.cp_startofpacket        (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //   input,   width = 60,                .channel
		.rf_sink_ready           (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 129,                .data
		.rf_source_ready         (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 129,                .data
		.rdata_fifo_sink_ready   (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                         // (terminated),                               
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (129),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 129,        in.data
		.in_valid          (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (eth_gen_mon_11_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 129,       out.data
		.out_valid         (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (eth_gen_mon_11_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	address_decode_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (tx_xcvr_half_clk_clk_clk),                                           //   input,   width = 1,       clk.clk
		.reset             (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.in_data           (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (eth_gen_mon_11_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                              // (terminated),                        
		.csr_read          (1'b0),                                                               // (terminated),                        
		.csr_write         (1'b0),                                                               // (terminated),                        
		.csr_readdata      (),                                                                   // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated),                        
		.almost_full_data  (),                                                                   // (terminated),                        
		.almost_empty_data (),                                                                   // (terminated),                        
		.in_startofpacket  (1'b0),                                                               // (terminated),                        
		.in_endofpacket    (1'b0),                                                               // (terminated),                        
		.out_startofpacket (),                                                                   // (terminated),                        
		.out_endofpacket   (),                                                                   // (terminated),                        
		.in_empty          (1'b0),                                                               // (terminated),                        
		.out_empty         (),                                                                   // (terminated),                        
		.in_error          (1'b0),                                                               // (terminated),                        
		.out_error         (),                                                                   // (terminated),                        
		.in_channel        (1'b0),                                                               // (terminated),                        
		.out_channel       ()                                                                    // (terminated),                        
	);

	address_decode_altera_merlin_router_181_dqij2zy router (
		.sink_ready         (merlin_master_translator_0_avalon_universal_master_0_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (merlin_master_translator_0_avalon_universal_master_0_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (merlin_master_translator_0_avalon_universal_master_0_agent_cp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (merlin_master_translator_0_avalon_universal_master_0_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (merlin_master_translator_0_avalon_universal_master_0_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                                             //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                            //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                            //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                             //  output,  width = 128,          .data
		.src_channel        (router_src_channel),                                                          //  output,   width = 60,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                       //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_001 (
		.sink_ready         (mm_to_mac_0_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_0_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_0_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_0_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_0_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_001_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_002 (
		.sink_ready         (mm_to_phy_0_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_0_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_0_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_0_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_0_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_002_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_003 (
		.sink_ready         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_0_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_003_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_004 (
		.sink_ready         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_0_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_004_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_005 (
		.sink_ready         (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_0_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_005_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_006 (
		.sink_ready         (mm_to_mac_1_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_1_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_1_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_1_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_1_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_006_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_007 (
		.sink_ready         (mm_to_phy_1_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_1_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_1_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_1_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_1_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_007_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_008 (
		.sink_ready         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_1_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_008_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_009 (
		.sink_ready         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_1_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_009_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_010 (
		.sink_ready         (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_1_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_010_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_011 (
		.sink_ready         (mm_to_mac_2_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_2_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_2_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_2_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_2_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_011_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_011_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_011_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_011_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_012 (
		.sink_ready         (mm_to_phy_2_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_2_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_2_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_2_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_2_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_012_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_012_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_012_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_012_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_013 (
		.sink_ready         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_2_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_013_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_013_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_013_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_013_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_014 (
		.sink_ready         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_2_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_014_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_014_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_014_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_014_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_015 (
		.sink_ready         (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_2_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_015_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_015_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_015_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_015_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_016 (
		.sink_ready         (mm_to_mac_3_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_3_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_3_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_3_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_3_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_016_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_016_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_016_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_016_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_017 (
		.sink_ready         (mm_to_phy_3_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_3_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_3_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_3_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_3_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_017_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_017_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_017_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_017_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_018 (
		.sink_ready         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_3_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_018_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_018_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_018_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_018_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_019 (
		.sink_ready         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_3_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_019_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_019_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_019_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_019_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_020 (
		.sink_ready         (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_3_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_020_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_020_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_020_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_020_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_021 (
		.sink_ready         (mm_to_mac_4_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_4_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_4_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_4_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_4_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_021_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_021_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_021_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_021_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_022 (
		.sink_ready         (mm_to_phy_4_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_4_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_4_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_4_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_4_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_022_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_022_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_022_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_022_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_023 (
		.sink_ready         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_4_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_023_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_023_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_023_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_023_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_024 (
		.sink_ready         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_4_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_024_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_024_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_024_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_024_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_024_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_025 (
		.sink_ready         (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_4_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_025_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_025_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_025_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_025_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_025_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_026 (
		.sink_ready         (mm_to_mac_5_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_5_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_5_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_5_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_5_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_026_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_026_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_026_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_026_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_026_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_027 (
		.sink_ready         (mm_to_phy_5_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_5_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_5_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_5_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_5_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_027_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_027_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_027_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_027_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_027_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_028 (
		.sink_ready         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_5_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_028_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_028_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_028_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_028_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_028_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_029 (
		.sink_ready         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_5_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_029_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_029_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_029_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_029_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_029_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_030 (
		.sink_ready         (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_5_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_030_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_030_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_030_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_030_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_030_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_031 (
		.sink_ready         (mm_to_mac_6_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_6_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_6_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_6_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_6_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_031_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_031_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_031_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_031_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_031_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_032 (
		.sink_ready         (mm_to_phy_6_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_6_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_6_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_6_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_6_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_032_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_032_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_032_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_032_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_032_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_033 (
		.sink_ready         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_6_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_033_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_033_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_033_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_033_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_033_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_034 (
		.sink_ready         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_6_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_034_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_034_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_034_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_034_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_034_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_035 (
		.sink_ready         (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_6_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_035_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_035_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_035_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_035_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_035_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_036 (
		.sink_ready         (mm_to_mac_7_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_7_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_7_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_7_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_7_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_036_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_036_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_036_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_036_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_036_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_037 (
		.sink_ready         (mm_to_phy_7_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_7_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_7_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_7_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_7_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_037_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_037_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_037_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_037_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_037_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_038 (
		.sink_ready         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_7_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_038_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_038_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_038_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_038_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_038_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_039 (
		.sink_ready         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_7_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_039_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_039_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_039_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_039_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_039_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_040 (
		.sink_ready         (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_7_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_040_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_040_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_040_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_040_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_040_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_041 (
		.sink_ready         (mm_to_mac_8_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_8_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_8_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_8_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_8_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_041_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_041_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_041_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_041_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_041_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_042 (
		.sink_ready         (mm_to_phy_8_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_8_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_8_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_8_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_8_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_042_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_042_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_042_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_042_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_042_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_043 (
		.sink_ready         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_8_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_043_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_043_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_043_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_043_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_043_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_044 (
		.sink_ready         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_8_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_044_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_044_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_044_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_044_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_044_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_045 (
		.sink_ready         (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_8_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_045_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_045_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_045_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_045_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_045_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_046 (
		.sink_ready         (mm_to_mac_9_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_9_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_9_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_9_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_9_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_046_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_046_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_046_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_046_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_046_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_047 (
		.sink_ready         (mm_to_phy_9_avalon_universal_slave_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_9_avalon_universal_slave_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_9_avalon_universal_slave_0_agent_rp_data),           //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_9_avalon_universal_slave_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_9_avalon_universal_slave_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_047_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_047_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_047_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_047_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_047_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_048 (
		.sink_ready         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_9_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_048_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_048_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_048_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_048_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_048_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_049 (
		.sink_ready         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_9_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_049_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_049_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_049_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_049_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_049_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_050 (
		.sink_ready         (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_9_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_050_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_050_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_050_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_050_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_050_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_050_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_051 (
		.sink_ready         (mm_to_mac_10_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_10_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_10_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_10_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_10_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_051_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_051_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_051_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_051_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_051_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_051_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_052 (
		.sink_ready         (mm_to_phy_10_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_10_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_10_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_10_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_10_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_052_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_052_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_052_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_052_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_052_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_052_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_053 (
		.sink_ready         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_10_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_053_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_053_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_053_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_053_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_053_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_053_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_054 (
		.sink_ready         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_10_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_054_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_054_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_054_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_054_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_054_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_054_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_055 (
		.sink_ready         (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_10_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.src_ready          (router_055_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid          (router_055_src_valid),                                           //  output,    width = 1,          .valid
		.src_data           (router_055_src_data),                                            //  output,  width = 128,          .data
		.src_channel        (router_055_src_channel),                                         //  output,   width = 60,          .channel
		.src_startofpacket  (router_055_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_055_src_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_056 (
		.sink_ready         (mm_to_mac_11_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_mac_11_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mm_to_mac_11_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_mac_11_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_mac_11_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_056_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_056_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_056_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_056_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_056_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_056_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_057 (
		.sink_ready         (mm_to_phy_11_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mm_to_phy_11_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mm_to_phy_11_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (mm_to_phy_11_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_to_phy_11_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_057_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_057_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_057_src_data),                                          //  output,  width = 128,          .data
		.src_channel        (router_057_src_channel),                                       //  output,   width = 60,          .channel
		.src_startofpacket  (router_057_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_057_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_058 (
		.sink_ready         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_11_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_058_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_058_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_058_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_058_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_058_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_058_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_059 (
		.sink_ready         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_11_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_059_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_059_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_059_src_data),                                           //  output,  width = 128,          .data
		.src_channel        (router_059_src_channel),                                        //  output,   width = 60,          .channel
		.src_startofpacket  (router_059_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_059_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_router_181_3mdsetq router_060 (
		.sink_ready         (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 128,          .data
		.sink_startofpacket (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (eth_gen_mon_11_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (tx_xcvr_half_clk_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.src_ready          (router_060_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid          (router_060_src_valid),                                           //  output,    width = 1,          .valid
		.src_data           (router_060_src_data),                                            //  output,  width = 128,          .data
		.src_channel        (router_060_src_channel),                                         //  output,   width = 60,          .channel
		.src_startofpacket  (router_060_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_060_src_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_traffic_limiter_181_reppfiq #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (105),
		.PKT_DEST_ID_L             (100),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (71),
		.PIPELINED                 (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.VALID_WIDTH               (60),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) merlin_master_translator_0_avalon_universal_master_0_limiter (
		.clk                    (clk_csr_clk_clk),                                                                    //   input,    width = 1,       clk.clk
		.reset                  (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                                   //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                                   //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                                    //   input,  width = 128,          .data
		.cmd_sink_channel       (router_src_channel),                                                                 //   input,   width = 60,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_data),          //  output,  width = 128,          .data
		.cmd_src_channel        (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_channel),       //  output,   width = 60,          .channel
		.cmd_src_startofpacket  (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                                //   input,   width = 60,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                                   //   input,  width = 128,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_data),          //  output,  width = 128,          .data
		.rsp_src_channel        (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_channel),       //  output,   width = 60,          .channel
		.rsp_src_startofpacket  (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (merlin_master_translator_0_avalon_universal_master_0_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_valid_data)         //  output,   width = 60, cmd_valid.data
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_0_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                        //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                         //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_src_channel),                                                      //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                        //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_0_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_0_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_0_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_0_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_0_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_0_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_1_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_1_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_1_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_1_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_1_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_1_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_1_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_2_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_2_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_2_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_2_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_2_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_2_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_014_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_2_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_3_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_015_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_3_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_3_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_016_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_3_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_017_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_018_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_3_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_3_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_019_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_3_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_4_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_020_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_4_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_4_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_021_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_4_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_022_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_022_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_022_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_022_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_022_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_022_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_023_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_4_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_4_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_024_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_024_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_024_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_024_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_024_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_024_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_4_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_5_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_025_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_5_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_5_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_026_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_5_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_027_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_027_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_027_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_027_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_027_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_027_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_028_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_028_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_028_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_028_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_028_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_028_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_5_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_5_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_029_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_029_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_029_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_029_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_029_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_029_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_5_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_6_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_030_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_030_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_030_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_030_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_030_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_030_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_6_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_6_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_031_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_031_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_031_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_031_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_031_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_031_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_6_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_032_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_032_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_032_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_032_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_032_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_032_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_033_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_033_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_033_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_033_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_033_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_033_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_6_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_6_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_034_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_034_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_034_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_034_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_034_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_034_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_6_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_7_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_035_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_035_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_035_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_035_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_035_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_035_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_7_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_7_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_036_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_036_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_036_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_036_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_036_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_036_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_7_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_037_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_037_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_037_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_037_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_037_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_037_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_038_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_038_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_038_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_038_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_038_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_038_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_7_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_7_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_039_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_039_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_039_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_039_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_039_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_039_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_7_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_8_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_040_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_040_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_040_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_040_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_040_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_040_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_8_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_8_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_041_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_041_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_041_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_041_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_041_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_041_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_8_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_042_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_042_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_042_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_042_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_042_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_042_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_043_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_043_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_043_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_043_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_043_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_043_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_8_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_8_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_044_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_044_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_044_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_044_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_044_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_044_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_8_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_9_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_045_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_045_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_045_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_045_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_045_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_045_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_9_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_9_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                          //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_046_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_046_src_data),                                                     //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_046_src_channel),                                                  //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_046_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_046_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_046_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_9_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_047_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_047_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_047_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_047_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_047_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_047_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                  //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_048_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_048_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_048_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_048_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_048_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_048_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_9_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_9_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_049_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_049_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_049_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_049_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_049_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_049_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_9_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_10_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                           //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_050_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_050_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_050_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_050_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_050_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_050_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_10_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_10_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                           //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_051_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_051_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_051_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_051_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_051_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_051_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_10_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_052_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_052_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_052_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_052_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_052_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_052_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_053_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_053_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_053_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_053_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_053_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_053_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_10_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_10_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                    //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_054_src_valid),                                                       //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_054_src_data),                                                        //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_054_src_channel),                                                     //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_054_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_054_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_054_src_ready),                                                       //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_10_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_mac_11_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                           //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_055_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_055_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_055_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_055_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_055_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_055_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_mac_11_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mm_to_phy_11_avalon_universal_slave_0_burst_adapter (
		.clk                   (clk_csr_clk_clk),                                                           //   input,    width = 1,       cr0.clk
		.reset                 (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_056_src_valid),                                                     //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_056_src_data),                                                      //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_056_src_channel),                                                   //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_056_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_056_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_056_src_ready),                                                     //  output,    width = 1,          .ready
		.source0_valid         (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (mm_to_phy_11_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_057_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_057_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_057_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_057_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_057_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_057_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (rx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                   //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_058_src_valid),                                                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_058_src_data),                                                       //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_058_src_channel),                                                    //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_058_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_058_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_058_src_ready),                                                      //  output,    width = 1,          .ready
		.source0_valid         (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (tx_sc_fifo_11_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_burst_adapter_181_hpj5oyy #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (128),
		.ST_CHANNEL_W              (60),
		.OUT_BYTE_CNT_H            (77),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) eth_gen_mon_11_avalon_universal_slave_0_burst_adapter (
		.clk                   (tx_xcvr_half_clk_clk_clk),                                                    //   input,    width = 1,       cr0.clk
		.reset                 (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_059_src_valid),                                                       //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_059_src_data),                                                        //   input,  width = 128,          .data
		.sink0_channel         (cmd_mux_059_src_channel),                                                     //   input,   width = 60,          .channel
		.sink0_startofpacket   (cmd_mux_059_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_059_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_059_src_ready),                                                       //  output,    width = 1,          .ready
		.source0_valid         (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_data),          //  output,  width = 128,          .data
		.source0_channel       (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_channel),       //  output,   width = 60,          .channel
		.source0_startofpacket (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (eth_gen_mon_11_avalon_universal_slave_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	address_decode_altera_merlin_demultiplexer_181_233qqei cmd_demux (
		.clk                 (clk_csr_clk_clk),                                                                    //   input,    width = 1,        clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1,  clk_reset.reset
		.sink_ready          (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel        (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_channel),       //   input,   width = 60,           .channel
		.sink_data           (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_data),          //   input,  width = 128,           .data
		.sink_startofpacket  (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket    (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid          (merlin_master_translator_0_avalon_universal_master_0_limiter_cmd_valid_data),        //   input,   width = 60, sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                               //   input,    width = 1,       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                               //  output,    width = 1,           .valid
		.src0_data           (cmd_demux_src0_data),                                                                //  output,  width = 128,           .data
		.src0_channel        (cmd_demux_src0_channel),                                                             //  output,   width = 60,           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                               //   input,    width = 1,       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                               //  output,    width = 1,           .valid
		.src1_data           (cmd_demux_src1_data),                                                                //  output,  width = 128,           .data
		.src1_channel        (cmd_demux_src1_channel),                                                             //  output,   width = 60,           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                               //   input,    width = 1,       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                               //  output,    width = 1,           .valid
		.src2_data           (cmd_demux_src2_data),                                                                //  output,  width = 128,           .data
		.src2_channel        (cmd_demux_src2_channel),                                                             //  output,   width = 60,           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                               //   input,    width = 1,       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                               //  output,    width = 1,           .valid
		.src3_data           (cmd_demux_src3_data),                                                                //  output,  width = 128,           .data
		.src3_channel        (cmd_demux_src3_channel),                                                             //  output,   width = 60,           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                               //   input,    width = 1,       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                               //  output,    width = 1,           .valid
		.src4_data           (cmd_demux_src4_data),                                                                //  output,  width = 128,           .data
		.src4_channel        (cmd_demux_src4_channel),                                                             //  output,   width = 60,           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                               //   input,    width = 1,       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                               //  output,    width = 1,           .valid
		.src5_data           (cmd_demux_src5_data),                                                                //  output,  width = 128,           .data
		.src5_channel        (cmd_demux_src5_channel),                                                             //  output,   width = 60,           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                               //   input,    width = 1,       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                               //  output,    width = 1,           .valid
		.src6_data           (cmd_demux_src6_data),                                                                //  output,  width = 128,           .data
		.src6_channel        (cmd_demux_src6_channel),                                                             //  output,   width = 60,           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                               //   input,    width = 1,       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                               //  output,    width = 1,           .valid
		.src7_data           (cmd_demux_src7_data),                                                                //  output,  width = 128,           .data
		.src7_channel        (cmd_demux_src7_channel),                                                             //  output,   width = 60,           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                               //   input,    width = 1,       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                               //  output,    width = 1,           .valid
		.src8_data           (cmd_demux_src8_data),                                                                //  output,  width = 128,           .data
		.src8_channel        (cmd_demux_src8_channel),                                                             //  output,   width = 60,           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                               //   input,    width = 1,       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                               //  output,    width = 1,           .valid
		.src9_data           (cmd_demux_src9_data),                                                                //  output,  width = 128,           .data
		.src9_channel        (cmd_demux_src9_channel),                                                             //  output,   width = 60,           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                                       //  output,    width = 1,           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                                         //  output,    width = 1,           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                                              //   input,    width = 1,      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                                              //  output,    width = 1,           .valid
		.src10_data          (cmd_demux_src10_data),                                                               //  output,  width = 128,           .data
		.src10_channel       (cmd_demux_src10_channel),                                                            //  output,   width = 60,           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                                              //   input,    width = 1,      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                                              //  output,    width = 1,           .valid
		.src11_data          (cmd_demux_src11_data),                                                               //  output,  width = 128,           .data
		.src11_channel       (cmd_demux_src11_channel),                                                            //  output,   width = 60,           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                                              //   input,    width = 1,      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                                              //  output,    width = 1,           .valid
		.src12_data          (cmd_demux_src12_data),                                                               //  output,  width = 128,           .data
		.src12_channel       (cmd_demux_src12_channel),                                                            //  output,   width = 60,           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                                              //   input,    width = 1,      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                                              //  output,    width = 1,           .valid
		.src13_data          (cmd_demux_src13_data),                                                               //  output,  width = 128,           .data
		.src13_channel       (cmd_demux_src13_channel),                                                            //  output,   width = 60,           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                                              //   input,    width = 1,      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                                              //  output,    width = 1,           .valid
		.src14_data          (cmd_demux_src14_data),                                                               //  output,  width = 128,           .data
		.src14_channel       (cmd_demux_src14_channel),                                                            //  output,   width = 60,           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                                              //   input,    width = 1,      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                                              //  output,    width = 1,           .valid
		.src15_data          (cmd_demux_src15_data),                                                               //  output,  width = 128,           .data
		.src15_channel       (cmd_demux_src15_channel),                                                            //  output,   width = 60,           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                                              //   input,    width = 1,      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                                              //  output,    width = 1,           .valid
		.src16_data          (cmd_demux_src16_data),                                                               //  output,  width = 128,           .data
		.src16_channel       (cmd_demux_src16_channel),                                                            //  output,   width = 60,           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                                              //   input,    width = 1,      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                                              //  output,    width = 1,           .valid
		.src17_data          (cmd_demux_src17_data),                                                               //  output,  width = 128,           .data
		.src17_channel       (cmd_demux_src17_channel),                                                            //  output,   width = 60,           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                                              //   input,    width = 1,      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                                              //  output,    width = 1,           .valid
		.src18_data          (cmd_demux_src18_data),                                                               //  output,  width = 128,           .data
		.src18_channel       (cmd_demux_src18_channel),                                                            //  output,   width = 60,           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                                              //   input,    width = 1,      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                                              //  output,    width = 1,           .valid
		.src19_data          (cmd_demux_src19_data),                                                               //  output,  width = 128,           .data
		.src19_channel       (cmd_demux_src19_channel),                                                            //  output,   width = 60,           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                                              //   input,    width = 1,      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                                              //  output,    width = 1,           .valid
		.src20_data          (cmd_demux_src20_data),                                                               //  output,  width = 128,           .data
		.src20_channel       (cmd_demux_src20_channel),                                                            //  output,   width = 60,           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                                              //   input,    width = 1,      src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                                              //  output,    width = 1,           .valid
		.src21_data          (cmd_demux_src21_data),                                                               //  output,  width = 128,           .data
		.src21_channel       (cmd_demux_src21_channel),                                                            //  output,   width = 60,           .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                                                              //   input,    width = 1,      src22.ready
		.src22_valid         (cmd_demux_src22_valid),                                                              //  output,    width = 1,           .valid
		.src22_data          (cmd_demux_src22_data),                                                               //  output,  width = 128,           .data
		.src22_channel       (cmd_demux_src22_channel),                                                            //  output,   width = 60,           .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                                                              //   input,    width = 1,      src23.ready
		.src23_valid         (cmd_demux_src23_valid),                                                              //  output,    width = 1,           .valid
		.src23_data          (cmd_demux_src23_data),                                                               //  output,  width = 128,           .data
		.src23_channel       (cmd_demux_src23_channel),                                                            //  output,   width = 60,           .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                                                              //   input,    width = 1,      src24.ready
		.src24_valid         (cmd_demux_src24_valid),                                                              //  output,    width = 1,           .valid
		.src24_data          (cmd_demux_src24_data),                                                               //  output,  width = 128,           .data
		.src24_channel       (cmd_demux_src24_channel),                                                            //  output,   width = 60,           .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                                                              //   input,    width = 1,      src25.ready
		.src25_valid         (cmd_demux_src25_valid),                                                              //  output,    width = 1,           .valid
		.src25_data          (cmd_demux_src25_data),                                                               //  output,  width = 128,           .data
		.src25_channel       (cmd_demux_src25_channel),                                                            //  output,   width = 60,           .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                                                              //   input,    width = 1,      src26.ready
		.src26_valid         (cmd_demux_src26_valid),                                                              //  output,    width = 1,           .valid
		.src26_data          (cmd_demux_src26_data),                                                               //  output,  width = 128,           .data
		.src26_channel       (cmd_demux_src26_channel),                                                            //  output,   width = 60,           .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                                                              //   input,    width = 1,      src27.ready
		.src27_valid         (cmd_demux_src27_valid),                                                              //  output,    width = 1,           .valid
		.src27_data          (cmd_demux_src27_data),                                                               //  output,  width = 128,           .data
		.src27_channel       (cmd_demux_src27_channel),                                                            //  output,   width = 60,           .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src28_ready         (cmd_demux_src28_ready),                                                              //   input,    width = 1,      src28.ready
		.src28_valid         (cmd_demux_src28_valid),                                                              //  output,    width = 1,           .valid
		.src28_data          (cmd_demux_src28_data),                                                               //  output,  width = 128,           .data
		.src28_channel       (cmd_demux_src28_channel),                                                            //  output,   width = 60,           .channel
		.src28_startofpacket (cmd_demux_src28_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src28_endofpacket   (cmd_demux_src28_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src29_ready         (cmd_demux_src29_ready),                                                              //   input,    width = 1,      src29.ready
		.src29_valid         (cmd_demux_src29_valid),                                                              //  output,    width = 1,           .valid
		.src29_data          (cmd_demux_src29_data),                                                               //  output,  width = 128,           .data
		.src29_channel       (cmd_demux_src29_channel),                                                            //  output,   width = 60,           .channel
		.src29_startofpacket (cmd_demux_src29_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src29_endofpacket   (cmd_demux_src29_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src30_ready         (cmd_demux_src30_ready),                                                              //   input,    width = 1,      src30.ready
		.src30_valid         (cmd_demux_src30_valid),                                                              //  output,    width = 1,           .valid
		.src30_data          (cmd_demux_src30_data),                                                               //  output,  width = 128,           .data
		.src30_channel       (cmd_demux_src30_channel),                                                            //  output,   width = 60,           .channel
		.src30_startofpacket (cmd_demux_src30_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src30_endofpacket   (cmd_demux_src30_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src31_ready         (cmd_demux_src31_ready),                                                              //   input,    width = 1,      src31.ready
		.src31_valid         (cmd_demux_src31_valid),                                                              //  output,    width = 1,           .valid
		.src31_data          (cmd_demux_src31_data),                                                               //  output,  width = 128,           .data
		.src31_channel       (cmd_demux_src31_channel),                                                            //  output,   width = 60,           .channel
		.src31_startofpacket (cmd_demux_src31_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src31_endofpacket   (cmd_demux_src31_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src32_ready         (cmd_demux_src32_ready),                                                              //   input,    width = 1,      src32.ready
		.src32_valid         (cmd_demux_src32_valid),                                                              //  output,    width = 1,           .valid
		.src32_data          (cmd_demux_src32_data),                                                               //  output,  width = 128,           .data
		.src32_channel       (cmd_demux_src32_channel),                                                            //  output,   width = 60,           .channel
		.src32_startofpacket (cmd_demux_src32_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src32_endofpacket   (cmd_demux_src32_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src33_ready         (cmd_demux_src33_ready),                                                              //   input,    width = 1,      src33.ready
		.src33_valid         (cmd_demux_src33_valid),                                                              //  output,    width = 1,           .valid
		.src33_data          (cmd_demux_src33_data),                                                               //  output,  width = 128,           .data
		.src33_channel       (cmd_demux_src33_channel),                                                            //  output,   width = 60,           .channel
		.src33_startofpacket (cmd_demux_src33_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src33_endofpacket   (cmd_demux_src33_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src34_ready         (cmd_demux_src34_ready),                                                              //   input,    width = 1,      src34.ready
		.src34_valid         (cmd_demux_src34_valid),                                                              //  output,    width = 1,           .valid
		.src34_data          (cmd_demux_src34_data),                                                               //  output,  width = 128,           .data
		.src34_channel       (cmd_demux_src34_channel),                                                            //  output,   width = 60,           .channel
		.src34_startofpacket (cmd_demux_src34_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src34_endofpacket   (cmd_demux_src34_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src35_ready         (cmd_demux_src35_ready),                                                              //   input,    width = 1,      src35.ready
		.src35_valid         (cmd_demux_src35_valid),                                                              //  output,    width = 1,           .valid
		.src35_data          (cmd_demux_src35_data),                                                               //  output,  width = 128,           .data
		.src35_channel       (cmd_demux_src35_channel),                                                            //  output,   width = 60,           .channel
		.src35_startofpacket (cmd_demux_src35_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src35_endofpacket   (cmd_demux_src35_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src36_ready         (cmd_demux_src36_ready),                                                              //   input,    width = 1,      src36.ready
		.src36_valid         (cmd_demux_src36_valid),                                                              //  output,    width = 1,           .valid
		.src36_data          (cmd_demux_src36_data),                                                               //  output,  width = 128,           .data
		.src36_channel       (cmd_demux_src36_channel),                                                            //  output,   width = 60,           .channel
		.src36_startofpacket (cmd_demux_src36_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src36_endofpacket   (cmd_demux_src36_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src37_ready         (cmd_demux_src37_ready),                                                              //   input,    width = 1,      src37.ready
		.src37_valid         (cmd_demux_src37_valid),                                                              //  output,    width = 1,           .valid
		.src37_data          (cmd_demux_src37_data),                                                               //  output,  width = 128,           .data
		.src37_channel       (cmd_demux_src37_channel),                                                            //  output,   width = 60,           .channel
		.src37_startofpacket (cmd_demux_src37_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src37_endofpacket   (cmd_demux_src37_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src38_ready         (cmd_demux_src38_ready),                                                              //   input,    width = 1,      src38.ready
		.src38_valid         (cmd_demux_src38_valid),                                                              //  output,    width = 1,           .valid
		.src38_data          (cmd_demux_src38_data),                                                               //  output,  width = 128,           .data
		.src38_channel       (cmd_demux_src38_channel),                                                            //  output,   width = 60,           .channel
		.src38_startofpacket (cmd_demux_src38_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src38_endofpacket   (cmd_demux_src38_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src39_ready         (cmd_demux_src39_ready),                                                              //   input,    width = 1,      src39.ready
		.src39_valid         (cmd_demux_src39_valid),                                                              //  output,    width = 1,           .valid
		.src39_data          (cmd_demux_src39_data),                                                               //  output,  width = 128,           .data
		.src39_channel       (cmd_demux_src39_channel),                                                            //  output,   width = 60,           .channel
		.src39_startofpacket (cmd_demux_src39_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src39_endofpacket   (cmd_demux_src39_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src40_ready         (cmd_demux_src40_ready),                                                              //   input,    width = 1,      src40.ready
		.src40_valid         (cmd_demux_src40_valid),                                                              //  output,    width = 1,           .valid
		.src40_data          (cmd_demux_src40_data),                                                               //  output,  width = 128,           .data
		.src40_channel       (cmd_demux_src40_channel),                                                            //  output,   width = 60,           .channel
		.src40_startofpacket (cmd_demux_src40_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src40_endofpacket   (cmd_demux_src40_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src41_ready         (cmd_demux_src41_ready),                                                              //   input,    width = 1,      src41.ready
		.src41_valid         (cmd_demux_src41_valid),                                                              //  output,    width = 1,           .valid
		.src41_data          (cmd_demux_src41_data),                                                               //  output,  width = 128,           .data
		.src41_channel       (cmd_demux_src41_channel),                                                            //  output,   width = 60,           .channel
		.src41_startofpacket (cmd_demux_src41_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src41_endofpacket   (cmd_demux_src41_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src42_ready         (cmd_demux_src42_ready),                                                              //   input,    width = 1,      src42.ready
		.src42_valid         (cmd_demux_src42_valid),                                                              //  output,    width = 1,           .valid
		.src42_data          (cmd_demux_src42_data),                                                               //  output,  width = 128,           .data
		.src42_channel       (cmd_demux_src42_channel),                                                            //  output,   width = 60,           .channel
		.src42_startofpacket (cmd_demux_src42_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src42_endofpacket   (cmd_demux_src42_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src43_ready         (cmd_demux_src43_ready),                                                              //   input,    width = 1,      src43.ready
		.src43_valid         (cmd_demux_src43_valid),                                                              //  output,    width = 1,           .valid
		.src43_data          (cmd_demux_src43_data),                                                               //  output,  width = 128,           .data
		.src43_channel       (cmd_demux_src43_channel),                                                            //  output,   width = 60,           .channel
		.src43_startofpacket (cmd_demux_src43_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src43_endofpacket   (cmd_demux_src43_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src44_ready         (cmd_demux_src44_ready),                                                              //   input,    width = 1,      src44.ready
		.src44_valid         (cmd_demux_src44_valid),                                                              //  output,    width = 1,           .valid
		.src44_data          (cmd_demux_src44_data),                                                               //  output,  width = 128,           .data
		.src44_channel       (cmd_demux_src44_channel),                                                            //  output,   width = 60,           .channel
		.src44_startofpacket (cmd_demux_src44_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src44_endofpacket   (cmd_demux_src44_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src45_ready         (cmd_demux_src45_ready),                                                              //   input,    width = 1,      src45.ready
		.src45_valid         (cmd_demux_src45_valid),                                                              //  output,    width = 1,           .valid
		.src45_data          (cmd_demux_src45_data),                                                               //  output,  width = 128,           .data
		.src45_channel       (cmd_demux_src45_channel),                                                            //  output,   width = 60,           .channel
		.src45_startofpacket (cmd_demux_src45_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src45_endofpacket   (cmd_demux_src45_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src46_ready         (cmd_demux_src46_ready),                                                              //   input,    width = 1,      src46.ready
		.src46_valid         (cmd_demux_src46_valid),                                                              //  output,    width = 1,           .valid
		.src46_data          (cmd_demux_src46_data),                                                               //  output,  width = 128,           .data
		.src46_channel       (cmd_demux_src46_channel),                                                            //  output,   width = 60,           .channel
		.src46_startofpacket (cmd_demux_src46_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src46_endofpacket   (cmd_demux_src46_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src47_ready         (cmd_demux_src47_ready),                                                              //   input,    width = 1,      src47.ready
		.src47_valid         (cmd_demux_src47_valid),                                                              //  output,    width = 1,           .valid
		.src47_data          (cmd_demux_src47_data),                                                               //  output,  width = 128,           .data
		.src47_channel       (cmd_demux_src47_channel),                                                            //  output,   width = 60,           .channel
		.src47_startofpacket (cmd_demux_src47_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src47_endofpacket   (cmd_demux_src47_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src48_ready         (cmd_demux_src48_ready),                                                              //   input,    width = 1,      src48.ready
		.src48_valid         (cmd_demux_src48_valid),                                                              //  output,    width = 1,           .valid
		.src48_data          (cmd_demux_src48_data),                                                               //  output,  width = 128,           .data
		.src48_channel       (cmd_demux_src48_channel),                                                            //  output,   width = 60,           .channel
		.src48_startofpacket (cmd_demux_src48_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src48_endofpacket   (cmd_demux_src48_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src49_ready         (cmd_demux_src49_ready),                                                              //   input,    width = 1,      src49.ready
		.src49_valid         (cmd_demux_src49_valid),                                                              //  output,    width = 1,           .valid
		.src49_data          (cmd_demux_src49_data),                                                               //  output,  width = 128,           .data
		.src49_channel       (cmd_demux_src49_channel),                                                            //  output,   width = 60,           .channel
		.src49_startofpacket (cmd_demux_src49_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src49_endofpacket   (cmd_demux_src49_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src50_ready         (cmd_demux_src50_ready),                                                              //   input,    width = 1,      src50.ready
		.src50_valid         (cmd_demux_src50_valid),                                                              //  output,    width = 1,           .valid
		.src50_data          (cmd_demux_src50_data),                                                               //  output,  width = 128,           .data
		.src50_channel       (cmd_demux_src50_channel),                                                            //  output,   width = 60,           .channel
		.src50_startofpacket (cmd_demux_src50_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src50_endofpacket   (cmd_demux_src50_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src51_ready         (cmd_demux_src51_ready),                                                              //   input,    width = 1,      src51.ready
		.src51_valid         (cmd_demux_src51_valid),                                                              //  output,    width = 1,           .valid
		.src51_data          (cmd_demux_src51_data),                                                               //  output,  width = 128,           .data
		.src51_channel       (cmd_demux_src51_channel),                                                            //  output,   width = 60,           .channel
		.src51_startofpacket (cmd_demux_src51_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src51_endofpacket   (cmd_demux_src51_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src52_ready         (cmd_demux_src52_ready),                                                              //   input,    width = 1,      src52.ready
		.src52_valid         (cmd_demux_src52_valid),                                                              //  output,    width = 1,           .valid
		.src52_data          (cmd_demux_src52_data),                                                               //  output,  width = 128,           .data
		.src52_channel       (cmd_demux_src52_channel),                                                            //  output,   width = 60,           .channel
		.src52_startofpacket (cmd_demux_src52_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src52_endofpacket   (cmd_demux_src52_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src53_ready         (cmd_demux_src53_ready),                                                              //   input,    width = 1,      src53.ready
		.src53_valid         (cmd_demux_src53_valid),                                                              //  output,    width = 1,           .valid
		.src53_data          (cmd_demux_src53_data),                                                               //  output,  width = 128,           .data
		.src53_channel       (cmd_demux_src53_channel),                                                            //  output,   width = 60,           .channel
		.src53_startofpacket (cmd_demux_src53_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src53_endofpacket   (cmd_demux_src53_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src54_ready         (cmd_demux_src54_ready),                                                              //   input,    width = 1,      src54.ready
		.src54_valid         (cmd_demux_src54_valid),                                                              //  output,    width = 1,           .valid
		.src54_data          (cmd_demux_src54_data),                                                               //  output,  width = 128,           .data
		.src54_channel       (cmd_demux_src54_channel),                                                            //  output,   width = 60,           .channel
		.src54_startofpacket (cmd_demux_src54_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src54_endofpacket   (cmd_demux_src54_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src55_ready         (cmd_demux_src55_ready),                                                              //   input,    width = 1,      src55.ready
		.src55_valid         (cmd_demux_src55_valid),                                                              //  output,    width = 1,           .valid
		.src55_data          (cmd_demux_src55_data),                                                               //  output,  width = 128,           .data
		.src55_channel       (cmd_demux_src55_channel),                                                            //  output,   width = 60,           .channel
		.src55_startofpacket (cmd_demux_src55_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src55_endofpacket   (cmd_demux_src55_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src56_ready         (cmd_demux_src56_ready),                                                              //   input,    width = 1,      src56.ready
		.src56_valid         (cmd_demux_src56_valid),                                                              //  output,    width = 1,           .valid
		.src56_data          (cmd_demux_src56_data),                                                               //  output,  width = 128,           .data
		.src56_channel       (cmd_demux_src56_channel),                                                            //  output,   width = 60,           .channel
		.src56_startofpacket (cmd_demux_src56_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src56_endofpacket   (cmd_demux_src56_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src57_ready         (cmd_demux_src57_ready),                                                              //   input,    width = 1,      src57.ready
		.src57_valid         (cmd_demux_src57_valid),                                                              //  output,    width = 1,           .valid
		.src57_data          (cmd_demux_src57_data),                                                               //  output,  width = 128,           .data
		.src57_channel       (cmd_demux_src57_channel),                                                            //  output,   width = 60,           .channel
		.src57_startofpacket (cmd_demux_src57_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src57_endofpacket   (cmd_demux_src57_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src58_ready         (cmd_demux_src58_ready),                                                              //   input,    width = 1,      src58.ready
		.src58_valid         (cmd_demux_src58_valid),                                                              //  output,    width = 1,           .valid
		.src58_data          (cmd_demux_src58_data),                                                               //  output,  width = 128,           .data
		.src58_channel       (cmd_demux_src58_channel),                                                            //  output,   width = 60,           .channel
		.src58_startofpacket (cmd_demux_src58_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src58_endofpacket   (cmd_demux_src58_endofpacket),                                                        //  output,    width = 1,           .endofpacket
		.src59_ready         (cmd_demux_src59_ready),                                                              //   input,    width = 1,      src59.ready
		.src59_valid         (cmd_demux_src59_valid),                                                              //  output,    width = 1,           .valid
		.src59_data          (cmd_demux_src59_data),                                                               //  output,  width = 128,           .data
		.src59_channel       (cmd_demux_src59_channel),                                                            //  output,   width = 60,           .channel
		.src59_startofpacket (cmd_demux_src59_startofpacket),                                                      //  output,    width = 1,           .startofpacket
		.src59_endofpacket   (cmd_demux_src59_endofpacket)                                                         //  output,    width = 1,           .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                            //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                             //  output,  width = 128,          .data
		.src_channel         (cmd_mux_src_channel),                                          //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                       //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src0_data),                                          //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                    //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_001 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_001_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                       //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src1_data),                                          //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                    //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_002 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_002_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                            //   input,   width = 60,          .channel
		.sink0_data          (crosser_out_data),                               //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_003 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_003_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_001_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_004 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_004_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_002_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_002_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_005 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_005_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                       //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src5_data),                                          //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                    //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_006 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_006_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                       //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src6_data),                                          //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                                    //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_007 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_007_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_003_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_003_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_008 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_008_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_008_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_004_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_004_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_009 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_009_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_009_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_009_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_005_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_005_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_010 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_010_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_010_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src10_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_011 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_011_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_011_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src11_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_012 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_012_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_012_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_012_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_006_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_006_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_013 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_013_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_013_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_013_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_007_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_007_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_014 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_014_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_014_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_014_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_008_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_008_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_015 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_015_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_015_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src15_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src15_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_016 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_016_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_016_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src16_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src16_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_017 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_017_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_017_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_017_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_009_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_009_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_018 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_018_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_018_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_018_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_010_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_010_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_019 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_019_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_019_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_019_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_011_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_011_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_020 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_020_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_020_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_020_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src20_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src20_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_021 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_021_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_021_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_021_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src21_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src21_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_022 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_022_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_022_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_022_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_012_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_012_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_023 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_023_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_023_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_023_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_013_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_013_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_024 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_024_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_024_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_024_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_014_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_014_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_014_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_014_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_014_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_014_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_025 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_025_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_025_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src25_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src25_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_026 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_026_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_026_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src26_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src26_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_027 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_027_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_027_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_027_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_015_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_015_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_015_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_015_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_015_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_015_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_028 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_028_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_028_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_028_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_016_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_016_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_016_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_016_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_016_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_016_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_029 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_029_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_029_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_029_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_017_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_017_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_017_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_017_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_017_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_017_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_030 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_030_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_030_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_030_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src30_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src30_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src30_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src30_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src30_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src30_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_031 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_031_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_031_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_031_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src31_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src31_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src31_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src31_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src31_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src31_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_032 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_032_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_032_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_032_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_018_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_018_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_018_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_018_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_018_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_018_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_033 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_033_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_033_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_033_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_019_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_019_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_019_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_019_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_019_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_019_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_034 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_034_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_034_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_034_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_020_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_020_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_020_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_020_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_020_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_020_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_035 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_035_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_035_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_035_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src35_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src35_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src35_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src35_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src35_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src35_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_036 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_036_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_036_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_036_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src36_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src36_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src36_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src36_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src36_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src36_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_037 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_037_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_037_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_037_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_037_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_037_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_037_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_021_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_021_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_021_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_021_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_021_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_021_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_038 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_038_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_038_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_038_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_038_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_038_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_038_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_022_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_022_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_022_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_022_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_022_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_022_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_039 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_039_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_039_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_039_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_039_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_039_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_039_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_023_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_023_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_023_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_023_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_023_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_023_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_040 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_040_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_040_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_040_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_040_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_040_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_040_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src40_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src40_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src40_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src40_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src40_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src40_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_041 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_041_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_041_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_041_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_041_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_041_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_041_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src41_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src41_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src41_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src41_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src41_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src41_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_042 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_042_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_042_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_042_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_042_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_042_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_042_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_024_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_024_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_024_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_024_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_024_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_024_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_043 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_043_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_043_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_043_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_043_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_043_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_043_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_025_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_025_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_025_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_025_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_025_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_025_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_044 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_044_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_044_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_044_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_044_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_044_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_044_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_026_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_026_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_026_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_026_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_026_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_026_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_045 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_045_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_045_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_045_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_045_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_045_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_045_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src45_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src45_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src45_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src45_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src45_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src45_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_046 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_046_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_046_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_046_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_046_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_046_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_046_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src46_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src46_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src46_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src46_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src46_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src46_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_047 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_047_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_047_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_047_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_047_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_047_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_047_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_027_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_027_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_027_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_027_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_027_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_027_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_048 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_048_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_048_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_048_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_048_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_048_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_048_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_028_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_028_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_028_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_028_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_028_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_028_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_049 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_049_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_049_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_049_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_049_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_049_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_049_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_029_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_029_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_029_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_029_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_029_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_029_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_050 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_050_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_050_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_050_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_050_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_050_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_050_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src50_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src50_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src50_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src50_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src50_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src50_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_051 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_051_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_051_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_051_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_051_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_051_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_051_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src51_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src51_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src51_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src51_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src51_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src51_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_052 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_052_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_052_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_052_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_052_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_052_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_052_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_030_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_030_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_030_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_030_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_030_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_030_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_053 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_053_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_053_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_053_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_053_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_053_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_053_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_031_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_031_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_031_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_031_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_031_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_031_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_054 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_054_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_054_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_054_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_054_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_054_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_054_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_032_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_032_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_032_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_032_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_032_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_032_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_055 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_055_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_055_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_055_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_055_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_055_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_055_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src55_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src55_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src55_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src55_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src55_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src55_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_056 (
		.clk                 (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_056_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_056_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_056_src_data),                                         //  output,  width = 128,          .data
		.src_channel         (cmd_mux_056_src_channel),                                      //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_056_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_056_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src56_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src56_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src56_channel),                                      //   input,   width = 60,          .channel
		.sink0_data          (cmd_demux_src56_data),                                         //   input,  width = 128,          .data
		.sink0_startofpacket (cmd_demux_src56_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src56_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_057 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_057_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_057_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_057_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_057_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_057_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_057_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_033_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_033_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_033_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_033_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_033_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_033_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_058 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_058_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_058_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_058_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_058_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_058_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_058_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_034_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_034_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_034_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_034_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_034_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_034_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_bd7lhwa cmd_mux_059 (
		.clk                 (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_059_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_059_src_valid),                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_059_src_data),                           //  output,  width = 128,          .data
		.src_channel         (cmd_mux_059_src_channel),                        //  output,   width = 60,          .channel
		.src_startofpacket   (cmd_mux_059_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_059_src_endofpacket),                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_035_out_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_035_out_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (crosser_035_out_channel),                        //   input,   width = 60,          .channel
		.sink0_data          (crosser_035_out_data),                           //   input,  width = 128,          .data
		.sink0_startofpacket (crosser_035_out_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_035_out_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_001_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                         //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                         //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                          //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_src0_channel),                                       //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_001 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_002_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_002 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_003_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_003 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_004_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_004 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_005_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_005 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_006_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_006_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_006 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_007_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_007_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_007 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_008_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_008 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_009_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_009 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_010_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_010 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_011_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_011_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_011_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_011_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_011_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_010_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_011 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_012_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_012_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_012_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_012_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_012_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_011_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_012 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_013_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_013_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_013_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_012_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_012_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_013 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_014_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_014_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_014_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_013_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_013_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_014 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_015_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_015_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_015_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_014_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_014_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_015 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_016_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_016_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_016_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_016_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_016_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_015_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_016 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_017_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_017_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_017_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_017_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_017_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_016_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_016_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_017 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_018_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_018_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_018_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_018_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_018_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_017_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_017_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_018 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_019_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_019_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_019_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_019_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_019_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_018_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_018_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_019 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_020_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_020_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_020_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_020_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_020_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_019_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_019_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_020 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_021_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_021_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_021_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_021_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_021_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_020_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_020_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_021 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_022_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_022_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_022_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_022_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_022_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_021_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_021_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_022 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_023_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_023_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_023_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_023_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_023_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_022_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_022_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_023 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_024_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_024_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_024_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_024_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_024_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_023_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_023_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_024 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_025_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_025_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_025_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_025_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_025_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_024_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_024_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_025 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_026_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_026_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_026_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_026_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_026_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_025_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_025_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_026 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_027_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_027_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_027_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_027_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_027_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_026_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_026_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_027 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_028_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_028_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_028_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_028_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_028_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_027_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_027_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_028 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_029_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_029_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_029_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_029_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_029_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_028_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_028_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_029 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_030_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_030_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_030_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_030_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_030_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_029_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_029_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_030 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_031_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_031_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_031_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_031_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_031_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_030_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_030_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_031 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_032_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_032_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_032_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_032_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_032_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_031_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_031_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_032 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_033_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_033_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_033_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_033_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_033_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_032_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_032_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_033 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_034_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_034_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_034_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_034_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_034_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_033_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_033_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_034 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_035_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_035_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_035_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_035_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_035_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_034_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_034_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_035 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_036_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_036_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_036_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_036_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_036_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_035_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_035_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_036 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_037_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_037_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_037_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_037_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_037_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_036_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_036_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_037 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_038_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_038_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_038_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_038_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_038_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_037_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_037_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_037_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_037_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_037_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_037_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_038 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_039_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_039_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_039_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_039_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_039_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_038_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_038_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_038_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_038_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_038_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_038_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_039 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_040_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_040_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_040_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_040_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_040_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_040_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_039_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_039_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_039_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_039_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_039_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_039_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_040 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_041_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_041_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_041_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_041_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_041_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_041_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_040_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_040_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_040_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_040_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_040_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_040_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_041 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_042_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_042_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_042_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_042_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_042_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_042_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_041_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_041_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_041_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_041_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_041_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_041_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_042 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_043_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_043_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_043_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_043_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_043_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_043_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_042_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_042_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_042_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_042_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_042_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_042_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_043 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_044_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_044_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_044_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_044_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_044_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_044_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_043_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_043_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_043_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_043_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_043_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_043_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_044 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_045_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_045_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_045_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_045_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_045_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_045_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_044_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_044_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_044_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_044_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_044_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_044_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_045 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_046_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_046_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_046_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_046_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_046_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_046_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_045_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_045_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_045_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_045_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_045_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_045_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_046 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_047_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_047_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_047_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_047_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_047_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_046_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_046_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_046_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_046_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_046_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_046_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_047 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_048_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_048_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_048_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_048_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_048_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_047_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_047_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_047_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_047_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_047_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_047_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_048 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_049_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_049_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_049_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_049_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_049_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_049_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_048_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_048_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_048_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_048_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_048_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_048_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_049 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_050_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_050_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_050_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_050_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_050_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_050_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_049_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_049_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_049_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_049_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_049_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_049_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_050 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_051_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_051_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_051_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_051_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_051_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_051_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_050_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_050_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_050_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_050_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_050_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_050_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_051 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_052_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_052_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_052_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_052_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_052_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_052_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_051_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_051_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_051_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_051_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_051_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_051_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_052 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_053_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_053_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_053_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_053_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_053_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_053_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_052_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_052_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_052_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_052_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_052_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_052_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_053 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_054_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_054_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_054_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_054_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_054_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_054_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_053_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_053_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_053_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_053_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_053_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_053_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_054 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_055_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_055_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_055_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_055_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_055_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_055_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_054_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_054_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_054_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_054_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_054_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_054_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_055 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_056_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_056_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_056_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_056_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_056_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_056_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_055_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_055_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_055_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_055_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_055_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_055_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_056 (
		.clk                (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_057_src_ready),                                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_057_src_channel),                                       //   input,   width = 60,          .channel
		.sink_data          (router_057_src_data),                                          //   input,  width = 128,          .data
		.sink_startofpacket (router_057_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_057_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_057_src_valid),                                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_056_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_056_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_056_src0_data),                                      //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_056_src0_channel),                                   //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_056_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_056_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_057 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_058_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_058_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_058_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_058_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_058_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_058_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_057_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_057_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_057_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_057_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_057_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_057_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_058 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_059_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_059_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_059_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_059_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_059_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_059_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_058_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_058_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_058_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_058_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_058_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_058_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_demultiplexer_181_qi3nw4i rsp_demux_059 (
		.clk                (tx_xcvr_half_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_060_src_ready),                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_060_src_channel),                         //   input,   width = 60,          .channel
		.sink_data          (router_060_src_data),                            //   input,  width = 128,          .data
		.sink_startofpacket (router_060_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_060_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_060_src_valid),                           //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_059_src0_ready),                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_059_src0_valid),                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_059_src0_data),                        //  output,  width = 128,          .data
		.src0_channel       (rsp_demux_059_src0_channel),                     //  output,   width = 60,          .channel
		.src0_startofpacket (rsp_demux_059_src0_startofpacket),               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_059_src0_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	address_decode_altera_merlin_multiplexer_181_tzqtjwa rsp_mux (
		.clk                  (clk_csr_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset                (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid            (rsp_mux_src_valid),                                            //  output,    width = 1,          .valid
		.src_data             (rsp_mux_src_data),                                             //  output,  width = 128,          .data
		.src_channel          (rsp_mux_src_channel),                                          //  output,   width = 60,          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                         //  output,    width = 1,     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                         //   input,    width = 1,          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                       //   input,   width = 60,          .channel
		.sink0_data           (rsp_demux_src0_data),                                          //   input,  width = 128,          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                     //  output,    width = 1,     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                     //   input,    width = 1,          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                   //   input,   width = 60,          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                      //   input,  width = 128,          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink2_ready          (crosser_036_out_ready),                                        //  output,    width = 1,     sink2.ready
		.sink2_valid          (crosser_036_out_valid),                                        //   input,    width = 1,          .valid
		.sink2_channel        (crosser_036_out_channel),                                      //   input,   width = 60,          .channel
		.sink2_data           (crosser_036_out_data),                                         //   input,  width = 128,          .data
		.sink2_startofpacket  (crosser_036_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink2_endofpacket    (crosser_036_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink3_ready          (crosser_037_out_ready),                                        //  output,    width = 1,     sink3.ready
		.sink3_valid          (crosser_037_out_valid),                                        //   input,    width = 1,          .valid
		.sink3_channel        (crosser_037_out_channel),                                      //   input,   width = 60,          .channel
		.sink3_data           (crosser_037_out_data),                                         //   input,  width = 128,          .data
		.sink3_startofpacket  (crosser_037_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink3_endofpacket    (crosser_037_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink4_ready          (crosser_038_out_ready),                                        //  output,    width = 1,     sink4.ready
		.sink4_valid          (crosser_038_out_valid),                                        //   input,    width = 1,          .valid
		.sink4_channel        (crosser_038_out_channel),                                      //   input,   width = 60,          .channel
		.sink4_data           (crosser_038_out_data),                                         //   input,  width = 128,          .data
		.sink4_startofpacket  (crosser_038_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink4_endofpacket    (crosser_038_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                     //  output,    width = 1,     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                     //   input,    width = 1,          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                   //   input,   width = 60,          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                      //   input,  width = 128,          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                     //  output,    width = 1,     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                     //   input,    width = 1,          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                   //   input,   width = 60,          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                      //   input,  width = 128,          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink7_ready          (crosser_039_out_ready),                                        //  output,    width = 1,     sink7.ready
		.sink7_valid          (crosser_039_out_valid),                                        //   input,    width = 1,          .valid
		.sink7_channel        (crosser_039_out_channel),                                      //   input,   width = 60,          .channel
		.sink7_data           (crosser_039_out_data),                                         //   input,  width = 128,          .data
		.sink7_startofpacket  (crosser_039_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink7_endofpacket    (crosser_039_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink8_ready          (crosser_040_out_ready),                                        //  output,    width = 1,     sink8.ready
		.sink8_valid          (crosser_040_out_valid),                                        //   input,    width = 1,          .valid
		.sink8_channel        (crosser_040_out_channel),                                      //   input,   width = 60,          .channel
		.sink8_data           (crosser_040_out_data),                                         //   input,  width = 128,          .data
		.sink8_startofpacket  (crosser_040_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink8_endofpacket    (crosser_040_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink9_ready          (crosser_041_out_ready),                                        //  output,    width = 1,     sink9.ready
		.sink9_valid          (crosser_041_out_valid),                                        //   input,    width = 1,          .valid
		.sink9_channel        (crosser_041_out_channel),                                      //   input,   width = 60,          .channel
		.sink9_data           (crosser_041_out_data),                                         //   input,  width = 128,          .data
		.sink9_startofpacket  (crosser_041_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink9_endofpacket    (crosser_041_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                     //  output,    width = 1,    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                     //   input,    width = 1,          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                   //   input,   width = 60,          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                      //   input,  width = 128,          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                     //  output,    width = 1,    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                     //   input,    width = 1,          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                   //   input,   width = 60,          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                      //   input,  width = 128,          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink12_ready         (crosser_042_out_ready),                                        //  output,    width = 1,    sink12.ready
		.sink12_valid         (crosser_042_out_valid),                                        //   input,    width = 1,          .valid
		.sink12_channel       (crosser_042_out_channel),                                      //   input,   width = 60,          .channel
		.sink12_data          (crosser_042_out_data),                                         //   input,  width = 128,          .data
		.sink12_startofpacket (crosser_042_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink12_endofpacket   (crosser_042_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink13_ready         (crosser_043_out_ready),                                        //  output,    width = 1,    sink13.ready
		.sink13_valid         (crosser_043_out_valid),                                        //   input,    width = 1,          .valid
		.sink13_channel       (crosser_043_out_channel),                                      //   input,   width = 60,          .channel
		.sink13_data          (crosser_043_out_data),                                         //   input,  width = 128,          .data
		.sink13_startofpacket (crosser_043_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink13_endofpacket   (crosser_043_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink14_ready         (crosser_044_out_ready),                                        //  output,    width = 1,    sink14.ready
		.sink14_valid         (crosser_044_out_valid),                                        //   input,    width = 1,          .valid
		.sink14_channel       (crosser_044_out_channel),                                      //   input,   width = 60,          .channel
		.sink14_data          (crosser_044_out_data),                                         //   input,  width = 128,          .data
		.sink14_startofpacket (crosser_044_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink14_endofpacket   (crosser_044_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                     //  output,    width = 1,    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                     //   input,    width = 1,          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                   //   input,   width = 60,          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                      //   input,  width = 128,          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                     //  output,    width = 1,    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                     //   input,    width = 1,          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                   //   input,   width = 60,          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                      //   input,  width = 128,          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink17_ready         (crosser_045_out_ready),                                        //  output,    width = 1,    sink17.ready
		.sink17_valid         (crosser_045_out_valid),                                        //   input,    width = 1,          .valid
		.sink17_channel       (crosser_045_out_channel),                                      //   input,   width = 60,          .channel
		.sink17_data          (crosser_045_out_data),                                         //   input,  width = 128,          .data
		.sink17_startofpacket (crosser_045_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink17_endofpacket   (crosser_045_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink18_ready         (crosser_046_out_ready),                                        //  output,    width = 1,    sink18.ready
		.sink18_valid         (crosser_046_out_valid),                                        //   input,    width = 1,          .valid
		.sink18_channel       (crosser_046_out_channel),                                      //   input,   width = 60,          .channel
		.sink18_data          (crosser_046_out_data),                                         //   input,  width = 128,          .data
		.sink18_startofpacket (crosser_046_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink18_endofpacket   (crosser_046_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink19_ready         (crosser_047_out_ready),                                        //  output,    width = 1,    sink19.ready
		.sink19_valid         (crosser_047_out_valid),                                        //   input,    width = 1,          .valid
		.sink19_channel       (crosser_047_out_channel),                                      //   input,   width = 60,          .channel
		.sink19_data          (crosser_047_out_data),                                         //   input,  width = 128,          .data
		.sink19_startofpacket (crosser_047_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink19_endofpacket   (crosser_047_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                     //  output,    width = 1,    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                     //   input,    width = 1,          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                   //   input,   width = 60,          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                      //   input,  width = 128,          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                     //  output,    width = 1,    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                     //   input,    width = 1,          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                   //   input,   width = 60,          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                      //   input,  width = 128,          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink22_ready         (crosser_048_out_ready),                                        //  output,    width = 1,    sink22.ready
		.sink22_valid         (crosser_048_out_valid),                                        //   input,    width = 1,          .valid
		.sink22_channel       (crosser_048_out_channel),                                      //   input,   width = 60,          .channel
		.sink22_data          (crosser_048_out_data),                                         //   input,  width = 128,          .data
		.sink22_startofpacket (crosser_048_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink22_endofpacket   (crosser_048_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink23_ready         (crosser_049_out_ready),                                        //  output,    width = 1,    sink23.ready
		.sink23_valid         (crosser_049_out_valid),                                        //   input,    width = 1,          .valid
		.sink23_channel       (crosser_049_out_channel),                                      //   input,   width = 60,          .channel
		.sink23_data          (crosser_049_out_data),                                         //   input,  width = 128,          .data
		.sink23_startofpacket (crosser_049_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink23_endofpacket   (crosser_049_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink24_ready         (crosser_050_out_ready),                                        //  output,    width = 1,    sink24.ready
		.sink24_valid         (crosser_050_out_valid),                                        //   input,    width = 1,          .valid
		.sink24_channel       (crosser_050_out_channel),                                      //   input,   width = 60,          .channel
		.sink24_data          (crosser_050_out_data),                                         //   input,  width = 128,          .data
		.sink24_startofpacket (crosser_050_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink24_endofpacket   (crosser_050_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                                     //  output,    width = 1,    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                                     //   input,    width = 1,          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                                   //   input,   width = 60,          .channel
		.sink25_data          (rsp_demux_025_src0_data),                                      //   input,  width = 128,          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                                     //  output,    width = 1,    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                                     //   input,    width = 1,          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                                   //   input,   width = 60,          .channel
		.sink26_data          (rsp_demux_026_src0_data),                                      //   input,  width = 128,          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink27_ready         (crosser_051_out_ready),                                        //  output,    width = 1,    sink27.ready
		.sink27_valid         (crosser_051_out_valid),                                        //   input,    width = 1,          .valid
		.sink27_channel       (crosser_051_out_channel),                                      //   input,   width = 60,          .channel
		.sink27_data          (crosser_051_out_data),                                         //   input,  width = 128,          .data
		.sink27_startofpacket (crosser_051_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink27_endofpacket   (crosser_051_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink28_ready         (crosser_052_out_ready),                                        //  output,    width = 1,    sink28.ready
		.sink28_valid         (crosser_052_out_valid),                                        //   input,    width = 1,          .valid
		.sink28_channel       (crosser_052_out_channel),                                      //   input,   width = 60,          .channel
		.sink28_data          (crosser_052_out_data),                                         //   input,  width = 128,          .data
		.sink28_startofpacket (crosser_052_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink28_endofpacket   (crosser_052_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink29_ready         (crosser_053_out_ready),                                        //  output,    width = 1,    sink29.ready
		.sink29_valid         (crosser_053_out_valid),                                        //   input,    width = 1,          .valid
		.sink29_channel       (crosser_053_out_channel),                                      //   input,   width = 60,          .channel
		.sink29_data          (crosser_053_out_data),                                         //   input,  width = 128,          .data
		.sink29_startofpacket (crosser_053_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink29_endofpacket   (crosser_053_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink30_ready         (rsp_demux_030_src0_ready),                                     //  output,    width = 1,    sink30.ready
		.sink30_valid         (rsp_demux_030_src0_valid),                                     //   input,    width = 1,          .valid
		.sink30_channel       (rsp_demux_030_src0_channel),                                   //   input,   width = 60,          .channel
		.sink30_data          (rsp_demux_030_src0_data),                                      //   input,  width = 128,          .data
		.sink30_startofpacket (rsp_demux_030_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink30_endofpacket   (rsp_demux_030_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink31_ready         (rsp_demux_031_src0_ready),                                     //  output,    width = 1,    sink31.ready
		.sink31_valid         (rsp_demux_031_src0_valid),                                     //   input,    width = 1,          .valid
		.sink31_channel       (rsp_demux_031_src0_channel),                                   //   input,   width = 60,          .channel
		.sink31_data          (rsp_demux_031_src0_data),                                      //   input,  width = 128,          .data
		.sink31_startofpacket (rsp_demux_031_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink31_endofpacket   (rsp_demux_031_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink32_ready         (crosser_054_out_ready),                                        //  output,    width = 1,    sink32.ready
		.sink32_valid         (crosser_054_out_valid),                                        //   input,    width = 1,          .valid
		.sink32_channel       (crosser_054_out_channel),                                      //   input,   width = 60,          .channel
		.sink32_data          (crosser_054_out_data),                                         //   input,  width = 128,          .data
		.sink32_startofpacket (crosser_054_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink32_endofpacket   (crosser_054_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink33_ready         (crosser_055_out_ready),                                        //  output,    width = 1,    sink33.ready
		.sink33_valid         (crosser_055_out_valid),                                        //   input,    width = 1,          .valid
		.sink33_channel       (crosser_055_out_channel),                                      //   input,   width = 60,          .channel
		.sink33_data          (crosser_055_out_data),                                         //   input,  width = 128,          .data
		.sink33_startofpacket (crosser_055_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink33_endofpacket   (crosser_055_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink34_ready         (crosser_056_out_ready),                                        //  output,    width = 1,    sink34.ready
		.sink34_valid         (crosser_056_out_valid),                                        //   input,    width = 1,          .valid
		.sink34_channel       (crosser_056_out_channel),                                      //   input,   width = 60,          .channel
		.sink34_data          (crosser_056_out_data),                                         //   input,  width = 128,          .data
		.sink34_startofpacket (crosser_056_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink34_endofpacket   (crosser_056_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink35_ready         (rsp_demux_035_src0_ready),                                     //  output,    width = 1,    sink35.ready
		.sink35_valid         (rsp_demux_035_src0_valid),                                     //   input,    width = 1,          .valid
		.sink35_channel       (rsp_demux_035_src0_channel),                                   //   input,   width = 60,          .channel
		.sink35_data          (rsp_demux_035_src0_data),                                      //   input,  width = 128,          .data
		.sink35_startofpacket (rsp_demux_035_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink35_endofpacket   (rsp_demux_035_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink36_ready         (rsp_demux_036_src0_ready),                                     //  output,    width = 1,    sink36.ready
		.sink36_valid         (rsp_demux_036_src0_valid),                                     //   input,    width = 1,          .valid
		.sink36_channel       (rsp_demux_036_src0_channel),                                   //   input,   width = 60,          .channel
		.sink36_data          (rsp_demux_036_src0_data),                                      //   input,  width = 128,          .data
		.sink36_startofpacket (rsp_demux_036_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink36_endofpacket   (rsp_demux_036_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink37_ready         (crosser_057_out_ready),                                        //  output,    width = 1,    sink37.ready
		.sink37_valid         (crosser_057_out_valid),                                        //   input,    width = 1,          .valid
		.sink37_channel       (crosser_057_out_channel),                                      //   input,   width = 60,          .channel
		.sink37_data          (crosser_057_out_data),                                         //   input,  width = 128,          .data
		.sink37_startofpacket (crosser_057_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink37_endofpacket   (crosser_057_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink38_ready         (crosser_058_out_ready),                                        //  output,    width = 1,    sink38.ready
		.sink38_valid         (crosser_058_out_valid),                                        //   input,    width = 1,          .valid
		.sink38_channel       (crosser_058_out_channel),                                      //   input,   width = 60,          .channel
		.sink38_data          (crosser_058_out_data),                                         //   input,  width = 128,          .data
		.sink38_startofpacket (crosser_058_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink38_endofpacket   (crosser_058_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink39_ready         (crosser_059_out_ready),                                        //  output,    width = 1,    sink39.ready
		.sink39_valid         (crosser_059_out_valid),                                        //   input,    width = 1,          .valid
		.sink39_channel       (crosser_059_out_channel),                                      //   input,   width = 60,          .channel
		.sink39_data          (crosser_059_out_data),                                         //   input,  width = 128,          .data
		.sink39_startofpacket (crosser_059_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink39_endofpacket   (crosser_059_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink40_ready         (rsp_demux_040_src0_ready),                                     //  output,    width = 1,    sink40.ready
		.sink40_valid         (rsp_demux_040_src0_valid),                                     //   input,    width = 1,          .valid
		.sink40_channel       (rsp_demux_040_src0_channel),                                   //   input,   width = 60,          .channel
		.sink40_data          (rsp_demux_040_src0_data),                                      //   input,  width = 128,          .data
		.sink40_startofpacket (rsp_demux_040_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink40_endofpacket   (rsp_demux_040_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink41_ready         (rsp_demux_041_src0_ready),                                     //  output,    width = 1,    sink41.ready
		.sink41_valid         (rsp_demux_041_src0_valid),                                     //   input,    width = 1,          .valid
		.sink41_channel       (rsp_demux_041_src0_channel),                                   //   input,   width = 60,          .channel
		.sink41_data          (rsp_demux_041_src0_data),                                      //   input,  width = 128,          .data
		.sink41_startofpacket (rsp_demux_041_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink41_endofpacket   (rsp_demux_041_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink42_ready         (crosser_060_out_ready),                                        //  output,    width = 1,    sink42.ready
		.sink42_valid         (crosser_060_out_valid),                                        //   input,    width = 1,          .valid
		.sink42_channel       (crosser_060_out_channel),                                      //   input,   width = 60,          .channel
		.sink42_data          (crosser_060_out_data),                                         //   input,  width = 128,          .data
		.sink42_startofpacket (crosser_060_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink42_endofpacket   (crosser_060_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink43_ready         (crosser_061_out_ready),                                        //  output,    width = 1,    sink43.ready
		.sink43_valid         (crosser_061_out_valid),                                        //   input,    width = 1,          .valid
		.sink43_channel       (crosser_061_out_channel),                                      //   input,   width = 60,          .channel
		.sink43_data          (crosser_061_out_data),                                         //   input,  width = 128,          .data
		.sink43_startofpacket (crosser_061_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink43_endofpacket   (crosser_061_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink44_ready         (crosser_062_out_ready),                                        //  output,    width = 1,    sink44.ready
		.sink44_valid         (crosser_062_out_valid),                                        //   input,    width = 1,          .valid
		.sink44_channel       (crosser_062_out_channel),                                      //   input,   width = 60,          .channel
		.sink44_data          (crosser_062_out_data),                                         //   input,  width = 128,          .data
		.sink44_startofpacket (crosser_062_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink44_endofpacket   (crosser_062_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink45_ready         (rsp_demux_045_src0_ready),                                     //  output,    width = 1,    sink45.ready
		.sink45_valid         (rsp_demux_045_src0_valid),                                     //   input,    width = 1,          .valid
		.sink45_channel       (rsp_demux_045_src0_channel),                                   //   input,   width = 60,          .channel
		.sink45_data          (rsp_demux_045_src0_data),                                      //   input,  width = 128,          .data
		.sink45_startofpacket (rsp_demux_045_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink45_endofpacket   (rsp_demux_045_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink46_ready         (rsp_demux_046_src0_ready),                                     //  output,    width = 1,    sink46.ready
		.sink46_valid         (rsp_demux_046_src0_valid),                                     //   input,    width = 1,          .valid
		.sink46_channel       (rsp_demux_046_src0_channel),                                   //   input,   width = 60,          .channel
		.sink46_data          (rsp_demux_046_src0_data),                                      //   input,  width = 128,          .data
		.sink46_startofpacket (rsp_demux_046_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink46_endofpacket   (rsp_demux_046_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink47_ready         (crosser_063_out_ready),                                        //  output,    width = 1,    sink47.ready
		.sink47_valid         (crosser_063_out_valid),                                        //   input,    width = 1,          .valid
		.sink47_channel       (crosser_063_out_channel),                                      //   input,   width = 60,          .channel
		.sink47_data          (crosser_063_out_data),                                         //   input,  width = 128,          .data
		.sink47_startofpacket (crosser_063_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink47_endofpacket   (crosser_063_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink48_ready         (crosser_064_out_ready),                                        //  output,    width = 1,    sink48.ready
		.sink48_valid         (crosser_064_out_valid),                                        //   input,    width = 1,          .valid
		.sink48_channel       (crosser_064_out_channel),                                      //   input,   width = 60,          .channel
		.sink48_data          (crosser_064_out_data),                                         //   input,  width = 128,          .data
		.sink48_startofpacket (crosser_064_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink48_endofpacket   (crosser_064_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink49_ready         (crosser_065_out_ready),                                        //  output,    width = 1,    sink49.ready
		.sink49_valid         (crosser_065_out_valid),                                        //   input,    width = 1,          .valid
		.sink49_channel       (crosser_065_out_channel),                                      //   input,   width = 60,          .channel
		.sink49_data          (crosser_065_out_data),                                         //   input,  width = 128,          .data
		.sink49_startofpacket (crosser_065_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink49_endofpacket   (crosser_065_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink50_ready         (rsp_demux_050_src0_ready),                                     //  output,    width = 1,    sink50.ready
		.sink50_valid         (rsp_demux_050_src0_valid),                                     //   input,    width = 1,          .valid
		.sink50_channel       (rsp_demux_050_src0_channel),                                   //   input,   width = 60,          .channel
		.sink50_data          (rsp_demux_050_src0_data),                                      //   input,  width = 128,          .data
		.sink50_startofpacket (rsp_demux_050_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink50_endofpacket   (rsp_demux_050_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink51_ready         (rsp_demux_051_src0_ready),                                     //  output,    width = 1,    sink51.ready
		.sink51_valid         (rsp_demux_051_src0_valid),                                     //   input,    width = 1,          .valid
		.sink51_channel       (rsp_demux_051_src0_channel),                                   //   input,   width = 60,          .channel
		.sink51_data          (rsp_demux_051_src0_data),                                      //   input,  width = 128,          .data
		.sink51_startofpacket (rsp_demux_051_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink51_endofpacket   (rsp_demux_051_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink52_ready         (crosser_066_out_ready),                                        //  output,    width = 1,    sink52.ready
		.sink52_valid         (crosser_066_out_valid),                                        //   input,    width = 1,          .valid
		.sink52_channel       (crosser_066_out_channel),                                      //   input,   width = 60,          .channel
		.sink52_data          (crosser_066_out_data),                                         //   input,  width = 128,          .data
		.sink52_startofpacket (crosser_066_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink52_endofpacket   (crosser_066_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink53_ready         (crosser_067_out_ready),                                        //  output,    width = 1,    sink53.ready
		.sink53_valid         (crosser_067_out_valid),                                        //   input,    width = 1,          .valid
		.sink53_channel       (crosser_067_out_channel),                                      //   input,   width = 60,          .channel
		.sink53_data          (crosser_067_out_data),                                         //   input,  width = 128,          .data
		.sink53_startofpacket (crosser_067_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink53_endofpacket   (crosser_067_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink54_ready         (crosser_068_out_ready),                                        //  output,    width = 1,    sink54.ready
		.sink54_valid         (crosser_068_out_valid),                                        //   input,    width = 1,          .valid
		.sink54_channel       (crosser_068_out_channel),                                      //   input,   width = 60,          .channel
		.sink54_data          (crosser_068_out_data),                                         //   input,  width = 128,          .data
		.sink54_startofpacket (crosser_068_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink54_endofpacket   (crosser_068_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink55_ready         (rsp_demux_055_src0_ready),                                     //  output,    width = 1,    sink55.ready
		.sink55_valid         (rsp_demux_055_src0_valid),                                     //   input,    width = 1,          .valid
		.sink55_channel       (rsp_demux_055_src0_channel),                                   //   input,   width = 60,          .channel
		.sink55_data          (rsp_demux_055_src0_data),                                      //   input,  width = 128,          .data
		.sink55_startofpacket (rsp_demux_055_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink55_endofpacket   (rsp_demux_055_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink56_ready         (rsp_demux_056_src0_ready),                                     //  output,    width = 1,    sink56.ready
		.sink56_valid         (rsp_demux_056_src0_valid),                                     //   input,    width = 1,          .valid
		.sink56_channel       (rsp_demux_056_src0_channel),                                   //   input,   width = 60,          .channel
		.sink56_data          (rsp_demux_056_src0_data),                                      //   input,  width = 128,          .data
		.sink56_startofpacket (rsp_demux_056_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink56_endofpacket   (rsp_demux_056_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink57_ready         (crosser_069_out_ready),                                        //  output,    width = 1,    sink57.ready
		.sink57_valid         (crosser_069_out_valid),                                        //   input,    width = 1,          .valid
		.sink57_channel       (crosser_069_out_channel),                                      //   input,   width = 60,          .channel
		.sink57_data          (crosser_069_out_data),                                         //   input,  width = 128,          .data
		.sink57_startofpacket (crosser_069_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink57_endofpacket   (crosser_069_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink58_ready         (crosser_070_out_ready),                                        //  output,    width = 1,    sink58.ready
		.sink58_valid         (crosser_070_out_valid),                                        //   input,    width = 1,          .valid
		.sink58_channel       (crosser_070_out_channel),                                      //   input,   width = 60,          .channel
		.sink58_data          (crosser_070_out_data),                                         //   input,  width = 128,          .data
		.sink58_startofpacket (crosser_070_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink58_endofpacket   (crosser_070_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink59_ready         (crosser_071_out_ready),                                        //  output,    width = 1,    sink59.ready
		.sink59_valid         (crosser_071_out_valid),                                        //   input,    width = 1,          .valid
		.sink59_channel       (crosser_071_out_channel),                                      //   input,   width = 60,          .channel
		.sink59_data          (crosser_071_out_data),                                         //   input,  width = 128,          .data
		.sink59_startofpacket (crosser_071_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink59_endofpacket   (crosser_071_out_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src2_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                       //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src2_data),                                          //   input,  width = 128,              .data
		.out_ready         (crosser_out_ready),                                            //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                            //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                    //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                      //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                          //  output,   width = 60,              .channel
		.out_data          (crosser_out_data),                                             //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src3_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                       //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src3_data),                                          //   input,  width = 128,              .data
		.out_ready         (crosser_001_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_001_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_002 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src4_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                       //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src4_data),                                          //   input,  width = 128,              .data
		.out_ready         (crosser_002_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_002_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_003 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src7_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                                       //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src7_data),                                          //   input,  width = 128,              .data
		.out_ready         (crosser_003_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_003_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_004 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src8_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                                       //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src8_data),                                          //   input,  width = 128,              .data
		.out_ready         (crosser_004_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_004_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_004_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_004_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_005 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                         //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src9_valid),                                         //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                                 //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                                   //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                                       //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src9_data),                                          //   input,  width = 128,              .data
		.out_ready         (crosser_005_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_005_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_005_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_005_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_006 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src12_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src12_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src12_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src12_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_006_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_006_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_006_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_006_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_007 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src13_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src13_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src13_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src13_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_007_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_007_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_007_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_007_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_008 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src14_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src14_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src14_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src14_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_008_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_008_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_008_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_008_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_009 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src17_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src17_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src17_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src17_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src17_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src17_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_009_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_009_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_009_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_009_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_010 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src18_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src18_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src18_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src18_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src18_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src18_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_010_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_010_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_010_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_010_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_011 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src19_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src19_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src19_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src19_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src19_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src19_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_011_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_011_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_011_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_011_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_012 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src22_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src22_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src22_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src22_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src22_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src22_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_012_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_012_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_012_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_012_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_013 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src23_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src23_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src23_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src23_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src23_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src23_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_013_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_013_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_013_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_013_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_014 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src24_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src24_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src24_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src24_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src24_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src24_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_014_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_014_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_014_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_014_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_015 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src27_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src27_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src27_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src27_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src27_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src27_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_015_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_015_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_015_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_015_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_016 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src28_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src28_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src28_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src28_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src28_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src28_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_016_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_016_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_016_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_016_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_017 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src29_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src29_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src29_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src29_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src29_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src29_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_017_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_017_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_017_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_017_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_018 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src32_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src32_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src32_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src32_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src32_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src32_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_018_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_018_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_018_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_018_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_019 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src33_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src33_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src33_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src33_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src33_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src33_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_019_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_019_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_019_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_019_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_020 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src34_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src34_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src34_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src34_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src34_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src34_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_020_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_020_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_020_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_020_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_021 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src37_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src37_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src37_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src37_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src37_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src37_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_021_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_021_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_021_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_021_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_022 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src38_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src38_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src38_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src38_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src38_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src38_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_022_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_022_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_022_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_022_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_023 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src39_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src39_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src39_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src39_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src39_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src39_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_023_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_023_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_023_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_023_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_024 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src42_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src42_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src42_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src42_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src42_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src42_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_024_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_024_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_024_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_024_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_024_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_025 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src43_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src43_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src43_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src43_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src43_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src43_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_025_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_025_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_025_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_025_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_025_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_026 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src44_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src44_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src44_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src44_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src44_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src44_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_026_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_026_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_026_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_026_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_026_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_026_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_027 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src47_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src47_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src47_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src47_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src47_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src47_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_027_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_027_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_027_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_027_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_027_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_027_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_028 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src48_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src48_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src48_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src48_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src48_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src48_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_028_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_028_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_028_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_028_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_028_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_028_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_029 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src49_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src49_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src49_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src49_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src49_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src49_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_029_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_029_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_029_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_029_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_029_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_029_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_030 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src52_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src52_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src52_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src52_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src52_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src52_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_030_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_030_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_030_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_030_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_030_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_030_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_031 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src53_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src53_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src53_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src53_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src53_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src53_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_031_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_031_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_031_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_031_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_031_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_031_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_032 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src54_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src54_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src54_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src54_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src54_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src54_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_032_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_032_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_032_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_032_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_032_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_032_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_033 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src57_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src57_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src57_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src57_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src57_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src57_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_033_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_033_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_033_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_033_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_033_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_033_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_034 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src58_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src58_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src58_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src58_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src58_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src58_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_034_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_034_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_034_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_034_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_034_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_034_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_035 (
		.in_clk            (clk_csr_clk_clk),                                              //   input,    width = 1,        in_clk.clk
		.in_reset          (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src59_ready),                                        //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src59_valid),                                        //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src59_startofpacket),                                //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src59_endofpacket),                                  //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src59_channel),                                      //   input,   width = 60,              .channel
		.in_data           (cmd_demux_src59_data),                                         //   input,  width = 128,              .data
		.out_ready         (crosser_035_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_035_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_035_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_035_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_035_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_035_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_036 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_002_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_036_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_036_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_036_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_036_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_036_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_036_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_037 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_003_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_037_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_037_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_037_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_037_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_037_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_037_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_038 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_004_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_038_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_038_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_038_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_038_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_038_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_038_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_039 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_007_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_039_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_039_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_039_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_039_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_039_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_039_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_040 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_008_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_040_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_040_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_040_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_040_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_040_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_040_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_041 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_009_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_041_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_041_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_041_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_041_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_041_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_041_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_042 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_012_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_042_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_042_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_042_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_042_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_042_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_042_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_043 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_013_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_043_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_043_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_043_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_043_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_043_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_043_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_044 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_014_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_044_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_044_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_044_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_044_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_044_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_044_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_045 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_017_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_017_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_017_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_045_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_045_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_045_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_045_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_045_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_045_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_046 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_018_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_018_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_018_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_046_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_046_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_046_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_046_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_046_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_046_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_047 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_019_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_019_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_019_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_019_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_019_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_019_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_047_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_047_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_047_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_047_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_047_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_047_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_048 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_022_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_022_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_022_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_022_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_022_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_022_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_048_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_048_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_048_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_048_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_048_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_048_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_049 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_023_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_023_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_023_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_023_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_023_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_023_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_049_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_049_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_049_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_049_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_049_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_049_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_050 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_024_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_024_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_024_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_024_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_024_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_024_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_050_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_050_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_050_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_050_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_050_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_050_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_051 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_027_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_027_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_027_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_027_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_027_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_027_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_051_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_051_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_051_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_051_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_051_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_051_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_052 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_028_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_028_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_028_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_028_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_028_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_028_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_052_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_052_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_052_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_052_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_052_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_052_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_053 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_029_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_029_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_029_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_029_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_029_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_029_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_053_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_053_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_053_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_053_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_053_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_053_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_054 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_032_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_032_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_032_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_032_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_032_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_032_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_054_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_054_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_054_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_054_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_054_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_054_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_055 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_033_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_033_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_033_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_033_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_033_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_033_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_055_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_055_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_055_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_055_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_055_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_055_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_056 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_034_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_034_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_034_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_034_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_034_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_034_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_056_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_056_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_056_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_056_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_056_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_056_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_057 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_037_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_037_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_037_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_037_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_037_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_037_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_057_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_057_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_057_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_057_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_057_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_057_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_058 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_038_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_038_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_038_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_038_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_038_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_038_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_058_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_058_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_058_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_058_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_058_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_058_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_059 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_039_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_039_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_039_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_039_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_039_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_039_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_059_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_059_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_059_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_059_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_059_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_059_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_060 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_042_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_042_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_042_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_042_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_042_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_042_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_060_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_060_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_060_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_060_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_060_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_060_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_061 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_043_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_043_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_043_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_043_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_043_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_043_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_061_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_061_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_061_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_061_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_061_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_061_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_062 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_044_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_044_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_044_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_044_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_044_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_044_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_062_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_062_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_062_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_062_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_062_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_062_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_063 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_047_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_047_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_047_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_047_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_047_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_047_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_063_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_063_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_063_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_063_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_063_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_063_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_064 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_048_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_048_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_048_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_048_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_048_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_048_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_064_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_064_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_064_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_064_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_064_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_064_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_065 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_049_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_049_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_049_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_049_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_049_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_049_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_065_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_065_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_065_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_065_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_065_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_065_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_066 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_052_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_052_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_052_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_052_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_052_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_052_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_066_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_066_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_066_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_066_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_066_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_066_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_067 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_053_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_053_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_053_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_053_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_053_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_053_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_067_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_067_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_067_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_067_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_067_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_067_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_068 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_054_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_054_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_054_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_054_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_054_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_054_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_068_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_068_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_068_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_068_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_068_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_068_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_069 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_057_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_057_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_057_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_057_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_057_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_057_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_069_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_069_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_069_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_069_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_069_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_069_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_070 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_058_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_058_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_058_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_058_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_058_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_058_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_070_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_070_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_070_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_070_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_070_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_070_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

	address_decode_altera_avalon_st_handshake_clock_crosser_181_oeeupgi #(
		.DATA_WIDTH          (128),
		.BITS_PER_SYMBOL     (128),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (60),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_071 (
		.in_clk            (tx_xcvr_half_clk_clk_clk),                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (tx_sc_fifo_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_csr_clk_clk),                                              //   input,    width = 1,       out_clk.clk
		.out_reset         (merlin_master_translator_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_059_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_059_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_059_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_059_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_059_src0_channel),                                   //   input,   width = 60,              .channel
		.in_data           (rsp_demux_059_src0_data),                                      //   input,  width = 128,              .data
		.out_ready         (crosser_071_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_071_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_071_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_071_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_071_out_channel),                                      //  output,   width = 60,              .channel
		.out_data          (crosser_071_out_data),                                         //  output,  width = 128,              .data
		.in_empty          (1'b0),                                                         // (terminated),                             
		.in_error          (1'b0),                                                         // (terminated),                             
		.out_empty         (),                                                             // (terminated),                             
		.out_error         ()                                                              // (terminated),                             
	);

endmodule
