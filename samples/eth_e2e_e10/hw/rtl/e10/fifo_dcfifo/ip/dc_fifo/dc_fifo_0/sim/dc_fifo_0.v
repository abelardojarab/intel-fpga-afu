// dc_fifo_0.v

// Generated using ACDS version 17.0 290

`timescale 1 ps / 1 ps
module dc_fifo_0 (
		input  wire [31:0] in_data,           //            in.data
		input  wire        in_valid,          //              .valid
		output wire        in_ready,          //              .ready
		input  wire        in_startofpacket,  //              .startofpacket
		input  wire        in_endofpacket,    //              .endofpacket
		input  wire [1:0]  in_empty,          //              .empty
		input  wire [0:0]  in_error,          //              .error
		input  wire        in_clk,            //        in_clk.clk
		input  wire        in_reset_n,        //  in_clk_reset.reset_n
		output wire [31:0] out_data,          //           out.data
		output wire        out_valid,         //              .valid
		input  wire        out_ready,         //              .ready
		output wire        out_startofpacket, //              .startofpacket
		output wire        out_endofpacket,   //              .endofpacket
		output wire [1:0]  out_empty,         //              .empty
		output wire [0:0]  out_error,         //              .error
		input  wire        out_clk,           //       out_clk.clk
		input  wire        out_reset_n        // out_clk_reset.reset_n
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (4),
		.BITS_PER_SYMBOL    (8),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (1),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) dc_fifo_0 (
		.in_clk            (in_clk),                               //        in_clk.clk
		.in_reset_n        (in_reset_n),                           //  in_clk_reset.reset_n
		.out_clk           (out_clk),                              //       out_clk.clk
		.out_reset_n       (out_reset_n),                          // out_clk_reset.reset_n
		.in_data           (in_data),                              //            in.data
		.in_valid          (in_valid),                             //              .valid
		.in_ready          (in_ready),                             //              .ready
		.in_startofpacket  (in_startofpacket),                     //              .startofpacket
		.in_endofpacket    (in_endofpacket),                       //              .endofpacket
		.in_empty          (in_empty),                             //              .empty
		.in_error          (in_error),                             //              .error
		.out_data          (out_data),                             //           out.data
		.out_valid         (out_valid),                            //              .valid
		.out_ready         (out_ready),                            //              .ready
		.out_startofpacket (out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (out_endofpacket),                      //              .endofpacket
		.out_empty         (out_empty),                            //              .empty
		.out_error         (out_error),                            //              .error
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_channel        (1'b0),                                 //   (terminated)
		.out_channel       (),                                     //   (terminated)
		.space_avail_data  ()                                      //   (terminated)
	);

endmodule
