// Copyright 2010-2018 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////

`timescale 1ps/1ps

// Generated by one of Gregg's toys.   Share And Enjoy.
// Executable compiled May 18 2018 10:06:39
// This file was generated 11/02/2018 13:30:06

// Pipelined MUX
// 8:1 MUX, latency 1 ticks
// using words of 32 bits

module intc_mux8_t1_w32 #(
    parameter SIM_EMULATE = 1'b0
) (
    input clk,
    input [255:0] din,  // sel=0 takes from least significant word
    input [2:0] sel,
    output [31:0] dout
);

// this needs a multi-LUT decomposition
// the data is fully populated
wire [63:0] head_din;
wire head_sel = sel[2];

///////////////////////////////////////////
// two leaves 

intc_mux4_t0_w32 #(
    .SIM_EMULATE(SIM_EMULATE)
) mx0 (
    .clk(clk),
    .din(din[127:0]),
    .sel(sel[1:0]),
    .dout(head_din[31:0])
);

intc_mux4_t0_w32 #(
    .SIM_EMULATE(SIM_EMULATE)
) mx1 (
    .clk(clk),
    .din(din[255:128]),
    .sel(sel[1:0]),
    .dout(head_din[63:32])
);

///////////////////////////////////////////
// 2:1 head mux 

intc_mux2_t1_w32 #(
    .SIM_EMULATE(SIM_EMULATE)
) mx2 (
    .clk(clk),
    .din(head_din),
    .sel(head_sel),
    .dout(dout)
);


endmodule

