// Copyright 2010-2017 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////

`timescale 1ps/1ps

// Generated by one of Gregg's toys.   Share And Enjoy.
// Executable compiled Jan  4 2017 09:42:56
// This file was generated 01/25/2017 16:26:05

module bully_bully1 #(
    parameter SIM_EMULATE = 1'b0
) (
    input clk,
    input sclr,
    input sclr_err,
    output sticky_err
);

/////////////////////////////////////////////////
// All of the bullies work by asking questions
// with known answers, and trapping any wrong
// responses in the sticky error flag.
// They are generally rough on the fabric, hence
// the name.  Methods and targeted blocks vary.
/////////////////////////////////////////////////

reg lf_sclr = 1'b1 /* synthesis preserve_syn_only */;
always @(posedge clk) begin
    lf_sclr <= sclr;
end

reg sclr_err_r = 1'b0 /* synthesis preserve_syn_only */;
always @(posedge clk) begin
    sclr_err_r <= sclr_err;
end


////////////////////////////////////////////
// Generate a LFSR stream

wire [7:0] lf_dout_i;
lfsr_8_p12d lf0 (
    .clk(clk),
    .sclr(lf_sclr),
    .dout(lf_dout_i)
);
defparam lf0 .SIM_EMULATE = SIM_EMULATE;

reg [7:0] lf_dout_ii;
always @(posedge clk) lf_dout_ii <= lf_dout_i;

reg [7:0] lf_dout;
always @(posedge clk) lf_dout <= lf_dout_ii;


////////////////////////////////////////////
// delay the stream, randomized methods

wire [7:0] chk_bus;
intc_delay15_w8 d0 (
    .clk(clk),
    .din(lf_dout),
    .dout(chk_bus)
);
defparam d0 .SIM_EMULATE = SIM_EMULATE;


////////////////////////////////////////////
// check the delayed stream for errors

reg [7:0] chk_bus_i;
always @(posedge clk) chk_bus_i <= chk_bus;

reg [7:0] chk_bus_ii;
always @(posedge clk) chk_bus_ii <= chk_bus_i;

reg [7:0] chk_bus_r;
always @(posedge clk) chk_bus_r <= chk_bus_ii;

lfsr_chkn8_p12d lc0 (
    .clk(clk),
    .din(chk_bus_r),
    .sclr_err(sclr_err_r),
    .sticky_err(sticky_err)
);
defparam lc0 .SIM_EMULATE = SIM_EMULATE;

endmodule

