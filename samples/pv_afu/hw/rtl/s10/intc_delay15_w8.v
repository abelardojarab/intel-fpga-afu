// Copyright 2010-2017 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////

`timescale 1ps/1ps

// Generated by one of Gregg's toys.   Share And Enjoy.
// Executable compiled Jan  4 2017 09:42:43
// This file was generated 01/25/2017 16:26:07

// 15 tick delay for 8 bit data words

module intc_delay15_w8 #(
    parameter SIM_EMULATE = 1'b0
) (
    input clk,
    input [7:0] din,
    output [7:0] dout
);

////////////////////////////////////////////////
// Using a MLAB based delay
////////////////////////////////////////////////

wire [3:0] wptr;
intc_cnt4 ct0 (
    .clk(clk),
    .dout(wptr)
);
defparam ct0 .SIM_EMULATE = SIM_EMULATE;

wire [3:0] rptr;
intc_subc4_hc_t1 sc0 (
    .clk(clk),
    .din(wptr),
    .dout(rptr)
);
defparam sc0 .SIM_EMULATE = SIM_EMULATE;

wire [7:0] dout_w;
intc_mlab8_a4r1w1 m0 (
    .rclk(clk),
    .wclk(clk),
    .waddr(wptr),
    .din(din),
    .raddr(rptr),
    .dout(dout_w)
);
defparam m0 .SIM_EMULATE = SIM_EMULATE;


reg [7:0] dout_r = 8'b0;
always @(posedge clk) dout_r <= dout_w;
assign dout = dout_r;
endmodule

