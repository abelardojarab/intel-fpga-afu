// Copyright 2010-2017 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////

`timescale 1ps/1ps

// Generated by one of Gregg's toys.   Share And Enjoy.
// Executable compiled Jan  4 2017 09:42:36
// This file was generated 01/25/2017 16:26:24

// Pipelined OR gate
// 8 inputs,  latency 2 ticks

module intc_or8_t2 #(
    parameter SIM_EMULATE = 1'b0
) (
    input clk,
    input [7:0] din,
    output dout
);

///////////////////////////////////////
// biting off 2 leaves of size 4

// leaf latency is 1
wire [1:0] leaf;

intc_or4_t1 #(
    .SIM_EMULATE(SIM_EMULATE)
) lf0 (
    .clk(clk),
    .din(din[3:0]),
    .dout(leaf[0])
);

intc_or4_t1 #(
    .SIM_EMULATE(SIM_EMULATE)
) lf1 (
    .clk(clk),
    .din(din[7:4]),
    .dout(leaf[1])
);

////////////////////////////////////////
// Combine the 2 leaves in 1 ticks

intc_or2_t1 #(
    .SIM_EMULATE(SIM_EMULATE)
) hd0 (
    .clk(clk),
    .din(leaf),
    .dout(dout)
);


endmodule

