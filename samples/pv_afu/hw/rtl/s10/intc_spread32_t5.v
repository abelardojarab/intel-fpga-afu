// Copyright 2010-2017 Altera Corporation. All rights reserved.
// Altera products are protected under numerous U.S. and foreign patents, 
// maskwork rights, copyrights and other intellectual property laws.  
//
// This reference design file, and your use thereof, is subject to and governed
// by the terms and conditions of the applicable Altera Reference Design 
// License Agreement (either as signed by you or found at www.altera.com).  By
// using this reference design file, you indicate your acceptance of such terms
// and conditions between you and Altera Corporation.  In the event that you do
// not agree with such terms and conditions, you may not use the reference 
// design file and please promptly destroy any copies you have made.
//
// This reference design file is being provided on an "as-is" basis and as an 
// accommodation and therefore all warranties, representations or guarantees of 
// any kind (whether express, implied or statutory) including, without 
// limitation, warranties of merchantability, non-infringement, or fitness for
// a particular purpose, are specifically disclaimed.  By making this reference
// design file available, Altera expressly does not recommend, suggest or 
// require that this reference design file be used in combination with any 
// other product not provided by Altera.
/////////////////////////////////////////////////////////////////////////////

`timescale 1ps/1ps

// Generated by one of Gregg's toys.   Share And Enjoy.
// Executable compiled Jun  1 2017 09:50:04
// This file was generated 06/02/2017 16:40:11

// spread out a single input through a register tree to 32 destinations
// 5 ticks available to get there

module intc_spread32_t5 #(
    parameter SIM_EMULATE = 1'b0
) (
    input clk,
    input din,
    output [31:0] dout
);

// targeting roughly 5 ticks of splitting by 2

wire [15:0] helpers;
reg [31:0] dout_r = 32'b0 /* synthesis preserve_syn_only */;
always @(posedge clk) begin
    dout_r[1:0] <= {2{helpers[0]}};
    dout_r[3:2] <= {2{helpers[1]}};
    dout_r[5:4] <= {2{helpers[2]}};
    dout_r[7:6] <= {2{helpers[3]}};
    dout_r[9:8] <= {2{helpers[4]}};
    dout_r[11:10] <= {2{helpers[5]}};
    dout_r[13:12] <= {2{helpers[6]}};
    dout_r[15:14] <= {2{helpers[7]}};
    dout_r[17:16] <= {2{helpers[8]}};
    dout_r[19:18] <= {2{helpers[9]}};
    dout_r[21:20] <= {2{helpers[10]}};
    dout_r[23:22] <= {2{helpers[11]}};
    dout_r[25:24] <= {2{helpers[12]}};
    dout_r[27:26] <= {2{helpers[13]}};
    dout_r[29:28] <= {2{helpers[14]}};
    dout_r[31:30] <= {2{helpers[15]}};
end

intc_spread16_t4 sp0 (
    .clk(clk),
    .din(din),
    .dout(helpers)
);
defparam sp0 .SIM_EMULATE = SIM_EMULATE;

assign dout = dout_r;

endmodule

